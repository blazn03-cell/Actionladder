import { useState, useMemo, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { LoadingSpinner } from "@/components/ui/loading-spinner";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Video, MapPin, Users, Eye, Search, Filter, Play, Square, Trash2, RefreshCw, Globe, Trophy, Calendar, Settings, ExternalLink, Star, Clock, TrendingUp, MessageCircle, Share2 } from "lucide-react";
import type { LiveStream, InsertLiveStream, Match, Player, Tournament } from "@shared/schema";

// Enhanced form schema with geographic and category data
const enhancedLiveStreamSchema = z.object({ platform: z.enum(["twitch", "youtube", "facebook", "tiktok", "kick", "other"]), url: z.string().url("Must be a valid URL"), title: z.string().min(1, "Title is required"), poolHallName: z.string().min(1, "Pool hall name is required"), city: z.string().min(1, "City is required"), state: z.string().min(2, "State is required").max(2, "Use 2-letter state code"), category: z.enum(["tournament", "casual", "practice", "event"]), quality: z.enum(["hd", "fhd", "4k"]), matchId: z.string().optional(), tournamentId: z.string().optional(), streamerId: z.string().optional(), tags: z.array(z.string()).optional(), language: z.string().default("en"),
}); type EnhancedLiveStreamFormData = z.infer<typeof enhancedLiveStreamSchema>; // Enhanced platform configurations
const platforms = [ { value: "twitch", label: "Twitch", color: "text-purple-400", bgColor: "bg-purple-900/20", icon: "üéÆ" }, { value: "youtube", label: "YouTube", color: "text-red-400", bgColor: "bg-red-900/20", icon: "üì∫" }, { value: "facebook", label: "Facebook", color: "text-blue-400", bgColor: "bg-blue-900/20", icon: "üìò" }, { value: "tiktok", label: "TikTok", color: "text-pink-400", bgColor: "bg-pink-900/20", icon: "üéµ" }, { value: "kick", label: "Kick", color: "text-green-400", bgColor: "bg-green-900/20", icon: "‚ö°" }, { value: "other", label: "Other", color: "text-gray-400", bgColor: "bg-gray-900/20", icon: "üåê" },
]; const categories = [ { value: "tournament", label: "Tournament", icon: "üèÜ", color: "text-yellow-400" }, { value: "casual", label: "Casual Play", icon: "üé±", color: "text-emerald-400" }, { value: "practice", label: "Practice", icon: "üéØ", color: "text-blue-400" }, { value: "event", label: "Special Event", icon: "‚≠ê", color: "text-purple-400" },
]; const qualities = [ { value: "hd", label: "HD (720p)", icon: "üì∫" }, { value: "fhd", label: "Full HD (1080p)", icon: "üé¨" }, { value: "4k", label: "4K Ultra HD", icon: "üíé" },
]; // US States for dropdown
const US_STATES = [ "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
]; // Utility function to generate embed URLs
function generateEmbedUrl(platform: string, url: string): string { try { switch (platform) { case "twitch": { const channelMatch = url.match(/twitch\.tv\/([a-zA-Z0-9_]+)/); const channel = channelMatch?.[1]; return channel ? `https://player.twitch.tv/?channel=${channel}&parent=localhost&parent=${window.location.hostname}` : url; } case "youtube": { const videoMatch = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/); const videoId = videoMatch?.[1]; return videoId ? `https://www.youtube.com/embed/${videoId}?autoplay=1` : url; } default: return url; } } catch { return url; }
} function CreateStreamDialog() { const [open, setOpen] = useState(false); const { toast } = useToast(); const queryClient = useQueryClient(); // Fetch related data for dropdowns const { data: matches = [] } = useQuery<Match[]>({ queryKey: ["/api/matches"] }); const { data: tournaments = [] } = useQuery<Tournament[]>({ queryKey: ["/api/tournaments"] }); const { data: players = [] } = useQuery<Player[]>({ queryKey: ["/api/players"] }); const form = useForm<EnhancedLiveStreamFormData>({ resolver: zodResolver(enhancedLiveStreamSchema), defaultValues: { platform: "twitch", url: "", title: "", poolHallName: "", city: "", state: "", category: "casual", quality: "hd", language: "en", tags: [], }, }); const createStreamMutation = useMutation({ mutationFn: (data: InsertLiveStream) => apiRequest("POST", "/api/live-streams", data), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ["/api/live-streams"] }); toast({ title: "Stream Created Successfully", description: "Your live stream has been added to the ActionLadder network!", duration: 5000, }); setOpen(false); form.reset(); }, onError: (error: any) => { toast({ title: "Failed to Create Stream", description: error.message || "Unable to create stream. Please check your details and try again.", variant: "destructive", duration: 5000, }); }, }); const onSubmit = (data: EnhancedLiveStreamFormData) => { const streamData: InsertLiveStream = { ...data, isLive: true, viewerCount: Math.floor(Math.random() * 50) + 10, embedUrl: generateEmbedUrl(data.platform, data.url), thumbnailUrl: `https://images.unsplash.com/photo-1574847187621-916885951c64?w=400&h=225&fit=crop&crop=center&q=80`, tags: data.tags || [], }; createStreamMutation.mutate(streamData); }; const scheduledMatches = matches.filter(m => m.status === "scheduled"); const activeMatches = matches.filter(m => m.status === "active"); const activeTournaments = tournaments.filter(t => t.status === "active"); return ( <Dialog open={open} onOpenChange={setOpen}> <DialogTrigger asChild> <Button className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white shadow-lg transition-all duration-200" data-testid="button-create-stream" > <Video className="w-4 h-4 mr-2" /> Start Live Stream </Button> </DialogTrigger> <DialogContent className="bg-card border-emerald-500/20 max-w-2xl max-h-[90vh] overflow-y-auto"> <DialogHeader> <DialogTitle className="text-emerald-400 flex items-center gap-2"> <Video className="w-5 h-5" /> Create Live Stream </DialogTitle> </DialogHeader> <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4"> {/* Platform and URL */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <FormField control={form.control} name="platform" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Platform</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-stream-platform" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select platform" /> </SelectTrigger> </FormControl> <SelectContent> {platforms.map((platform) => ( <SelectItem key={platform.value} value={platform.value}> <span className="flex items-center gap-2"> <span>{platform.icon}</span> {platform.label} </span> </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="url" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Stream URL</FormLabel> <FormControl> <Input {...field} placeholder="https://twitch.tv/your-channel" className="bg-muted border-emerald-500/20" data-testid="input-stream-url" /> </FormControl> <FormMessage /> </FormItem> )} /> </div> {/* Title and Pool Hall */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <FormField control={form.control} name="title" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Stream Title</FormLabel> <FormControl> <Input {...field} placeholder="Friday Night Tournament Match play" className="bg-muted border-emerald-500/20" data-testid="input-stream-title" /> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="poolHallName" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Pool Hall Name</FormLabel> <FormControl> <Input {...field} placeholder="Downtown Billiards" className="bg-muted border-emerald-500/20" data-testid="input-pool-hall-name" /> </FormControl> <FormMessage /> </FormItem> )} /> </div> {/* Geographic Information */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <FormField control={form.control} name="city" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">City</FormLabel> <FormControl> <Input {...field} placeholder="San Antonio" className="bg-muted border-emerald-500/20" data-testid="input-city" /> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="state" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">State</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-state" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select state" /> </SelectTrigger> </FormControl> <SelectContent className="max-h-60"> {US_STATES.map((state) => ( <SelectItem key={state} value={state}> {state} </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> </div> {/* Category and Quality */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <FormField control={form.control} name="category" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Stream Category</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-category" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select category" /> </SelectTrigger> </FormControl> <SelectContent> {categories.map((category) => ( <SelectItem key={category.value} value={category.value}> <span className="flex items-center gap-2"> <span>{category.icon}</span> {category.label} </span> </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="quality" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Video Quality</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-quality" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select quality" /> </SelectTrigger> </FormControl> <SelectContent> {qualities.map((quality) => ( <SelectItem key={quality.value} value={quality.value}> <span className="flex items-center gap-2"> <span>{quality.icon}</span> {quality.label} </span> </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> </div> {/* Associated Content */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <FormField control={form.control} name="matchId" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Associated Match</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-match" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select match (optional)" /> </SelectTrigger> </FormControl> <SelectContent> <SelectItem value="">No specific match</SelectItem> {activeMatches.map((match) => ( <SelectItem key={match.id} value={match.id}> <span className="text-emerald-400">LIVE:</span> {match.challenger} vs {match.opponent} </SelectItem> ))} {scheduledMatches.map((match) => ( <SelectItem key={match.id} value={match.id}> <span className="text-yellow-400">SCHED:</span> {match.challenger} vs {match.opponent} </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="tournamentId" render={({ field }) => ( <FormItem> <FormLabel className="text-gray-300">Associated Tournament</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger data-testid="select-tournament" className="bg-muted border-emerald-500/20"> <SelectValue placeholder="Select tournament (optional)" /> </SelectTrigger> </FormControl> <SelectContent> <SelectItem value="">No specific tournament</SelectItem> {activeTournaments.map((tournament) => ( <SelectItem key={tournament.id} value={tournament.id}> üèÜ {tournament.name} (${tournament.entry fee/100}) </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> </div> <div className="flex justify-end space-x-2 pt-4"> <Button type="button" variant="outline" onClick={() => setOpen(false)} className="border-emerald-500/30 text-emerald-400" data-testid="button-cancel-stream" > Cancel </Button> <Button type="submit" disabled={createStreamMutation.isPending} className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white" data-testid="button-submit-stream" > {createStreamMutation.isPending ? ( <> <LoadingSpinner size="sm" /> <span className="ml-2">Creating Stream...</span> </> ) : ( <> <Video className="w-4 h-4 mr-2" /> Go Live </> )} </Button> </div> </form> </Form> </DialogContent> </Dialog> );
} function StreamFilters({ filters, onFiltersChange, streams = [] }: { filters: any; onFiltersChange: (filters: any) => void; streams: LiveStream[];
}) { const uniqueCities = useMemo(() => { return [...new Set(streams.map(s => s.city).filter(Boolean))].sort(); }, [streams]); const uniqueStates = useMemo(() => { return [...new Set(streams.map(s => s.state).filter(Boolean))].sort(); }, [streams]); const uniqueHalls = useMemo(() => { return [...new Set(streams.map(s => s.poolHallName).filter(Boolean))].sort(); }, [streams]); return ( <Card className="bg-card/30 border-emerald-500/20"> <CardHeader> <CardTitle className="text-emerald-400 flex items-center gap-2"> <Filter className="w-5 h-5" /> Filter Streams </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"> {/* Search */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">Search</label> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" /> <Input placeholder="Search streams..." value={filters.search} onChange={(e) => onFiltersChange({ ...filters, search: e.target.value })} className="pl-10 bg-muted border-emerald-500/20" data-testid="input-search-streams" /> </div> </div> {/* City Filter */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">City</label> <Select value={filters.city} onValueChange={(value) => onFiltersChange({ ...filters, city: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-filter-city"> <SelectValue placeholder="All cities" /> </SelectTrigger> <SelectContent> <SelectItem value="">All Cities</SelectItem> {uniqueCities.map((city) => ( <SelectItem key={city} value={city}> {city} </SelectItem> ))} </SelectContent> </Select> </div> {/* State Filter */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">State</label> <Select value={filters.state} onValueChange={(value) => onFiltersChange({ ...filters, state: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-filter-state"> <SelectValue placeholder="All states" /> </SelectTrigger> <SelectContent> <SelectItem value="">All States</SelectItem> {uniqueStates.map((state) => ( <SelectItem key={state} value={state}> {state} </SelectItem> ))} </SelectContent> </Select> </div> {/* Platform Filter */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">Platform</label> <Select value={filters.platform} onValueChange={(value) => onFiltersChange({ ...filters, platform: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-filter-platform"> <SelectValue placeholder="All platforms" /> </SelectTrigger> <SelectContent> <SelectItem value="">All Platforms</SelectItem> {platforms.map((platform) => ( <SelectItem key={platform.value} value={platform.value}> <span className="flex items-center gap-2"> <span>{platform.icon}</span> {platform.label} </span> </SelectItem> ))} </SelectContent> </Select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {/* Category Filter */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">Category</label> <Select value={filters.category} onValueChange={(value) => onFiltersChange({ ...filters, category: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-filter-category"> <SelectValue placeholder="All categories" /> </SelectTrigger> <SelectContent> <SelectItem value="">All Categories</SelectItem> {categories.map((category) => ( <SelectItem key={category.value} value={category.value}> <span className="flex items-center gap-2"> <span>{category.icon}</span> {category.label} </span> </SelectItem> ))} </SelectContent> </Select> </div> {/* Status Filter */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">Status</label> <Select value={filters.status} onValueChange={(value) => onFiltersChange({ ...filters, status: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-filter-status"> <SelectValue placeholder="All statuses" /> </SelectTrigger> <SelectContent> <SelectItem value="">All Statuses</SelectItem> <SelectItem value="live">Live Only</SelectItem> <SelectItem value="offline">Offline Only</SelectItem> </SelectContent> </Select> </div> {/* Sort By */} <div className="space-y-2"> <label className="text-sm font-medium text-gray-300">Sort By</label> <Select value={filters.sortBy} onValueChange={(value) => onFiltersChange({ ...filters, sortBy: value })}> <SelectTrigger className="bg-muted border-emerald-500/20" data-testid="select-sort-by"> <SelectValue placeholder="Sort by..." /> </SelectTrigger> <SelectContent> <SelectItem value="viewers">Most Viewers</SelectItem> <SelectItem value="recent">Most Recent</SelectItem> <SelectItem value="alphabetical">Alphabetical</SelectItem> <SelectItem value="city">City</SelectItem> <SelectItem value="state">State</SelectItem> </SelectContent> </Select> </div> </div> {/* Clear Filters */} <div className="flex justify-end"> <Button variant="outline" size="sm" onClick={() => onFiltersChange({ search: "", city: "", state: "", platform: "", category: "", status: "", sortBy: "viewers" })} className="border-emerald-500/30 text-emerald-400" data-testid="button-clear-filters" > Clear All Filters </Button> </div> </CardContent> </Card> );
} function StreamCard({ stream }: { stream: LiveStream }) { const { toast } = useToast(); const queryClient = useQueryClient(); const platform = platforms.find(p => p.value === stream.platform); const category = categories.find(c => c.value === stream.category); const quality = qualities.find(q => q.value === stream.quality); const toggleStreamMutation = useMutation({ mutationFn: () => apiRequest("PUT", `/api/live-streams/${stream.id}`, { isLive: !stream.isLive, lastLiveAt: !stream.isLive ? new Date().toISOString() : stream.lastLiveAt }), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ["/api/live-streams"] }); toast({ title: stream.isLive ? "Stream Ended" : "Stream Started", description: `${stream.title} is now ${stream.isLive ? "offline" : "live"}!`, }); }, onError: (error: any) => { toast({ title: "Error", description: error.message || "Failed to update stream status", variant: "destructive", }); }, }); const deleteStreamMutation = useMutation({ mutationFn: () => apiRequest("DELETE", `/api/live-streams/${stream.id}`), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ["/api/live-streams"] }); toast({ title: "Stream Deleted", description: `${stream.title} has been removed from the network.`, }); }, onError: (error: any) => { toast({ title: "Error", description: error.message || "Failed to delete stream", variant: "destructive", }); }, }); const updateViewersMutation = useMutation({ mutationFn: () => { const newViewerCount = Math.floor(Math.random() * 200) + 20; const maxViewers = Math.max(stream.maxViewers || 0, newViewerCount); return apiRequest("PUT", `/api/live-streams/${stream.id}`, { viewerCount: newViewerCount, maxViewers }); }, onSuccess: () => { queryClient.invalidateQueries({ queryKey: ["/api/live-streams"] }); }, }); const handleWatch = () => { window.open(stream.url, '_blank'); }; const handleShare = () => { navigator.clipboard.writeText(stream.url); toast({ title: "Link Copied!", description: "Stream URL copied to clipboard", }); }; return ( <Card className={`group hover:shadow-2xl transition-all duration-300 ${ stream.isLive ? 'border-red-500/50 bg-gradient-to-br from-red-900/10 via-transparent to-transparent shadow-red-500/10' : 'border-emerald-500/20 bg-card/50' }`}> <CardHeader className="pb-3"> <div className="flex items-start justify-between"> <div className="flex-1 min-w-0"> <div className="flex items-center gap-2 mb-2"> <h3 className="text-lg font-bold text-white truncate">{stream.title}</h3> {stream.isLive && ( <div className="flex items-center gap-1"> <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" /> <span className="text-xs font-bold text-red-400">LIVE</span> </div> )} </div> <div className="flex items-center gap-2 text-sm text-gray-400"> <MapPin className="w-4 h-4" /> <span className="font-semibold text-emerald-400">{stream.poolHallName}</span> <span>‚Ä¢</span> <span>{stream.city}, {stream.state}</span> </div> </div> <div className="flex flex-col items-end gap-1"> <Badge className={`${platform?.bgColor} ${platform?.color} border-0`}> <span className="mr-1">{platform?.icon}</span> {platform?.label} </Badge> {category && ( <Badge variant="outline" className={`${category.color} border-current`}> <span className="mr-1">{category.icon}</span> {category.label} </Badge> )} </div> </div> </CardHeader> <CardContent className="space-y-4"> {/* Stream Preview */} <div className="relative group aspect-video bg-gradient-to-br from-gray-800 to-gray-900 rounded-lg overflow-hidden"> {stream.thumbnailUrl ? ( <img src={stream.thumbnailUrl} alt={stream.title} className="w-full h-full object-cover" /> ) : ( <div className="w-full h-full flex items-center justify-center"> <Video className="w-12 h-12 text-gray-600" /> </div> )} {/* Overlay */} <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-200" /> {/* Stream Info Overlay */} {stream.isLive && ( <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-3"> <div className="flex items-center justify-between text-white text-sm"> <div className="flex items-center gap-2"> <Eye className="w-4 h-4" /> <span className="font-semibold">{stream.viewerCount?.toLocaleString()} watching</span> {quality && ( <> <span>‚Ä¢</span> <span className="text-yellow-400">{quality.label}</span> </> )} </div> <div className="flex items-center gap-1 text-red-400"> <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" /> <span className="font-bold">LIVE</span> </div> </div> </div> )} {/* Play Button */} <button onClick={handleWatch} className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 hover:scale-105" data-testid={`button-watch-stream-${stream.id}`} > <div className="bg-white/20 backdrop-blur-sm rounded-full p-4 hover:bg-white/30 transition-colors"> <Play className="w-8 h-8 text-white ml-1" /> </div> </button> </div> {/* Stream Stats */} <div className="grid grid-cols-3 gap-4 text-center"> <div> <div className="text-lg font-bold text-emerald-400"> {stream.viewerCount?.toLocaleString() || 0} </div> <div className="text-xs text-gray-400">Current</div> </div> <div> <div className="text-lg font-bold text-yellow-400"> {stream.maxViewers?.toLocaleString() || 0} </div> <div className="text-xs text-gray-400">Peak</div> </div> <div> <div className="text-lg font-bold text-blue-400"> {quality?.icon} </div> <div className="text-xs text-gray-400">{quality?.label}</div> </div> </div> {/* Tags */} {stream.tags && stream.tags.length > 0 && ( <div className="flex flex-wrap gap-1"> {stream.tags.slice(0, 3).map((tag, index) => ( <Badge key={index} variant="secondary" className="text-xs"> {tag} </Badge> ))} {stream.tags.length > 3 && ( <Badge variant="secondary" className="text-xs"> +{stream.tags.length - 3} </Badge> )} </div> )} {/* Match play Buttons */} <div className="flex gap-2"> <Button onClick={handleWatch} className={`flex-1 ${platform?.bgColor} ${platform?.color} border border-current hover:bg-opacity-20`} variant="outline" data-testid={`button-watch-${stream.id}`} > <ExternalLink className="w-4 h-4 mr-2" /> Watch </Button> <Button onClick={handleShare} size="sm" variant="outline" className="border-emerald-500/30 text-emerald-400 hover:bg-emerald-500/10" data-testid={`button-share-${stream.id}`} > <Share2 className="w-4 h-4" /> </Button> {stream.isLive && ( <Button onClick={() => updateViewersMutation.mutate()} disabled={updateViewersMutation.isPending} size="sm" variant="outline" className="border-blue-500/30 text-blue-400 hover:bg-blue-500/10" data-testid={`button-refresh-viewers-${stream.id}`} > <RefreshCw className={`w-4 h-4 ${updateViewersMutation.isPending ? 'animate-spin' : ''}`} /> </Button> )} {/* Operator Controls */} <Button onClick={() => toggleStreamMutation.mutate()} disabled={toggleStreamMutation.isPending} size="sm" variant="outline" className={stream.isLive ? "border-red-500/30 text-red-400 hover:bg-red-500/10" : "border-green-500/30 text-green-400 hover:bg-green-500/10" } data-testid={`button-toggle-stream-${stream.id}`} > {toggleStreamMutation.isPending ? ( <LoadingSpinner size="sm" /> ) : stream.isLive ? ( <Square className="w-4 h-4" /> ) : ( <Play className="w-4 h-4" /> )} </Button> <Button onClick={() => deleteStreamMutation.mutate()} disabled={deleteStreamMutation.isPending} size="sm" variant="outline" className="border-red-500/30 text-red-400 hover:bg-red-500/10" data-testid={`button-delete-stream-${stream.id}`} > {deleteStreamMutation.isPending ? ( <LoadingSpinner size="sm" /> ) : ( <Trash2 className="w-4 h-4" /> )} </Button> </div> </CardContent> </Card> );
} function StreamStats({ streams }: { streams: LiveStream[] }) { const liveStreams = streams.filter(s => s.isLive); const totalViewers = liveStreams.reduce((sum, stream) => sum + (stream.viewerCount || 0), 0); const peakViewers = streams.reduce((max, stream) => Math.max(max, stream.maxViewers || 0), 0); const platformStats = streams.reduce((acc, stream) => { acc[stream.platform] = (acc[stream.platform] || 0) + 1; return acc; }, {} as Record<string, number>); const topPlatform = Object.entries(platformStats).sort(([,a], [,b]) => b - a)[0]; const stateStats = streams.reduce((acc, stream) => { if (stream.state) { acc[stream.state] = (acc[stream.state] || 0) + 1; } return acc; }, {} as Record<string, number>); const topState = Object.entries(stateStats).sort(([,a], [,b]) => b - a)[0]; return ( <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4"> <Card className="bg-gradient-to-br from-red-900/20 to-red-800/10 border-red-500/20"> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-red-400 mb-1">{liveStreams.length}</div> <div className="text-xs text-gray-400">Live Now</div> <div className="w-2 h-2 bg-red-500 rounded-full mx-auto mt-2 animate-pulse" /> </CardContent> </Card> <Card className="bg-gradient-to-br from-emerald-900/20 to-emerald-800/10 border-emerald-500/20"> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-emerald-400 mb-1">{totalViewers.toLocaleString()}</div> <div className="text-xs text-gray-400">Total Viewers</div> <Eye className="w-4 h-4 mx-auto mt-2 text-emerald-400" /> </CardContent> </Card> <Card className="bg-gradient-to-br from-yellow-900/20 to-yellow-800/10 border-yellow-500/20"> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-yellow-400 mb-1">{peakViewers.toLocaleString()}</div> <div className="text-xs text-gray-400">Peak Viewers</div> <TrendingUp className="w-4 h-4 mx-auto mt-2 text-yellow-400" /> </CardContent> </Card> <Card className="bg-gradient-to-br from-blue-900/20 to-blue-800/10 border-blue-500/20"> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-blue-400 mb-1">{streams.length}</div> <div className="text-xs text-gray-400">Total Streams</div> <Video className="w-4 h-4 mx-auto mt-2 text-blue-400" /> </CardContent> </Card> <Card className="bg-gradient-to-br from-purple-900/20 to-purple-800/10 border-purple-500/20"> <CardContent className="p-4 text-center"> <div className="text-lg font-bold text-purple-400 mb-1"> {topPlatform ? platforms.find(p => p.value === topPlatform[0])?.icon : "üåê"} </div> <div className="text-xs text-gray-400"> {topPlatform ? platforms.find(p => p.value === topPlatform[0])?.label : "No Data"} </div> <Globe className="w-4 h-4 mx-auto mt-2 text-purple-400" /> </CardContent> </Card> <Card className="bg-gradient-to-br from-indigo-900/20 to-indigo-800/10 border-indigo-500/20"> <CardContent className="p-4 text-center"> <div className="text-xl font-bold text-indigo-400 mb-1"> {topState?.[0] || "N/A"} </div> <div className="text-xs text-gray-400">Top State</div> <MapPin className="w-4 h-4 mx-auto mt-2 text-indigo-400" /> </CardContent> </Card> </div> );
} export default function LiveStream() { const { data: streams = [], isLoading } = useQuery<LiveStream[]>({ queryKey: ["/api/live-streams"], refetchInterval: 30000, // Refresh every 30 seconds }); const [filters, setFilters] = useState({ search: "", city: "", state: "", platform: "", category: "", status: "", sortBy: "viewers" }); // Apply filters and sorting const filteredStreams = useMemo(() => { let filtered = streams.filter(stream => { const matchesSearch = !filters.search || stream.title?.toLowerCase().includes(filters.search.toLowerCase()) || stream.poolHallName?.toLowerCase().includes(filters.search.toLowerCase()) || stream.city?.toLowerCase().includes(filters.search.toLowerCase()); const matchesCity = !filters.city || stream.city === filters.city; const matchesState = !filters.state || stream.state === filters.state; const matchesPlatform = !filters.platform || stream.platform === filters.platform; const matchesCategory = !filters.category || stream.category === filters.category; const matchesStatus = !filters.status || (filters.status === "live" && stream.isLive) || (filters.status === "offline" && !stream.isLive); return matchesSearch && matchesCity && matchesState && matchesPlatform && matchesCategory && matchesStatus; }); // Sort streams filtered.sort((a, b) => { switch (filters.sortBy) { case "viewers": return (b.viewerCount || 0) - (a.viewerCount || 0); case "recent": return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime(); case "alphabetical": return (a.title || "").localeCompare(b.title || ""); case "city": return (a.city || "").localeCompare(b.city || ""); case "state": return (a.state || "").localeCompare(b.state || ""); default: return 0; } }); return filtered; }, [streams, filters]); const liveStreams = filteredStreams.filter(s => s.isLive); const offlineStreams = filteredStreams.filter(s => !s.isLive); if (isLoading) { return ( <div className="flex justify-center items-center h-64"> <LoadingSpinner size="lg" /> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex items-center justify-between"> <div> <h1 className="text-3xl font-bold text-emerald-400 flex items-center gap-3"> <Video className="w-8 h-8" /> ActionLadder Live Streams </h1> <p className="text-gray-400 mt-1"> Watch live pool action from halls across the country </p> </div> <CreateStreamDialog /> </div> {/* Stats */} <StreamStats streams={streams} /> {/* Filters */} <StreamFilters filters={filters} onFiltersChange={setFilters} streams={streams} /> {/* Live Streams */} {liveStreams.length > 0 && ( <div> <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-2"> <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse" /> <span>Live Now ({liveStreams.length})</span> </h2> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {liveStreams.map((stream) => ( <StreamCard key={stream.id} stream={stream} /> ))} </div> </div> )} {/* Offline Streams */} {offlineStreams.length > 0 && ( <div> <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-2"> <Clock className="w-5 h-5 text-gray-400" /> <span>Offline Streams ({offlineStreams.length})</span> </h2> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {offlineStreams.map((stream) => ( <StreamCard key={stream.id} stream={stream} /> ))} </div> </div> )} {/* Empty State */} {filteredStreams.length === 0 && ( <Card className="bg-card/30 border-emerald-500/20"> <CardContent className="p-12 text-center"> <Video className="w-16 h-16 text-gray-400 mx-auto mb-4" /> <h3 className="text-xl font-semibold text-white mb-2"> {streams.length === 0 ? "No Streams Yet" : "No Streams Found"} </h3> <p className="text-gray-400 mb-6"> {streams.length === 0 ? "Be the first to start streaming on the ActionLadder network!" : "Try adjusting your filters to find more streams." } </p> {streams.length === 0 ? ( <CreateStreamDialog /> ) : ( <Button onClick={() => setFilters({ search: "", city: "", state: "", platform: "", category: "", status: "", sortBy: "viewers" })} variant="outline" className="border-emerald-500/30 text-emerald-400" > Clear All Filters </Button> )} </CardContent> </Card> )} </div> );
}