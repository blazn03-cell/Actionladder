import React, { useMemo, useState, useEffect, useContext, createContext } from "react";
import { BrowserRouter, Routes, Route, NavLink, Navigate, useNavigate } from "react-router-dom";
import Rulebook from "./Rulebook";
import LadderStakesRule from "./LadderStakesRule";
import MistakeLab from "./MistakeLab";
import RatingsPairingPanel from "./RatingsPairingPanel";

/* =====================================================
 * AUTH LAYER (Players vs Operators) — demo/localStorage
 * Replace with real backend/JWT later.
 * ===================================================== */
const AuthCtx = createContext(null);

function AuthProvider({ children }) {
  const [user, setUser] = useState(() => {
    try { return JSON.parse(localStorage.getItem("tri_auth_user") || "null"); } catch { return null; }
  });
  useEffect(() => { localStorage.setItem("tri_auth_user", JSON.stringify(user)); }, [user]);

  const login = (role, name) => setUser({ role, name: name || (role === "operator" ? "Operator" : "Player") });
  const logout = () => setUser(null);

  const value = useMemo(() => ({ user, login, logout }), [user]);
  return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>;
}
function useAuth() { return useContext(AuthCtx); }

function ProtectedRoute({ role, children }) {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" replace />;
  if (role && user.role !== role) return <Navigate to="/" replace />;
  return children;
}

/* =====================================================
 * OPERATOR STORE — demo state persisted to localStorage
 * players, matches, fines, settings, proposals, seasons, ledger, events
 * ===================================================== */
const StoreCtx = createContext(null);
function useLocalState(key, fallback) {
  const [s, setS] = useState(() => {
    try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; } catch { return fallback; }
  });
  useEffect(() => { localStorage.setItem(key, JSON.stringify(s)); }, [key, s]);
  return [s, setS];
}

function StoreProvider({ children }) {
  const [players, setPlayers] = useLocalState("tri_players", []);
  const [matches, setMatches] = useLocalState("tri_matches", []);
  const [fines, setFines] = useLocalState("tri_fines", []);
  const [proposals, setProposals] = useLocalState("tri_proposals", []);
  const [ledger, setLedger] = useLocalState("tri_ledger", []);
  const [seasons, setSeasons] = useLocalState("tri_seasons", []);
  const [events, setEvents] = useLocalState("tri_events", { nextTournamentDate: null, hustleNightRakePct: 0.05 });
  const [ghostPot, setGhostPot] = useLocalState("tri_ghost_pot", 0);
  const [settings, setSettings] = useLocalState("tri_ops_settings", {
    memberRate: 0.05,
    nonMemberRate: 0.15,
    nonMemberMatchFee: 12,
    proDiscount: 0, // e.g. 0.02 → Pro members 3%
    initialRating: 1200,
    kFactor: 24,
    bandSize: 200,
    avoidRematchDays: 30,
    votingMinVotes: 5,
    votingPassRatio: 0.6,
    votingAllowDownvotes: true,
    rulebookBannerLookbackDays: 60,
    // Privacy controls
    publicPointsVisibility: "hide", // hide | chips | money
    publicShowHybrid: false,
    // Season controls
    currentSeasonStart: null, // timestamp; if null, all-time
    // Revenue planner
    operatorsCount: 4,
    targetPerOperatorMin: 350,
    targetPerOperatorMax: 400,
    avgStakeBase: 100,
    fractionExtraCash: 0.4, // fraction of matches using 1.2× cash mode
    avgStreamsPerMonth: 10,
    streamFee: 5,
    avgHighlightsPerMonth: 10,
    highlightFee: 10,
    tournamentsPerMonth: 2,
    tournamentEntryFee: 25,
    tournamentAvgEntries: 16,
    tournamentRakePct: 0.1,
    hustleNightMonthlyHandle: 500,
    hustleRakePct: 0.05,
    ghostAttemptsPerMonth: 40,
    ghostBuyIn: 5,
    ghostRakePct: 0.1,
    nonMemberParticipantsPerMatch: 0.3, // avg count per match
  });

  /* ======== Players ======== */
  const addPlayer = (name, opts={}) => {
    const id = uid();
    setPlayers((p) => [{ id, name, member: opts.member ?? true, pro: opts.pro ?? false, walkin: "", rating: settings.initialRating, notes: "" }, ...p]);
  };
  const updatePlayer = (id, patch) => setPlayers((ps) => ps.map((p) => (p.id === id ? { ...p, ...patch } : p)));
  const removePlayer = (id) => setPlayers((ps) => ps.filter((p) => p.id !== id));

  /* ======== Matches ======== */
  const addMatch = (m) => setMatches((ms) => [{ id: uid(), createdAt: Date.now(), status: "scheduled", settled: false, ...m }, ...ms]);
  const updateMatch = (id, patch) => setMatches((ms) => ms.map((m) => (m.id === id ? { ...m, ...patch } : m)));
  const removeMatch = (id) => setMatches((ms) => ms.filter((m) => m.id !== id));

  /* ======== Fines ======== */
  const addFine = (fine) => setFines((fs) => [{ id: uid(), date: Date.now(), ...fine }, ...fs]);
  const removeFine = (id) => setFines((fs) => fs.filter((f) => f.id !== id));

  /* ======== Seasons ======== */
  const startNewSeason = () => {
    const start = settings.currentSeasonStart || Date.now();
    const snapshot = buildStats(players, matches, settings.initialRating, start);
    setSeasons(s => [{ id: uid(), startedAt: start, closedAt: Date.now(), snapshot }, ...s]);
    setSettings({ ...settings, currentSeasonStart: Date.now() });
  };

  /* ======== Ledger ======== */
  const logLedger = (entry) => setLedger((L) => [{ id: uid(), date: Date.now(), ...entry }, ...L]);

  /* ======== Events ======== */
  const setTournamentDate = (ts) => setEvents(e => ({ ...e, nextTournamentDate: ts }));
  const setHustleRakePct = (pct) => setEvents(e => ({ ...e, hustleNightRakePct: pct }));

  /* ======== Ghost Runout ======== */
  const ghostBuyIn = (amount = settings.ghostBuyIn || 5, note="Ghost buy-in") => {
    setGhostPot(p => p + amount);
    logLedger({ type: 'ghost_buyin', amount, note });
  };
  const ghostWinPayout = (payout = 20, note="Ghost win payout") => {
    setGhostPot(p => Math.max(0, p - payout));
    logLedger({ type: 'ghost_payout', amount: -payout, note });
  };
  const ghostRake = (amount, note="Ghost rake") => {
    if (!amount) return; logLedger({ type: 'ghost_rake', amount, note });
  };

  /* ======== Settlement with Auto‑Elo + Ledger ======== */
  const settleMatch = (id, resultPatch) => {
    setMatches((ms) => ms.map((m) => {
      if (m.id !== id) return m;
      const base = Number(m.base || 0);
      const mode = m.mode || 'weight';
      // expected gross to winner (base or 1.2×)
      const gross = Number(resultPatch?.gross) || (mode === 'extra_cash' ? round2(base * 1.2) : base);
      const winnerSide = resultPatch?.winner || 'favorite';
      const winnerId = winnerSide === 'favorite' ? m.favoriteId : m.challengerId;
      const loserId  = winnerSide === 'favorite' ? m.challengerId : m.favoriteId;
      const winner = players.find(p=>p.id===winnerId);
      const loser = players.find(p=>p.id===loserId);
      // commission rate by winner membership
      const isMember = !!winner?.member;
      const isPro = !!winner?.pro;
      const rate = isMember ? Math.max(0, (settings.memberRate - (isPro ? settings.proDiscount : 0))) : settings.nonMemberRate;
      const commission = round2(gross * rate);
      const net = round2(gross - commission);

      // Non‑member per‑match fee (each non‑member participant)
      const feePerNonMember = settings.nonMemberMatchFee || 0;
      const nonMembers = [winner, loser].filter(p => p && !p.member).length;
      const nonMemberFees = round2(nonMembers * feePerNonMember);

      // Ledger entries
      logLedger({ type: 'commission', amount: commission, matchId: m.id, note: `${nameOfLocal(winnerId)} won, rate ${Math.round(rate*100)}%` });
      if (nonMemberFees>0) logLedger({ type: 'non_member_fees', amount: nonMemberFees, matchId: m.id, note: `${nonMembers} non‑member(s)` });

      // Auto‑Elo update winner/loser ratings
      const RA = Number.isFinite(winner?.rating) ? winner.rating : settings.initialRating;
      const RB = Number.isFinite(loser?.rating) ? loser.rating : settings.initialRating;
      const { newA, newB } = eloUpdatePair(RA, RB, 1, settings.kFactor || 24); // winner score 1
      if (winner) updatePlayer(winner.id, { rating: newA });
      if (loser)  updatePlayer(loser.id,  { rating: newB });

      // Return updated match
      return { ...m, settled: true, status: 'settled', result: { winner: winnerSide, gross, commission, net, rate } };
    }));
  };

  /* ======== Proposals & Voting ======== */
  const addProposal = ({ title, body, type, authorName }) => {
    const id = uid();
    setProposals((ps) => [
      { id, title, body, type, authorName, status: "open", createdAt: Date.now(), acceptedAt: null, votes: {}, up: 0, down: 0, comments: [] },
      ...ps,
    ]);
  };
  const updateProposal = (id, patch) => setProposals((ps) => ps.map((p) => (p.id === id ? { ...p, ...patch } : p)));
  const removeProposal = (id) => setProposals((ps) => ps.filter((p) => p.id !== id));
  const voteProposal = (id, voterName, value) => {
    setProposals((ps) => ps.map((p) => {
      if (p.id !== id || p.status !== "open") return p;
      const prev = p.votes?.[voterName] || 0; const next = value;
      if (prev === next) return p;
      const votes = { ...(p.votes || {}) };
      if (next === 0) delete votes[voterName]; else votes[voterName] = next;
      const counts = Object.values(votes).reduce((acc, v) => { if (v>0) acc.up++; if (v<0) acc.down++; return acc; }, { up: 0, down: 0 });
      let status = p.status; let acceptedAt = p.acceptedAt;
      const total = counts.up + counts.down; const ratio = total ? counts.up / total : 0;
      if (total >= settings.votingMinVotes && ratio >= settings.votingPassRatio) { status = "accepted"; acceptedAt = Date.now(); }
      return { ...p, votes, up: counts.up, down: counts.down, status, acceptedAt };
    }));
  };
  const addProposalComment = (id, authorName, body) => {
    setProposals(ps => ps.map(p => p.id === id ? { ...p, comments: [{ id: uid(), authorName, body, createdAt: Date.now() }, ...(p.comments||[]) ] } : p));
  };
  const removeProposalComment = (id, commentId) => {
    setProposals(ps => ps.map(p => p.id === id ? { ...p, comments: (p.comments||[]).filter(c => c.id !== commentId) } : p));
  };

  const value = useMemo(() => ({
    players, matches, fines, proposals, ledger, seasons, events, ghostPot, settings,
    setSettings,
    addPlayer, updatePlayer, removePlayer,
    addMatch, updateMatch, removeMatch,
    settleMatch,
    addFine, removeFine,
    logLedger,
    startNewSeason,
    setTournamentDate,
    setHustleRakePct,
    ghostBuyIn, ghostWinPayout, ghostRake,
    addProposal, updateProposal, removeProposal, voteProposal,
    addProposalComment, removeProposalComment,
  }), [players, matches, fines, proposals, ledger, seasons, events, ghostPot, settings]);
  return <StoreCtx.Provider value={value}>{children}</StoreCtx.Provider>;
}
function useStore() { return useContext(StoreCtx); }

/* =====================================================
 * APP SHELL + ROUTES
 * ===================================================== */
export default function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <StoreProvider>
          <div className="min-h-screen bg-white text-gray-900">
            <Nav />
            <main className="mx-auto w-full max-w-6xl p-4 md:p-8">
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<LoginPage />} />

                {/* Player area */}
                <Route path="/player" element={<ProtectedRoute><PlayerDashboard /></ProtectedRoute>} />

                {/* Operator area */}
                <Route path="/operator" element={<ProtectedRoute role="operator"><OperatorDashboard /></ProtectedRoute>} />

                {/* Shared pages */}
                <Route path="/leaderboard" element={<LeaderboardPage />} />
                <Route path="/leaderboard/print" element={<LeaderboardPrintPage />} />
                <Route path="/proposals" element={<ProposalsPage />} />
                <Route path="/rulebook" element={<RulebookPage />} />
                <Route path="/stakes" element={<LadderStakesRule />} />
                <Route path="/film-room" element={<MistakeLab />} />
                <Route path="/money" element={<MoneyRulesPage />} />
                <Route path="/transparency" element={<PlayerTransparencyPage />} />
                <Route path="/pots" element={<PotsAndJackpotsPage />} />
                <Route path="/fines" element={<FinesPage />} />
                <Route path="/streams" element={<StreamsAndHypePage />} />
                <Route path="/disputes" element={<DisputesAndSchedulingPage />} />
                <Route path="/events" element={<EventsPage />} />
                <Route path="*" element={<NotFound />} />
              </Routes>
            </main>
            <Footer />
          </div>
        </StoreProvider>
      </AuthProvider>
    </BrowserRouter>
  );
}

function PublicPrivacyBadge(){
  const { user } = useAuth();
  const { settings } = useStore();
  const isOperator = user?.role === 'operator';
  if (isOperator) return null;
  const mode = settings.publicPointsVisibility || 'hide';
  if (mode === 'money') return null;
  const label = mode === 'chips' ? 'Chips mode (no $)' : 'Earnings hidden by policy';
  return (
    <span className="ml-2 inline-flex items-center gap-1 rounded-full border px-2 py-1 text-[11px]" title={label} aria-label={label}>
      <span>🔒</span>
      <span className="hidden sm:inline">{label}</span>
      <span className="sm:hidden">Hidden</span>
    </span>
  );
}

function Nav() {
  const { user, logout } = useAuth();
  const link = ({ isActive }) => `px-3 py-2 rounded-xl text-sm ${isActive ? "bg-black text-white" : "hover:bg-gray-100"}`;
  return (
    <header className="border-b">
      <div className="mx-auto max-w-6xl p-4 flex items-center justify-between gap-3">
        <div className="font-extrabold tracking-tight text-lg">🎱 Tri‑City Texas Ladder</div>
        <nav className="flex flex-wrap gap-2 items-center">
          <NavLink to="/" className={link} end>Home</NavLink>
          <NavLink to="/leaderboard" className={link}>Leaderboard</NavLink>
          <NavLink to="/proposals" className={link}>Proposals</NavLink>
          <NavLink to="/rulebook" className={link}>Rulebook</NavLink>
          <NavLink to="/stakes" className={link}>Stakes</NavLink>
          <NavLink to="/film-room" className={link}>Mistake Lab</NavLink>
          <NavLink to="/events" className={link}>Events</NavLink>
          {user && user.role === "operator" && (
            <NavLink to="/operator" className={link}>Operator</NavLink>
          )}
          {user && user.role !== "operator" && (
            <NavLink to="/player" className={link}>My Player</NavLink>
          )}
          {!user ? (
            <NavLink to="/login" className={link}>Log in</NavLink>
          ) : (
            <button onClick={logout} className="px-3 py-2 rounded-xl text-sm hover:bg-gray-100">Logout ({user.role})</button>
          )}
          <PublicPrivacyBadge />
        </nav>
      </div>
    </header>
  );
}

function Home() {
  const { user } = useAuth();
  return (
    <div className="space-y-4">
      <h1 className="text-3xl md:text-4xl font-extrabold">Pool • Points • Pride • Payouts</h1>
      <p className="text-sm text-muted-foreground max-w-prose">
        Welcome to the only ladder where pool feels like UFC, casino night, and a comedy roast. Grab the rulebook, lock stakes, and hit the Film Room to turn L's into levels.
      </p>
      <ul className="grid md:grid-cols-3 gap-3">
        <HomeCard title="Leaderboard" to="/leaderboard"/>
        <HomeCard title="Proposals & Voting" to="/proposals"/>
        <HomeCard title="Read the Rulebook" to="/rulebook"/>
        <HomeCard title="Lock Stakes" to="/stakes"/>
        <HomeCard title="Mistake Lab" to="/film-room"/>
        <HomeCard title="Events" to="/events"/>
        {user?.role === "operator" ? (
          <HomeCard title="Operator Dashboard" to="/operator"/>
        ) : (
          <HomeCard title="My Player Dashboard" to="/player"/>
        )}
      </ul>
    </div>
  );
}

function HomeCard({ title, to }) {
  return (
    <li>
      <NavLink to={to} className="block rounded-2xl border p-4 hover:shadow-sm">
        <div className="font-semibold">{title}</div>
        <div className="text-xs text-muted-foreground">Open</div>
      </NavLink>
    </li>
  );
}

function Footer() {
  return (
    <footer className="border-t mt-8">
      <div className="mx-auto max-w-6xl p-4 text-xs text-muted-foreground">
        © {new Date().getFullYear()} Tri‑City Texas Ladder — Fight‑night pool, savage transparency.
      </div>
    </footer>
  );
}

/* =====================
 * LOGIN PAGE
 * ===================== */
function LoginPage() {
  const { user, login } = useAuth();
  const nav = useNavigate();
  const [role, setRole] = useState("player");
  const [name, setName] = useState("");
  const [opCode, setOpCode] = useState("");
  useEffect(() => { if (user) nav("/", { replace: true }); }, [user]);

  function submit(e) {
    e.preventDefault();
    if (role === "operator") {
      if (opCode.trim() !== "OP-TRICITY-🔥") { alert("Invalid operator code"); return; }
      login("operator", name || "Operator");
      nav("/operator");
    } else {
      login("player", name || "Player");
      nav("/player");
    }
  }

  return (
    <div className="max-w-md mx-auto rounded-2xl border p-6 shadow-sm">
      <h1 className="text-2xl font-bold mb-3">Log in</h1>
      <form onSubmit={submit} className="space-y-3">
        <label className="block">
          <div className="text-sm font-medium">Role</div>
          <select value={role} onChange={(e) => setRole(e.target.value)} className="w-full border rounded-xl px-3 py-2">
            <option value="player">Player</option>
            <option value="operator">Operator</option>
          </select>
        </label>
        <label className="block">
          <div className="text-sm font-medium">Display name</div>
          <input value={name} onChange={(e) => setName(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="Tyga Hoodz" />
        </label>
        {role === "operator" && (
          <label className="block">
            <div className="text-sm font-medium">Operator code</div>
            <input value={opCode} onChange={(e) => setOpCode(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="OP-TRICITY-🔥" />
            <div className="text-xs text-muted-foreground mt-1">Demo code: <code>OP-TRICITY-🔥</code> — replace with real auth later.</div>
          </label>
        )}
        <button className="w-full px-3 py-2 rounded-xl bg-black text-white">Enter</button>
      </form>
    </div>
  );
}

/* =====================
 * PLAYER DASHBOARD
 * ===================== */
function PlayerDashboard() {
  const { players, matches, settings } = useStore();
  const { user } = useAuth();
  const me = players.find((p) => p.name === user?.name) || null;
  const upcoming = matches.filter((m) => !m.settled).slice(0, 6);
  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">Player Dashboard</h2>
      <div className="rounded-2xl border p-4">
        <div className="text-sm">Welcome, <span className="font-semibold">{user?.name}</span>. Film your sets and analyze them in the Mistake Lab. 💪</div>
        {!me && <div className="text-xs text-red-600 mt-1">(Ask an operator to add you to the roster to enable more features.)</div>}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-2">Upcoming / Recent Matches</div>
        {upcoming.length === 0 ? (
          <div className="text-sm text-muted-foreground">No matches yet. Call out someone 1–2 spots above you.</div>
        ) : (
          <table className="w-full text-sm">
            <thead><tr><th className="text-left">When</th><th className="text-left">Favorite</th><th className="text-left">Challenger</th><th className="text-left">Base</th><th className="text-left">Mode</th><th className="text-left">Status</th></tr></thead>
            <tbody>
              {upcoming.map((m) => (
                <tr key={m.id} className="border-t">
                  <td className="py-1">{m.date ? new Date(m.date).toLocaleString() : "TBD"}</td>
                  <td>{displayName(m.favoriteId)}</td>
                  <td>{displayName(m.challengerId)}</td>
                  <td>${m.base}</td>
                  <td>{m.mode === "extra_cash" ? "More Cash (1.2×)" : "Give Weight"}</td>
                  <td>{m.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-1">Quests</div>
        <PlayerQuests />
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-1">Film Room</div>
        <NavLink to="/film-room" className="underline text-blue-600 text-sm">Open Mistake Lab →</NavLink>
      </div>
    </div>
  );
}

/* =====================
 * OPERATOR DASHBOARD
 * ===================== */
function OperatorDashboard() {
  const store = useStore();
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Operator Dashboard</h2>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Ratings & Pairing Assistant</h3>
        <RatingsPairingPanel store={store} />
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Commission & Membership</h3>
          <CommissionSettings />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Voting Settings</h3>
          <VotingSettings />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Privacy & Public Display</h3>
          <PrivacySettings />
        </div>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Season Manager</h3>
          <SeasonManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Events & Hustle Night</h3>
          <EventsManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Quests & Bounties</h3>
          <QuestsAdmin />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Create / Schedule Match</h3>
          <MatchCreator />
          <div className="mt-4 rounded-xl border p-3 bg-gray-50">
            <div className="text-sm font-semibold mb-1">Lock Handicap Path</div>
            <div className="text-xs text-muted-foreground mb-2">Decide: Give Weight vs More Cash (1.2×). Winner pays 1.2× when choosing cash mode; loser pays base.</div>
            <LadderStakesRule />
          </div>
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Escrow Console & Settlement</h3>
          <EscrowConsole />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Fines & Penalties</h3>
          <FinesManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Reports / Export</h3>
          <ReportsExporter />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Revenue Calculator (Target)</h3>
          <RevenueCalculator />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Ledger (Recent)</h3>
          <LedgerPanel />
        </div>
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Streaming & Walk‑in Songs</h3>
        <StreamManager />
      </div>

      <div className="text-xs text-muted-foreground">* Demo data persists locally. Replace with backend CRUD when ready.</div>
    </div>
  );
}

/* ===== Operator Widgets ===== */
function CommissionSettings() {
  const { settings, setSettings, players } = useStore();
  const proCount = players.filter(p=>p.pro).length;
  const basicCount = players.filter(p=>p.member && !p.pro).length;
  const nonCount = players.filter(p=>!p.member).length;
  return (
    <div className="grid md:grid-cols-3 gap-3 text-sm">
      <NumberField label="Member Commission" value={settings.memberRate} min={0} max={0.2} step={0.005} setValue={(v) => setSettings({ ...settings, memberRate: Number(v) })} />
      <NumberField label="Pro Discount" value={settings.proDiscount} min={0} max={0.05} step={0.005} setValue={(v) => setSettings({ ...settings, proDiscount: Number(v) })} />
      <NumberField label="Non‑Member Commission" value={settings.nonMemberRate} min={0} max={0.3} step={0.005} setValue={(v) => setSettings({ ...settings, nonMemberRate: Number(v) })} />
      <NumberField label="Non‑Member Match Fee ($)" value={settings.nonMemberMatchFee} min={0} max={50} step={1} setValue={(v) => setSettings({ ...settings, nonMemberMatchFee: Number(v) })} />
      <div className="text-xs text-muted-foreground md:col-span-3">Roster: {basicCount} Basic / {proCount} Pro / {nonCount} Non‑member(s). Commission is taken from winner payout; match fee charged per non‑member participant.</div>
    </div>
  );
}

function VotingSettings() {
  const { settings, setSettings } = useStore();
  return (
    <div className="grid md:grid-cols-4 gap-3 text-sm">
      <NumberField label="Min Votes to Pass" value={settings.votingMinVotes} min={1} max={50} step={1} setValue={(v) => setSettings({ ...settings, votingMinVotes: Number(v) })} />
      <NumberField label="Pass Ratio (0–1)" value={settings.votingPassRatio} min={0.5} max={1} step={0.05} setValue={(v) => setSettings({ ...settings, votingPassRatio: Number(v) })} />
      <label className="text-xs block">
        <div className="mb-1 font-medium">Allow Downvotes</div>
        <input type="checkbox" checked={settings.votingAllowDownvotes} onChange={(e) => setSettings({ ...settings, votingAllowDownvotes: e.target.checked })} />
      </label>
      <NumberField label="Banner lookback (days)" value={settings.rulebookBannerLookbackDays} min={7} max={365} step={1} setValue={(v) => setSettings({ ...settings, rulebookBannerLookbackDays: Number(v) })} />
      <div className="text-xs text-muted-foreground md:col-span-4">Proposals auto‑accept when votes ≥ Min and up/(up+down) ≥ Pass Ratio. Accepted items can show on the Rulebook banner.</div>
    </div>
  );
}

function PrivacySettings(){
  const { settings, setSettings } = useStore();
  const opts = [
    { v: 'hide', label: 'Hide points & hybrid from public' },
    { v: 'chips', label: 'Show Chips (no $) to public' },
    { v: 'money', label: 'Show Money/Points to everyone' },
  ];
  return (
    <div className="grid md:grid-cols-3 gap-3 text-sm">
      <label className="text-xs block md:col-span-2">
        <div className="mb-1 font-medium">Public Points Visibility</div>
        <select value={settings.publicPointsVisibility} onChange={(e)=>setSettings({ ...settings, publicPointsVisibility: e.target.value })} className="w-full border rounded-xl px-3 py-2">
          {opts.map(o => <option key={o.v} value={o.v}>{o.label}</option>)}
        </select>
      </label>
      <label className="text-xs block">
        <div className="mb-1 font-medium">Show Hybrid to Public</div>
        <input type="checkbox" checked={!!settings.publicShowHybrid} onChange={(e)=>setSettings({ ...settings, publicShowHybrid: e.target.checked })} />
      </label>
      <div className="text-xs text-muted-foreground md:col-span-3">Operators always see real money and hybrid. Public view follows the setting above.</div>
    </div>
  );
}

function ProposalsModerator() {
  const { proposals, updateProposal, removeProposal } = useStore();
  const list = proposals.slice().sort((a,b)=> b.createdAt - a.createdAt);
  function setStatus(id, status) { updateProposal(id, { status, acceptedAt: status === 'accepted' ? Date.now() : null }); }
  return (
    <div className="text-sm">
      {list.length === 0 ? (
        <div className="text-muted-foreground">No proposals yet. Tell players to hit the Proposals page.</div>
      ) : (
        <table className="w-full text-sm">
          <thead><tr><th className="text-left">Title</th><th className="text-left">Type</th><th className="text-left">Score</th><th className="text-left">Status</th><th className="text-left">Author</th><th className="text-left">When</th><th className="text-left">Comments</th><th></th></tr></thead>
          <tbody>
            {list.map(p => (
              <tr key={p.id} className="border-top">
                <td className="py-1">{p.title}</td>
                <td>{p.type}</td>
                <td>{p.up - p.down} ({p.up}/{p.down})</td>
                <td>{p.status}</td>
                <td>{p.authorName || '—'}</td>
                <td>{new Date(p.createdAt).toLocaleString()}</td>
                <td>{(p.comments||[]).length}</td>
                <td className="text-right space-x-1">
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'open')}>Open</button>
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'accepted')}>Accept</button>
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'rejected')}>Reject</button>
                  <button className="px-2 py-1 rounded border text-red-600" onClick={()=>removeProposal(p.id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

/* =====================
 * PROPOSALS PAGE (Players vote or suggest changes) + COMMENTS
 * ===================== */
function ProposalsPage() {
  const { user } = useAuth();
  const { proposals, addProposal, voteProposal, settings, addProposalComment, removeProposalComment } = useStore();
  const [q, setQ] = useState("");
  const [sort, setSort] = useState("hot"); // hot | top | new
  const [filter, setFilter] = useState("open"); // open | all | mine
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");
  const [type, setType] = useState("Rule Change");
  const [openComments, setOpenComments] = useState({});
  const [commentDraft, setCommentDraft] = useState({});

  const list = useMemo(() => {
    let arr = proposals;
    if (filter === 'open') arr = arr.filter(p=>p.status==='open');
    if (filter === 'mine' && user) arr = arr.filter(p=>p.authorName===user.name);
    if (q.trim()) {
      const s = q.toLowerCase();
      arr = arr.filter(p => (p.title+" "+p.body).toLowerCase().includes(s));
    }
    if (sort === 'new') arr = arr.slice().sort((a,b)=> b.createdAt - a.createdAt);
    if (sort === 'top') arr = arr.slice().sort((a,b)=> (b.up-b.down) - (a.up-a.down));
    if (sort === 'hot') arr = arr.slice().sort((a,b)=> hotScore(b) - hotScore(a));
    return arr;
  }, [proposals, q, sort, filter, user]);

  function submit(e){
    e.preventDefault();
    if (!user) { alert('Log in to propose.'); return; }
    if (!title.trim()) { alert('Title required.'); return; }
    addProposal({ title: title.trim(), body: body.trim(), type, authorName: user.name });
    setTitle(""); setBody(""); setType("Rule Change");
  }

  function myVote(p){ return (p.votes && user) ? (p.votes[user.name] || 0) : 0; }
  function doVote(p, val){
    if (!user) { alert('Log in to vote.'); return; }
    if (!settings.votingAllowDownvotes && val < 0) return;
    const current = myVote(p);
    const next = (current === val) ? 0 : val;
    voteProposal(p.id, user.name, next);
  }

  function postComment(p){
    if (!user) { alert('Log in to comment.'); return; }
    const text = (commentDraft[p.id]||"").trim();
    if (!text) return;
    addProposalComment(p.id, user.name, text);
    setCommentDraft({...commentDraft, [p.id]: ""});
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">📥 Proposals & Voting</h2>
        <div className="flex gap-2 text-sm">
          <input value={q} onChange={(e)=>setQ(e.target.value)} placeholder="Search proposals…" className="border rounded-xl px-3 py-2"/>
          <select value={filter} onChange={(e)=>setFilter(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="open">Open</option>
            <option value="all">All</option>
            <option value="mine">My proposals</option>
          </select>
          <select value={sort} onChange={(e)=>setSort(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="hot">Hot</option>
            <option value="top">Top</option>
            <option value="new">New</option>
          </select>
        </div>
      </div>

      <form onSubmit={submit} className="rounded-2xl border p-4 space-y-2">
        <div className="font-semibold">Suggest a change</div>
        <div className="grid md:grid-cols-4 gap-2">
          <input value={title} onChange={(e)=>setTitle(e.target.value)} placeholder="Short title (e.g., Add 10-Ball only nights)" className="border rounded-xl px-3 py-2 md:col-span-2"/>
          <select value={type} onChange={(e)=>setType(e.target.value)} className="border rounded-xl px-3 py-2">
            <option>Rule Change</option>
            <option>New Feature</option>
            <option>Event Idea</option>
            <option>Merch/Promo</option>
          </select>
          <button className="px-3 py-2 rounded-xl bg-black text-white">Post</button>
        </div>
        <textarea value={body} onChange={(e)=>setBody(e.target.value)} placeholder="Details (optional)" className="border rounded-xl px-3 py-2 w-full" rows={3}></textarea>
        <div className="text-xs text-muted-foreground">Auto‑accept when votes ≥ {settings.votingMinVotes} and approvals ≥ {Math.round(settings.votingPassRatio*100)}%.</div>
      </form>

      {/* List */}
      <div className="space-y-2">
        {list.length === 0 ? (
          <div className="text-sm text-muted-foreground">No proposals match. Be the first to post.</div>
        ) : list.map(p => (
          <article key={p.id} className="rounded-2xl border p-3">
            <div className="flex items-start justify-between gap-3">
              <div>
                <div className="text-sm font-semibold">{p.title} <span className="text-xs font-normal inline-block ml-2 rounded-full border px-2 py-0.5">{p.type}</span></div>
                <div className="text-xs text-muted-foreground">by {p.authorName || 'anon'} • {new Date(p.createdAt).toLocaleString()}</div>
              </div>
              <div className="text-right text-xs">
                <div className="font-semibold">Status: {p.status}</div>
                <div>Score: {p.up - p.down} ({p.up}/{p.down})</div>
              </div>
            </div>
            {p.body && <div className="text-sm mt-2 whitespace-pre-wrap">{p.body}</div>}
            {p.status === 'open' ? (
              <div className="flex gap-2 mt-3">
                <button className={`px-3 py-1 rounded-xl border ${myVote(p)>0? 'bg-emerald-50':''}`} onClick={()=>doVote(p,+1)}>👍 Approve</button>
                {settings.votingAllowDownvotes && (
                  <button className={`px-3 py-1 rounded-xl border ${myVote(p)<0? 'bg-red-50':''}`} onClick={()=>doVote(p,-1)}>👎 Oppose</button>
                )}
              </div>
            ) : (
              <div className="text-xs mt-3 text-muted-foreground">Voting closed.</div>
            )}

            {/* Comments */}
            <div className="mt-3">
              <button className="text-xs underline" onClick={()=>setOpenComments({...openComments, [p.id]: !openComments[p.id]})}>
                {openComments[p.id] ? 'Hide' : 'Show'} Comments ({(p.comments||[]).length})
              </button>
              {openComments[p.id] && (
                <div className="mt-2 rounded-xl border p-2">
                  <div className="space-y-2 max-h-64 overflow-auto pr-2">
                    {(p.comments||[]).length === 0 && <div className="text-xs text-muted-foreground">No comments yet.</div>}
                    {(p.comments||[]).map(c => (
                      <div key={c.id} className="text-xs border-b pb-1">
                        <div className="flex items-center justify-between">
                          <div><span className="font-semibold">{c.authorName||'anon'}</span> • {new Date(c.createdAt).toLocaleString()}</div>
                          {/* Operators or comment author can delete */}
                          <DeleteCommentButton proposalId={p.id} commentId={c.id} />
                        </div>
                        <div className="whitespace-pre-wrap">{c.body}</div>
                      </div>
                    ))}
                  </div>
                  <div className="flex gap-2 mt-2">
                    <input value={commentDraft[p.id]||''} onChange={(e)=>setCommentDraft({...commentDraft, [p.id]: e.target.value})} className="border rounded-xl px-3 py-2 flex-1" placeholder="Add a comment"/>
                    <button className="px-3 py-2 rounded-xl border" onClick={()=>postComment(p)}>Send</button>
                  </div>
                </div>
              )}
            </div>
          </article>
        ))}
      </div>
    </div>
  );
}

function DeleteCommentButton({ proposalId, commentId }){
  const { user } = useAuth();
  const { proposals, removeProposalComment } = useStore();
  const p = proposals.find(pp=>pp.id===proposalId);
  const c = p?.comments?.find(x=>x.id===commentId);
  if (!user) return null;
  const canDel = user.role==='operator' || (c && c.authorName===user.name);
  if (!canDel) return null;
  return <button className="text-red-600 underline" onClick={()=>removeProposalComment(proposalId, commentId)}>Delete</button>;
}

function hotScore(p){
  const ageHrs = (Date.now() - (p.createdAt||0)) / 3600000;
  const score = (p.up - p.down);
  return score / Math.pow(ageHrs + 2, 1.1);
}

/* =====================
 * RULEBOOK with Accepted-Proposals Banner
 * ===================== */
function RulebookPage(){
  const { proposals, settings } = useStore();
  const lookbackMs = (settings.rulebookBannerLookbackDays||60) * 24 * 3600 * 1000;
  const now = Date.now();
  const recentAccepted = proposals
    .filter(p => p.status==='accepted' && (p.acceptedAt && (now - p.acceptedAt) <= lookbackMs))
    .sort((a,b)=> (b.acceptedAt||0) - (a.acceptedAt||0))
    .slice(0, 3);
  return (
    <div className="space-y-4">
      {recentAccepted.length>0 && (
        <div className="rounded-2xl border p-3 bg-amber-50">
          <div className="text-sm font-semibold mb-1">Recently Accepted Changes</div>
          <ul className="list-disc pl-5 text-sm">
            {recentAccepted.map(p => (
              <li key={p.id}><span className="font-semibold">{p.title}</span> <span className="text-xs">({p.type})</span></li>
            ))}
          </ul>
          <NavLink to="/proposals" className="text-xs underline mt-2 inline-block">See details →</NavLink>
        </div>
      )}
      <Rulebook />
    </div>
  );
}

/* =====================
 * LEADERBOARD PAGE (Elo, Points, Hybrid) + Player Drawer + Last ΔElo
 * ===================== */
function LeaderboardPage() {
  const { players, matches, settings } = useStore();
  const { user } = useAuth();
  const isOperator = user?.role === 'operator';
  // Determine what the public should see
  const publicMode = isOperator ? 'money' : (settings.publicPointsVisibility || 'hide');
  const showPoints = publicMode !== 'hide';
  const showHybrid = (isOperator || settings.publicShowHybrid) && publicMode !== 'hide';

  const stats = useMemo(() => buildStats(players, matches, settings.initialRating, settings.currentSeasonStart), [players, matches, settings.initialRating, settings.currentSeasonStart]);
  const [mode, setMode] = useState('elo'); // elo | points | hybrid
  const [selectedId, setSelectedId] = useState(null);

  const deltas = useMemo(() => computeEloDeltas(players, matches, settings), [players, matches, settings]);

  useEffect(()=>{
    if (mode==='points' && !showPoints) setMode('elo');
    if (mode==='hybrid' && !showHybrid) setMode('elo');
  }, [mode, showPoints, showHybrid]);

  const sorted = useMemo(() => {
    const arr = Object.values(stats);
    if (mode === 'points') return [...arr].sort((a,b)=> b.points - a.points);
    if (mode === 'hybrid') return [...arr].sort((a,b)=> b.power - a.power);
    return [...arr].sort((a,b)=> b.rating - a.rating);
  }, [stats, mode]);

  const pointsLabel = isOperator ? 'Points ($)' : (publicMode==='chips' ? 'Chips' : 'Points');
  const hybridLabel = isOperator ? 'Hybrid' : (publicMode==='chips' ? 'Skill+Chips' : 'Hybrid');

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">🏆 Leaderboard</h2>
        <div className="flex gap-2 text-sm items-center">
          <button className={`px-3 py-2 rounded-xl border ${mode==='elo'?'bg-black text-white':''}`} onClick={()=>setMode('elo')}>Elo</button>
          {showPoints && <button className={`px-3 py-2 rounded-xl border ${mode==='points'?'bg-black text-white':''}`} onClick={()=>setMode('points')}>{pointsLabel}</button>}
          {showHybrid && <button className={`px-3 py-2 rounded-xl border ${mode==='hybrid'?'bg-black text-white':''}`} onClick={()=>setMode('hybrid')}>{hybridLabel}</button>}
          <NavLink to="/leaderboard/print" className="px-3 py-2 rounded-xl border">Print view</NavLink>
        </div>
      </div>
      <div className="text-xs text-muted-foreground">
        {isOperator ? (
          <>Money = Points (winner gets the gross stake). Hybrid = Elo + 0.1×Points. Season filter applied if set.</>
        ) : publicMode==='hide' ? (
          <>Public view: money totals hidden. Elo is visible.</>
        ) : (
          <>Public view: showing {publicMode==='chips' ? 'Chips (no $)' : 'Points'}.</>
        )}
      </div>
      <table className="w-full text-sm">
        <thead>
          <tr className="bg-gray-50">
            <th className="text-left px-2 py-2">#</th>
            <th className="text-left px-2 py-2">Player</th>
            <th className="text-left px-2 py-2">Elo</th>
            <th className="text-left px-2 py-2">Δ Elo (last)</th>
            {showPoints && <th className="text-left px-2 py-2">{pointsLabel}</th>}
            <th className="text-left px-2 py-2">W‑L</th>
            <th className="text-left px-2 py-2">Streak</th>
            {showHybrid && <th className="text-left px-2 py-2">{hybridLabel}</th>}
            <th className="text-left px-2 py-2">Badges</th>
          </tr>
        </thead>
        <tbody>
          {sorted.map((row, i) => {
            const lastDelta = deltas.lastDeltaByPlayer[row.id] || 0;
            return (
              <tr key={row.id} className="border-t align-middle hover:bg-gray-50 cursor-pointer" onClick={()=>setSelectedId(row.id)}>
                <td className="px-2 py-1">{i+1}</td>
                <td className="px-2 py-1">{row.name}</td>
                <td className="px-2 py-1"><RatingBadge rating={row.rating} /></td>
                <td className={`px-2 py-1 ${lastDelta>0?'text-emerald-600': lastDelta<0?'text-red-600':''}`}>{signed(lastDelta)}</td>
                {showPoints && <td className="px-2 py-1">{Math.round(row.points)}</td>}
                <td className="px-2 py-1">{row.wins}-{row.losses}</td>
                <td className="px-2 py-1">{row.streak > 1 ? `W${row.streak}` : row.streak < 0 ? `L${-row.streak}` : '—'}</td>
                {showHybrid && <td className="px-2 py-1">{Math.round(row.power)}</td>}
                <td className="px-2 py-1 text-xs">
                  {i===0 && <Badge>👑 King</Badge>}
                  {row.streak >= 3 && <Badge>🔥 Streak {row.streak}</Badge>}
                  {/* Hide money badge from public */}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {selectedId && <PlayerHistoryDrawer playerId={selectedId} onClose={()=>setSelectedId(null)} />}
    </div>
  );
}

function PlayerHistoryDrawer({ playerId, onClose }){
  const { players, matches, settings } = useStore();
  const { user } = useAuth();
  const isOperator = user?.role==='operator';
  const publicMode = isOperator ? 'money' : (settings.publicPointsVisibility||'hide');
  const showPoints = publicMode !== 'hide';

  const player = players.find(p=>p.id===playerId);
  const deltas = useMemo(() => computeEloDeltas(players, matches, settings), [players, matches, settings]);
  const timeline = (deltas.historyByPlayer[playerId] || []).slice().sort((a,b)=> (b.time||0) - (a.time||0));

  return (
    <div className="fixed inset-0 bg-black/30 flex items-end md:items-center justify-center z-50">
      <div className="bg-white w-full md:max-w-3xl rounded-t-2xl md:rounded-2xl shadow-xl max-h-[80vh] overflow-hidden">
        <div className="p-3 border-b flex items-center justify-between">
          <div className="font-semibold">{player?.name} — Match History</div>
          <button className="text-sm underline" onClick={onClose}>Close</button>
        </div>
        <div className="p-3 overflow-auto">
          {timeline.length===0 ? (
            <div className="text-sm text-muted-foreground">No settled matches yet.</div>
          ) : (
            <table className="w-full text-sm">
              <thead><tr><th className="text-left">When</th><th className="text-left">Opponent</th><th className="text-left">Result</th><th className="text-left">Base</th><th className="text-left">Mode</th><th className="text-left">Δ Elo</th>{showPoints && <th className="text-left">{isOperator? 'Points ($)':'Chips'}</th>}</tr></thead>
              <tbody>
                {timeline.slice(0, 25).map((r)=> (
                  <tr key={r.id} className="border-t">
                    <td className="py-1">{new Date(r.time).toLocaleString()}</td>
                    <td>{r.opponentName}</td>
                    <td className={r.win? 'text-emerald-600':'text-red-600'}>{r.win? 'W':'L'}</td>
                    <td>${r.base}</td>
                    <td>{r.mode==='extra_cash'?'1.2× Cash':'Weight'}</td>
                    <td className={`${r.delta>0?'text-emerald-600': r.delta<0?'text-red-600':''}`}>{signed(r.delta)}</td>
                    {showPoints && <td>{Math.round(r.points)}</td>}
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
}

/* =====================
 * PRINTABLE LEADERBOARD PAGE (honors privacy)
 * ===================== */
function LeaderboardPrintPage(){
  const { players, matches, settings } = useStore();
  const { user } = useAuth();
  const isOperator = user?.role==='operator';
  const publicMode = isOperator ? 'money' : (settings.publicPointsVisibility||'hide');
  const showPoints = publicMode !== 'hide';

  const stats = useMemo(() => buildStats(players, matches, settings.initialRating, settings.currentSeasonStart), [players, matches, settings.initialRating, settings.currentSeasonStart]);
  const sorted = Object.values(stats).sort((a,b)=> b.rating - a.rating);
  useEffect(()=>{ /* auto-focus for ctrl/cmd+p */ }, []);
  return (
    <div>
      <style>{`@media print {.no-print{display:none}}`}</style>
      <div className="no-print flex items-center justify-between mb-4">
        <div className="font-semibold">Printable Leaderboard</div>
        <button className="px-3 py-2 rounded-xl border" onClick={()=>window.print()}>Print</button>
      </div>
      <div className="text-center mb-2">
        <div className="text-xl font-bold">Tri‑City Ladder — Leaderboard</div>
        <div className="text-xs text-muted-foreground">{new Date().toLocaleString()}</div>
      </div>
      <table className="w-full text-sm">
        <thead>
          <tr>
            <th className="text-left px-2 py-2">#</th>
            <th className="text-left px-2 py-2">Player</th>
            <th className="text-left px-2 py-2">Elo</th>
            {showPoints && <th className="text-left px-2 py-2">{isOperator? 'Points ($)':'Chips'}</th>}
            <th className="text-left px-2 py-2">W‑L</th>
          </tr>
        </thead>
        <tbody>
          {sorted.map((row, i) => (
            <tr key={row.id} className="border-t">
              <td className="px-2 py-1">{i+1}</td>
              <td className="px-2 py-1">{row.name}</td>
              <td className="px-2 py-1">{Math.round(row.rating)}</td>
              {showPoints && <td className="px-2 py-1">{Math.round(row.points)}</td>}
              <td className="px-2 py-1">{row.wins}-{row.losses}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

/* =====================
 * EVENTS (Tournaments + Hustle Night + Kelly/Street‑style)
 * ===================== */
function EventsPage(){
  const { events, settings } = useStore();
  const hustleDate = events.nextTournamentDate ? (events.nextTournamentDate - 7*24*3600*1000) : null;
  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">📅 Events</h2>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold">Next Tournament</div>
        <div className="text-sm">{events.nextTournamentDate ? new Date(events.nextTournamentDate).toLocaleString() : 'TBD'}</div>
        <div className="text-sm mt-2">Hustle Night (Kelly / Money Drop): {hustleDate ? new Date(hustleDate).toLocaleString() : '—'}</div>
        <div className="text-xs text-muted-foreground mt-2">House rake for Hustle Night: {Math.round((events.hustleNightRakePct||settings.hustleRakePct)*100)}%</div>
      </div>
      <div className="rounded-2xl border p-4 space-y-2">
        <div className="font-semibold">Street‑Style Money Drop — House Rules</div>
        <ul className="list-disc pl-5 text-sm space-y-1">
          <li>Players place bills on marked spots. One attempt per turn. Ball must be released past the headstring.</li>
          <li>If any part of the cue ball rests on a bill at rest, shooter wins that bill. No cushions first. One motion. Ref call is final.</li>
          <li>House rake {Math.round((events.hustleNightRakePct||settings.hustleRakePct)*100)}% from entry fees. Keep it fun and fast.</li>
        </ul>
      </div>
    </div>
  );
}

/* =====================
 * PAGES FROM EARLIER CHATS (light edits)
 * ===================== */
function MoneyRulesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💵 Money Rules</h2>
      <ol className="list-decimal pl-5 space-y-2 text-sm">
        <li><span className="font-semibold">Primary — CashApp:</span> both players send stake to operator escrow <span className="font-semibold">before</span> the lag/break. Operator pays winner instantly, minus commission.</li>
        <li><span className="font-semibold">Secondary (approval only):</span> Zelle, Venmo, or cash handed to operator pre‑match.</li>
        <li><span className="font-semibold">Commission from winner:</span> 5% members (Pro may be discounted), 15% non‑members. Non‑member fee $12 per participant per match.</li>
        <li><span className="font-semibold">Operators paid first.</span></li>
      </ol>
    </div>
  );
}

function PlayerTransparencyPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📝 Player Transparency Sheet (Public)</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Basic $25/mo (5% commission). Pro $40/mo (free tourneys, lower commission).</li>
        <li>Non‑Members: $12 per match (“suckers tax”).</li>
        <li>Bets: $50–$300. Escrow required. Streams: FB/TikTok Live. Walk‑in songs mandatory.</li>
        <li>Activity: 2 matches/mo. Challenges accepted in 7 days or forfeit.</li>
        <li>Points & stats public (revenue hidden unless operator enables).</li>
      </ul>
    </div>
  );
}

function PotsAndJackpotsPage() {
  const { ghostPot, ghostBuyIn, ghostWinPayout, settings, ghostRake } = useStore();
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💣 Pots & Jackpots</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Break & Run Pot: $2 each match → winner‑take‑all rollovers.</li>
        <li>Hill‑Hill Fee: Lose 6–6, pay $10 to opponent.</li>
        <li>King Bonus: streak rewards stack.</li>
        <li>Bounty hunts & streak badges.</li>
      </ul>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-1">🔮 Ghost Runout (side action)</div>
        <div className="text-sm">Pot: ${round2(ghostPot)} • Default buy‑in ${settings.ghostBuyIn} • Payout $20</div>
        <div className="flex gap-2 text-sm mt-2">
          <button className="px-3 py-2 rounded-xl border" onClick={()=>ghostBuyIn(settings.ghostBuyIn, 'Ghost buy‑in')}>Log Buy‑in</button>
          <button className="px-3 py-2 rounded-xl border" onClick={()=>ghostWinPayout(20, 'Ghost win payout')}>Log Win (‑$20 pot)</button>
          <button className="px-3 py-2 rounded-xl border" onClick={()=>ghostRake(round2((settings.ghostBuyIn||5) * (settings.ghostRakePct||0.1)), 'Ghost rake')}>Log Rake</button>
        </div>
        <div className="text-xs text-muted-foreground mt-2">Operators may optionally rake {Math.round((settings.ghostRakePct||0.1)*100)}% per attempt.</div>
      </div>
    </div>
  );
}

function FinesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">⚖️ Fines</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>No‑Show: $30 (to opponent)</li>
        <li>Late: $10 (to opponent)</li>
        <li>Bad Sportsmanship: $20 bounty</li>
        <li>Civil trash talk allowed. Fights = auto‑ban.</li>
      </ul>
    </div>
  );
}

function StreamsAndHypePage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📺 Streams & Hype</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>FB + TikTok Live every event. Walk‑in songs required (no pick → My Heart Will Go On).</li>
        <li>Livestreams: $5 optional; Highlights: $10 per reel.</li>
        <li>Roasts are fun, not humiliation. Keep it savage but civil.</li>
      </ul>
    </div>
  );
}

function DisputesAndSchedulingPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">🧭 Disputes & Scheduling</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Challenges accepted within <span className="font-semibold">7 days</span>. Don’t duck.</li>
        <li>Operator sets date if players can’t agree. Refuse → forfeit/points penalty.</li>
        <li>At 6–6: Chaos Coin (left‑hand only, one‑hand no‑rail, last‑pocket, golden break).</li>
      </ul>
    </div>
  );
}

/* =====================
 * UTIL + BADGES + STATS + ELO DELTAS
 * ===================== */
function nameOfLocal(id) {
  // local helper (no hooks in non-react context)
  const p = JSON.parse(localStorage.getItem('tri_players')||'[]').find(pp=>pp.id===id);
  return p?.name || 'Unknown';
}
function nameOf(id) {
  const { players } = useStore();
  return players.find((p) => p.id === id)?.name || "Unknown";
}
function ratingOf(id) {
  const { players } = useStore();
  const r = players.find((p) => p.id === id)?.rating;
  return Number.isFinite(r) ? Math.round(r) : 1200;
}
function displayName(id) {
  const n = nameOf(id);
  const r = ratingOf(id);
  return (
    <span className="inline-flex items-center gap-2">{n} <RatingBadge rating={r} /></span>
  );
}
function uid() { return Math.random().toString(36).slice(2) + Date.now().toString(36); }
function round2(n) { return Math.round(n * 100) / 100; }
function q(s) { return '"' + String(s).replace(/"/g, '""') + '"'; }
function dateTag() { return new Date().toISOString().slice(0,10); }
function Select({ label, value, setValue, options }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <select value={value} onChange={(e) => setValue(e.target.value)} className="w-full border rounded-xl px-3 py-2">
        <option value="">— Select —</option>
        {options.map((o) => (
          <option key={o.id} value={o.id}>{o.name}</option>
        ))}
      </select>
    </label>
  );
}
function NumberField({ label, value, setValue, min, max, step }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <input type="number" className="w-full border rounded-xl px-3 py-2" value={value} min={min} max={max} step={step} onChange={(e) => setValue(Number(e.target.value))} />
    </label>
  );
}
function fmtMatch(m, players) {
  const fav = players.find(p=>p.id===m.favoriteId)?.name || "?";
  const chal = players.find(p=>p.id===m.challengerId)?.name || "?";
  return `${fav} vs ${chal} — $${m.base} — ${m.mode === "extra_cash" ? "More Cash (1.2×)" : `Weight (${m.weightNote||"n/a"})`} ${m.date? "— " + new Date(m.date).toLocaleString():""}`;
}
function stakes(base, mode) {
  const favoriteStake = mode === "extra_cash" ? round2(base * 1.2) : round2(base);
  const challengerStake = round2(base);
  return { favoriteStake, challengerStake };
}

function Badge({ children }) {
  return <span className="inline-flex items-center rounded-full border px-2 py-0.5 text-[10px] mr-1">{children}</span>;
}
function RatingBadge({ rating }) {
  return <span className="inline-flex items-center rounded-full border px-2 py-0.5 text-[10px]">Elo {Math.round(rating)}</span>;
}
function signed(x){ const v = Math.round(x); return (v>0?`+${v}`: v<0?`${v}`:'0'); }

function buildStats(players, matches, defaultRating=1200, seasonStart=null) {
  const map = {};
  for (const p of players) {
    map[p.id] = { id: p.id, name: p.name, rating: Number.isFinite(p.rating) ? p.rating : defaultRating, points: 0, wins: 0, losses: 0, streak: 0, lastResultAt: 0 };
  }
  // sort by time and update streaks & points
  const settled = matches.filter(m => m.settled && m.result?.winner && (!seasonStart || (m.createdAt||0) >= seasonStart)).sort((a,b)=> (a.createdAt||0) - (b.createdAt||0));
  for (const m of settled) {
    const fav = map[m.favoriteId];
    const chal = map[m.challengerId];
    if (!fav || !chal) continue;
    const winnerId = m.result.winner === 'favorite' ? m.favoriteId : m.challengerId;
    const loserId  = m.result.winner === 'favorite' ? m.challengerId : m.favoriteId;
    const winner = map[winnerId];
    const loser = map[loserId];
    winner.wins += 1; loser.losses += 1;
    const gross = Number(m.result.gross || m.base || 0);
    winner.points += gross; // Money = Points (gross to winner)
    // very simple streak calc: reset on loss
    winner.streak = (winner.streak >= 0 ? winner.streak + 1 : 1);
    loser.streak = (loser.streak <= 0 ? loser.streak - 1 : -1);
    winner.lastResultAt = loser.lastResultAt = (m.createdAt||0);
  }
  // compute hybrid
  for (const id in map) {
    const r = map[id];
    r.power = r.rating + 0.1 * r.points; // Hybrid = Elo + 0.1×Points
  }
  return map;
}

/* ===== Elo helpers + timeline deltas ===== */
function eloExpected(rA, rB) { return 1 / (1 + Math.pow(10, (rB - rA) / 400)); }
function eloUpdatePair(rA, rB, scoreA, K=24) {
  const eA = eloExpected(rA, rB); const eB = 1 - eA;
  const newA = rA + K * (scoreA - eA);
  const newB = rB + K * ((1 - scoreA) - eB);
  return { newA, newB };
}

function computeEloDeltas(players, matches, settings){
  const initial = settings.initialRating || 1200; const K = settings.kFactor || 24;
  const rating = new Map(players.map(p => [p.id, Number.isFinite(p.rating)? p.rating : initial]));
  const ordered = matches.filter(m=> m.settled && m.result?.winner).slice().sort((a,b)=> (a.createdAt||0)-(b.createdAt||0));
  const byMatch = {}; const lastDeltaByPlayer = {}; const historyByPlayer = {};
  // Start everyone at initial for timeline visualization
  for (const p of players) { rating.set(p.id, initial); }

  for (const m of ordered) {
    const RA = rating.get(m.favoriteId) ?? initial;
    const RB = rating.get(m.challengerId) ?? initial;
    const scoreA = m.result.winner === 'favorite' ? 1 : 0;
    const { newA, newB } = eloUpdatePair(RA, RB, scoreA, K);
    const favDelta = newA - RA; const chalDelta = newB - RB;
    byMatch[m.id] = { favBefore: RA, favAfter: newA, favDelta, chalBefore: RB, chalAfter: newB, chalDelta };
    rating.set(m.favoriteId, newA); rating.set(m.challengerId, newB);

    // record per-player history rows
    const time = m.createdAt || Date.now();
    const base = m.base || 0; const mode = m.mode || 'weight';
    const favWin = scoreA === 1;
    const gross = Number(m.result?.gross || base);
    const favRow = {
      id: m.id+':fav', time, base, mode,
      win: favWin, delta: Math.round(favDelta), points: favWin ? gross : 0,
      opponentId: m.challengerId, opponentName: players.find(p=>p.id===m.challengerId)?.name || '—',
    };
    const chalRow = {
      id: m.id+':chal', time, base, mode,
      win: !favWin, delta: Math.round(chalDelta), points: !favWin ? gross : 0,
      opponentId: m.favoriteId, opponentName: players.find(p=>p.id===m.favoriteId)?.name || '—',
    };
    (historyByPlayer[m.favoriteId] = historyByPlayer[m.favoriteId] || []).push(favRow);
    (historyByPlayer[m.challengerId] = historyByPlayer[m.challengerId] || []).push(chalRow);
    lastDeltaByPlayer[m.favoriteId] = Math.round(favDelta);
    lastDeltaByPlayer[m.challengerId] = Math.round(chalDelta);
  }
  return { byMatch, lastDeltaByPlayer, historyByPlayer };
}

function NotFound() {
  return (
    <div className="text-sm">Page not found. Try the <NavLink className="underline" to="/">home page</NavLink>.</div>
  );
}

/* =====================
 * REPORTS EXPORTER (Matches/Fines/Proposals)
 * ===================== */
function ReportsExporter() {
  const { matches, fines, proposals, ledger } = useStore();
  function expCSV(name, rows) {
    const blob = new Blob([rows.join("
")], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = name; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
  }
  function exportMatches() {
    const cols = ["id","createdAt","status","favorite","challenger","base","mode","weightNote","date","winner","gross","commission","net","rate"];
    const rows = [cols.join(",")].concat(matches.map(m => {
      const r = m.result || {}; 
      return [m.id,m.createdAt, m.status, nameOf(m.favoriteId), nameOf(m.challengerId), m.base, m.mode, `"${(m.weightNote||"").replace(/"/g,'""')}"`, m.date||"", r.winner||"", r.gross||"", r.commission||"", r.net||"", r.rate||""].join(",");
    }));
    expCSV(`matches-${dateTag()}.csv`, rows);
  }
  function exportFines() {
    const cols = ["date","player","type","amount"]; 
    const rows = [cols.join(",")].concat(fines.map(f => [new Date(f.date).toISOString(), nameOf(f.playerId), f.type, f.amount].join(",")));
    expCSV(`fines-${dateTag()}.csv`, rows);
  }
  function exportProposals(){
    const cols = ["id","title","type","status","score","up","down","author","createdAt","acceptedAt","comments"];
    const rows = [cols.join(",")].concat(proposals.map(p => [
      p.id,
      `"${(p.title||"").replace(/"/g,'""')}"`,
      p.type||"",
      p.status||"open",
      (p.up - (p.down||0)),
      p.up||0,
      p.down||0,
      `"${(p.authorName||"").replace(/"/g,'""')}"`,
      new Date(p.createdAt||0).toISOString(),
      p.acceptedAt ? new Date(p.acceptedAt).toISOString() : "",
      (p.comments||[]).length
    ].join(",")));
    expCSV(`proposals-${dateTag()}.csv`, rows);
  }
  function exportLedger(){
    const cols = ["date","type","amount","note","matchId"];
    const rows = [cols.join(",")].concat(ledger.map(l => [
      new Date(l.date).toISOString(), l.type, l.amount, `"${(l.note||"").replace(/"/g,'""')}"`, l.matchId||''
    ].join(",")));
    expCSV(`ledger-${dateTag()}.csv`, rows);
  }
  return (
    <div className="text-sm space-x-2">
      <button onClick={exportMatches} className="px-3 py-2 rounded-xl border">Export Matches CSV</button>
      <button onClick={exportFines} className="px-3 py-2 rounded-xl border">Export Fines CSV</button>
      <button onClick={exportProposals} className="px-3 py-2 rounded-xl border">Export Proposals CSV</button>
      <button onClick={exportLedger} className="px-3 py-2 rounded-xl border">Export Ledger CSV</button>
    </div>
  );
}

/* =====================
 * ESCROW CONSOLE (minimal) — settle + auto‑Elo + ledger
 * ===================== */
function EscrowConsole(){
  const { matches, players, settleMatch } = useStore();
  const open = matches.filter(m=>!m.settled).slice(0,20);
  if (open.length===0) return <div className="text-sm text-muted-foreground">No open matches.</div>;
  return (
    <table className="w-full text-sm">
      <thead><tr><th className="text-left">Match</th><th className="text-left">Base</th><th className="text-left">Mode</th><th className="text-left">Settle</th></tr></thead>
      <tbody>
        {open.map(m => (
          <tr key={m.id} className="border-t">
            <td className="py-1">{fmtMatch(m, players)}</td>
            <td>${m.base}</td>
            <td>{m.mode==='extra_cash'?'1.2× Cash':'Weight'}</td>
            <td className="space-x-2">
              <button className="px-2 py-1 rounded-xl border" onClick={()=>settleMatch(m.id, { winner:'favorite' })}>Favorite won</button>
              <button className="px-2 py-1 rounded-xl border" onClick={()=>settleMatch(m.id, { winner:'challenger' })}>Challenger won</button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

/* =====================
 * Season Manager
 * ===================== */
function SeasonManager(){
  const { settings, setSettings, seasons, startNewSeason } = useStore();
  return (
    <div className="text-sm space-y-2">
      <div className="grid md:grid-cols-3 gap-3">
        <label className="text-xs block md:col-span-2">
          <div className="mb-1 font-medium">Current Season Start</div>
          <input type="datetime-local" value={settings.currentSeasonStart? toInputDate(settings.currentSeasonStart):''} onChange={(e)=>setSettings({ ...settings, currentSeasonStart: e.target.value? new Date(e.target.value).getTime(): null })} className="w-full border rounded-xl px-3 py-2" />
        </label>
        <button className="px-3 py-2 rounded-xl border" onClick={startNewSeason}>Close Season & Start New</button>
      </div>
      <div className="text-xs text-muted-foreground">Leaderboard points filter by current season; Elo carries over.</div>
      {seasons.length>0 && (
        <div className="mt-2">
          <div className="font-semibold mb-1">Past Seasons</div>
          <ul className="list-disc pl-5">
            {seasons.map(s => (
              <li key={s.id} className="text-xs">{new Date(s.startedAt).toLocaleDateString()} → {new Date(s.closedAt).toLocaleDateString()} (snapshot stored)</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

function toInputDate(ts){
  const d = new Date(ts); const pad = n=> String(n).padStart(2,'0');
  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
}

/* =====================
 * Events Manager (tournament + hustle)
 * ===================== */
function EventsManager(){
  const { events, setTournamentDate, setHustleRakePct, settings, setSettings } = useStore();
  const [dateStr, setDateStr] = useState(events.nextTournamentDate? toInputDate(events.nextTournamentDate): '');
  function saveDate(){ const t = dateStr? new Date(dateStr).getTime(): null; setTournamentDate(t); }
  return (
    <div className="text-sm space-y-3">
      <label className="text-xs block">
        <div className="mb-1 font-medium">Next Tournament Date</div>
        <input type="datetime-local" value={dateStr} onChange={(e)=>setDateStr(e.target.value)} className="w-full border rounded-xl px-3 py-2"/>
        <div className="text-xs text-muted-foreground">Hustle Night is auto‑scheduled 7 days before.</div>
      </label>
      <div className="grid md:grid-cols-3 gap-3">
        <NumberField label="Tournament Rake %" value={settings.tournamentRakePct} min={0} max={0.25} step={0.01} setValue={(v)=>setSettings({ ...settings, tournamentRakePct: Number(v) })} />
        <NumberField label="Hustle Rake %" value={events.hustleNightRakePct} min={0} max={0.25} step={0.01} setValue={(v)=>setHustleRakePct(Number(v))} />
        <button className="px-3 py-2 rounded-xl border" onClick={saveDate}>Save Dates</button>
      </div>
      <div className="rounded-xl border p-3 bg-gray-50">
        <div className="font-semibold mb-1">Kelly / Money‑Drop Controls</div>
        <div className="text-xs text-muted-foreground mb-2">Log per‑attempt entry fees; system will record rake to ledger.</div>
        <KellyControls />
      </div>
    </div>
  );
}

function KellyControls(){
  const { events, logLedger } = useStore();
  const [entry, setEntry] = useState(5);
  function logAttempt(){
    const rake = round2(entry * (events.hustleNightRakePct||0.05));
    if (rake>0) logLedger({ type: 'hustle_rake', amount: rake, note: `Kelly attempt entry $${entry}` });
    alert(`Logged Kelly attempt: entry $${entry}, rake $${rake}`);
  }
  return (
    <div className="flex gap-2 text-sm">
      <NumberField label="Entry ($)" value={entry} min={1} max={100} step={1} setValue={setEntry} />
      <div className="flex items-end">
        <button className="px-3 py-2 rounded-xl border" onClick={logAttempt}>Log Attempt</button>
      </div>
    </div>
  );
}

/* =====================
 * Quests Admin + Player Quests (lightweight)
 * ===================== */
function QuestsAdmin(){
  const { settings, setSettings } = useStore();
  return (
    <div className="text-sm grid md:grid-cols-3 gap-3">
      <NumberField label="# Operators" value={settings.operatorsCount} min={1} max={10} step={1} setValue={(v)=>setSettings({ ...settings, operatorsCount: Number(v) })} />
      <NumberField label="Target/Op Min ($)" value={settings.targetPerOperatorMin} min={0} max={1000} step={10} setValue={(v)=>setSettings({ ...settings, targetPerOperatorMin: Number(v) })} />
      <NumberField label="Target/Op Max ($)" value={settings.targetPerOperatorMax} min={0} max={2000} step={10} setValue={(v)=>setSettings({ ...settings, targetPerOperatorMax: Number(v) })} />
      <div className="md:col-span-3 text-xs text-muted-foreground">Targets are used by the Revenue Calculator to show green/OK when you’re in range.</div>
    </div>
  );
}

function PlayerQuests(){
  return (
    <div className="text-xs text-muted-foreground">Weekly quests coming soon (play new opponents, hill‑hill wins, stream bonuses). Operator can issue bounties on Kings or streakers.</div>
  );
}

/* =====================
 * Ledger Panel (recent)
 * ===================== */
function LedgerPanel(){
  const { ledger } = useStore();
  const rows = ledger.slice(0,12);
  if (rows.length===0) return <div className="text-sm text-muted-foreground">No revenue yet. Settle matches or log event rake.</div>;
  return (
    <table className="w-full text-sm">
      <thead><tr><th className="text-left">When</th><th className="text-left">Type</th><th className="text-left">Note</th><th className="text-left">Amount</th></tr></thead>
      <tbody>
        {rows.map(r => (
          <tr key={r.id} className="border-t">
            <td className="py-1">{new Date(r.date).toLocaleString()}</td>
            <td>{r.type}</td>
            <td className="truncate max-w-[240px]" title={r.note}>{r.note}</td>
            <td>${round2(r.amount)}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

/* =====================
 * Revenue Calculator (scenario planner)
 * ===================== */
function RevenueCalculator(){
  const { players, settings, setSettings } = useStore();
  const [playersCount, setPlayersCount] = useState(players.length || 20);
  const [matchesPerPlayer, setMatchesPerPlayer] = useState(2);
  const [ops, setOps] = useState(settings.operatorsCount||4);

  // Derived roster mix
  const proCount = players.filter(p=>p.pro).length || Math.round(playersCount*0.5);
  const basicCount = players.filter(p=>p.member && !p.pro).length || (playersCount - proCount - 0);
  const nonCount = players.filter(p=>!p.member).length || 0;

  const result = useMemo(()=>
    calcRevenue({
      playersCount,
      matchesPerPlayer,
      operatorsCount: ops,
      avgStakeBase: settings.avgStakeBase,
      fractionExtraCash: settings.fractionExtraCash,
      memberRate: settings.memberRate,
      proDiscount: settings.proDiscount,
      nonMemberRate: settings.nonMemberRate,
      nonMemberMatchFee: settings.nonMemberMatchFee,
      proCount, basicCount, nonCount,
      avgStreamsPerMonth: settings.avgStreamsPerMonth,
      streamFee: settings.streamFee,
      avgHighlightsPerMonth: settings.avgHighlightsPerMonth,
      highlightFee: settings.highlightFee,
      tournamentsPerMonth: settings.tournamentsPerMonth,
      tournamentEntryFee: settings.tournamentEntryFee,
      tournamentAvgEntries: settings.tournamentAvgEntries,
      tournamentRakePct: settings.tournamentRakePct,
      hustleNightMonthlyHandle: settings.hustleNightMonthlyHandle,
      hustleRakePct: settings.hustleRakePct,
      ghostAttemptsPerMonth: settings.ghostAttemptsPerMonth,
      ghostBuyIn: settings.ghostBuyIn,
      ghostRakePct: settings.ghostRakePct,
      nonMemberParticipantsPerMatch: settings.nonMemberParticipantsPerMatch,
    })
  ,[playersCount,matchesPerPlayer,ops,settings,proCount,basicCount,nonCount]);

  const ok = result.perOperator >= settings.targetPerOperatorMin && result.perOperator <= settings.targetPerOperatorMax;

  function applySuggestions(){
    const s = { ...settings, tournamentRakePct: result.suggest.tournamentRakePct, avgStreamsPerMonth: result.suggest.avgStreamsPerMonth, avgHighlightsPerMonth: result.suggest.avgHighlightsPerMonth };
    setSettings(s);
  }

  return (
    <div className="text-sm space-y-3">
      <div className="grid md:grid-cols-4 gap-3">
        <NumberField label="# Players" value={playersCount} min={10} max={200} step={1} setValue={setPlayersCount} />
        <NumberField label="Matches / Player / Mo" value={matchesPerPlayer} min={1} max={6} step={1} setValue={setMatchesPerPlayer} />
        <NumberField label="# Operators" value={ops} min={1} max={10} step={1} setValue={setOps} />
        <NumberField label="Avg Base Stake ($)" value={settings.avgStakeBase} min={50} max={300} step={5} setValue={(v)=>setSettings({ ...settings, avgStakeBase: Number(v) })} />
        <NumberField label="Cash‑mode share" value={settings.fractionExtraCash} min={0} max={1} step={0.05} setValue={(v)=>setSettings({ ...settings, fractionExtraCash: Number(v) })} />
        <NumberField label="Streams / mo" value={settings.avgStreamsPerMonth} min={0} max={60} step={1} setValue={(v)=>setSettings({ ...settings, avgStreamsPerMonth: Number(v) })} />
        <NumberField label="Highlights / mo" value={settings.avgHighlightsPerMonth} min={0} max={60} step={1} setValue={(v)=>setSettings({ ...settings, avgHighlightsPerMonth: Number(v) })} />
        <NumberField label="Tournament rake %" value={settings.tournamentRakePct} min={0} max={0.25} step={0.01} setValue={(v)=>setSettings({ ...settings, tournamentRakePct: Number(v) })} />
      </div>

      <div className={`rounded-xl border p-3 ${ok? 'bg-emerald-50 border-emerald-200':'bg-amber-50 border-amber-200'}`}>
        <div className="font-semibold">Per‑Operator: ${Math.round(result.perOperator)} {ok? '✅ Target hit':'⚠️ Below target'}</div>
        <div className="text-xs text-muted-foreground">Total monthly operator revenue: ${Math.round(result.total)} • Operators: {ops} • Target: ${settings.targetPerOperatorMin}–${settings.targetPerOperatorMax}</div>
      </div>

      {!ok && (
        <div className="rounded-xl border p-3">
          <div className="font-semibold mb-1">Suggestions to hit ${settings.targetPerOperatorMin}–${settings.targetPerOperatorMax} / operator</div>
          <ul className="list-disc pl-5 text-xs space-y-1">
            {result.suggest.text.map((t,i)=>(<li key={i}>{t}</li>))}
          </ul>
          <button className="mt-2 px-3 py-2 rounded-xl border" onClick={applySuggestions}>Apply Suggested Tweaks</button>
        </div>
      )}
    </div>
  );
}

function calcRevenue(opts){
  const {
    playersCount, matchesPerPlayer, operatorsCount,
    avgStakeBase, fractionExtraCash,
    memberRate, proDiscount, nonMemberRate, nonMemberMatchFee,
    proCount, basicCount, nonCount,
    avgStreamsPerMonth, streamFee, avgHighlightsPerMonth, highlightFee,
    tournamentsPerMonth, tournamentEntryFee, tournamentAvgEntries, tournamentRakePct,
    hustleNightMonthlyHandle, hustleRakePct,
    ghostAttemptsPerMonth, ghostBuyIn, ghostRakePct,
    nonMemberParticipantsPerMatch,
  } = opts;

  // Matches per month
  const matches = Math.round((playersCount * matchesPerPlayer) / 2);
  const expGrossPerMatch = avgStakeBase * (1 + 0.2 * fractionExtraCash); // 1.2× cash roughly adds 20% to a fraction of matches

  // Commission revenue (winner side only)
  const memberShare = (proCount + basicCount) / Math.max(1, playersCount);
  const proShare = proCount / Math.max(1, (proCount + basicCount));
  const effMemberRate = Math.max(0, memberRate - proDiscount * proShare);
  const avgRate = (memberShare * effMemberRate) + ((1 - memberShare) * nonMemberRate);
  const commission = matches * expGrossPerMatch * avgRate;

  // Non‑member match fees (per non‑member participant per match)
  const nonMemberFees = matches * (nonMemberParticipantsPerMatch || 0) * nonMemberMatchFee;

  // Membership revenue (monthly)
  const membership = (basicCount * 25) + (proCount * 40);

  // Streams & highlights
  const media = (avgStreamsPerMonth * streamFee) + (avgHighlightsPerMonth * highlightFee);

  // Tournament rake
  const tourneyRake = tournamentsPerMonth * tournamentEntryFee * tournamentAvgEntries * tournamentRakePct;

  // Hustle Night rake
  const hustleRake = hustleNightMonthlyHandle * hustleRakePct;

  // Ghost rake
  const ghostR = ghostAttemptsPerMonth * ghostBuyIn * (ghostRakePct||0);

  const total = commission + nonMemberFees + membership + media + tourneyRake + hustleRake + ghostR;
  const perOperator = total / Math.max(1, operatorsCount);

  // Suggestions (very lightweight heuristics)
  const suggest = { tournamentRakePct, avgStreamsPerMonth, avgHighlightsPerMonth, text: [] };
  if (perOperator < 350) {
    if (tournamentRakePct < 0.15) {
      suggest.tournamentRakePct = 0.15; suggest.text.push('Increase tournament rake to 15%.');
    }
    if (avgStreamsPerMonth < 16) { suggest.avgStreamsPerMonth = 16; suggest.text.push('Target ~16 livestreams per month (walk‑ins, hot seats, finals).'); }
    if (avgHighlightsPerMonth < 20) { suggest.avgHighlightsPerMonth = 20; suggest.text.push('Post ~20 highlights/month (players love reels).'); }
    suggest.text.push('Encourage Pro memberships (more $40 subs).');
    suggest.text.push('Promote Hustle Night to raise monthly handle.');
  }

  return { total, perOperator, suggest };
}
