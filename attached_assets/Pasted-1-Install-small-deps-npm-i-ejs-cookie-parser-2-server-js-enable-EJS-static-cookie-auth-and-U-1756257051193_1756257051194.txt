1) Install small deps
npm i ejs cookie-parser

2) server.js — enable EJS, static, cookie auth, and UI routes

Add these near the top (with your other requires):

const path = require("path");
const cookieParser = require("cookie-parser");


Add middleware + views + static:

app.use(cookieParser());
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
app.use("/static", express.static(path.join(__dirname, "public")));


Admin UI auth (separate from API header auth):

function requireAdminUI(req, res, next) {
  const key = req.cookies.admin_key;
  if (!process.env.ADMIN_API_KEY) return res.status(500).send("ADMIN_API_KEY not set");
  if (key === process.env.ADMIN_API_KEY) return next();
  return res.redirect("/admin/login");
}


Login/logout UI

app.get("/admin/login", (req, res) => {
  res.render("admin/login", { error: null });
});

app.post("/admin/login", express.urlencoded({ extended: false }), (req, res) => {
  const key = (req.body && req.body.key) || "";
  if (key === process.env.ADMIN_API_KEY) {
    // 7 days
    res.cookie("admin_key", key, { httpOnly: true, sameSite: "lax", maxAge: 7*24*3600*1000 });
    return res.redirect("/admin");
  }
  return res.render("admin/login", { error: "Invalid key" });
});

app.post("/admin/logout", requireAdminUI, (req, res) => {
  res.clearCookie("admin_key");
  res.redirect("/admin/login");
});


Dashboard

app.get("/admin", requireAdminUI, (req, res) => {
  const pendingApps = listOperatorApplications({ status: "pending" }).length;
  const activeLicenses = listOperatorLicenses({ status: "active" }).length;
  const openTournaments = listTournaments({ is_open: 1 }).length;
  const membersPro = listMembers({ role: "pro" }).length;
  const membersBasic = listMembers({ role: "basic" }).length;
  res.render("admin/index", {
    pendingApps, activeLicenses, openTournaments, membersPro, membersBasic
  });
});


Applications UI

app.get("/admin/applications", requireAdminUI, (req, res) => {
  const status = req.query.status || "pending";
  const rows = listOperatorApplications({ status });
  res.render("admin/applications", { rows, status, inviteCreated: null });
});

app.post("/admin/applications/:id/approve", requireAdminUI, (req, res) => {
  const id = Number(req.params.id);
  const decidedBy = "admin";
  const appRow = setOperatorApplicationStatus({ id, status: "approved", decidedBy });
  if (!appRow) return res.status(404).send("Application not found");

  upsertHall({ id: appRow.hall_id, name: appRow.hall_id });
  if (appRow.operator_user_id) upsertUser({ id: appRow.operator_user_id, email: appRow.email, display_name: appRow.name });

  const token = makeToken();
  const expiresAt = plusHoursEpoch(Number(process.env.INVITE_TTL_HOURS || 168));
  const operatorUserId = appRow.operator_user_id || (`OP_${require("crypto").randomBytes(6).toString("hex")}`);
  const invite = createOperatorInvite({ token, hallId: appRow.hall_id, operatorUserId, email: appRow.email, expiresAt });

  const inviteUrl = `${process.env.APP_URL}/operators/onboard?token=${token}`;
  const rows = listOperatorApplications({ status: "pending" });
  res.render("admin/applications", { rows, status: "pending", inviteCreated: { invite, inviteUrl } });
});

app.post("/admin/applications/:id/reject", requireAdminUI, (req, res) => {
  const id = Number(req.params.id);
  const decidedBy = "admin";
  const appRow = setOperatorApplicationStatus({ id, status: "rejected", decidedBy });
  if (!appRow) return res.status(404).send("Application not found");
  const rows = listOperatorApplications({ status: "pending" });
  res.render("admin/applications", { rows, status: "pending", inviteCreated: null });
});


Invites UI

app.get("/admin/invites", requireAdminUI, (req, res) => {
  const status = req.query.status || "";
  const rows = listOperatorInvites({ status: status || undefined });
  res.render("admin/invites", { rows, status });
});

app.post("/admin/invites/:token/revoke", requireAdminUI, (req, res) => {
  revokeOperatorInvite(req.params.token);
  res.redirect("/admin/invites");
});


Licenses UI

app.get("/admin/licenses", requireAdminUI, (req, res) => {
  const status = req.query.status || "";
  const rows = listOperatorLicenses({ status: status || undefined });
  res.render("admin/licenses", { rows, status });
});


Members UI

app.get("/admin/members", requireAdminUI, (req, res) => {
  const role = req.query.role || "";
  const status = req.query.status || "";
  const rows = listMembers({ role: role || undefined, status: status || undefined });
  res.render("admin/members", { rows, role, status });
});


Tournaments UI

app.get("/admin/tournaments", requireAdminUI, (req, res) => {
  const rows = listTournaments();
  res.render("admin/tournaments", { rows, entries: null, selected: null, message: null });
});

app.post("/admin/tournaments/upsert", requireAdminUI, express.urlencoded({ extended: false }), (req, res) => {
  const { id, hallId, name, maxSlots, isOpen } = req.body || {};
  if (!id) return res.status(400).send("id required");
  upsertTournament({ id, hall_id: hallId || null, name: name || null, max_slots: Number(maxSlots) || undefined, is_open: isOpen ? 1 : 0 });
  const rows = listTournaments();
  res.render("admin/tournaments", { rows, entries: null, selected: null, message: "Tournament saved" });
});

app.post("/admin/tournaments/:id/open", requireAdminUI, (req, res) => {
  setTournamentOpen(req.params.id, true);
  const rows = listTournaments();
  res.render("admin/tournaments", { rows, entries: null, selected: null, message: "Opened" });
});

app.post("/admin/tournaments/:id/close", requireAdminUI, (req, res) => {
  setTournamentOpen(req.params.id, false);
  const rows = listTournaments();
  res.render("admin/tournaments", { rows, entries: null, selected: null, message: "Closed" });
});

app.get("/admin/tournaments/:id/entries", requireAdminUI, (req, res) => {
  const id = req.params.id;
  const rows = listTournaments();
  const entries = listEntries(id);
  res.render("admin/tournaments", { rows, entries, selected: id, message: null });
});

app.post("/admin/tournaments/refund", requireAdminUI, express.urlencoded({ extended: false }), async (req, res) => {
  try {
    const { tournamentId, userId } = req.body || {};
    if (!tournamentId || !userId) return res.status(400).send("tournamentId and userId required");
    const entry = getEntry(tournamentId, userId);
    if (!entry) return res.status(404).send("entry not found");
    if (entry.status === "comped") {
      db.prepare("UPDATE tournament_entries SET status='refunded' WHERE tournament_id=? AND user_id=?").run(tournamentId, userId);
    } else {
      if (!entry.stripe_payment_intent_id) return res.status(400).send("no payment intent id");
      await stripe.refunds.create({ payment_intent: entry.stripe_payment_intent_id, reason: "requested_by_customer" });
      db.prepare("UPDATE tournament_entries SET status='refunded' WHERE tournament_id=? AND user_id=?").run(tournamentId, userId);
    }
    const rows = listTournaments();
    const entries = listEntries(tournamentId);
    res.render("admin/tournaments", { rows, entries, selected: tournamentId, message: "Refunded" });
  } catch (e) {
    console.error(e);
    res.status(400).send(e.message);
  }
});


Contact inbox UI (only if you added the contact table/routes earlier)

app.get("/admin/contact", requireAdminUI, (req, res) => {
  const rows = listContacts();
  res.render("admin/contact", { rows });
});

3) db.js — add small list helpers for tournaments & licenses

Append these (below your existing helpers) and export them:

function listTournaments({ is_open } = {}) {
  let sql = "SELECT * FROM tournaments WHERE 1=1";
  const args = [];
  if (typeof is_open !== "undefined") { sql += " AND is_open = ?"; args.push(is_open ? 1 : 0); }
  sql += " ORDER BY created_at DESC";
  return db.prepare(sql).all(...args);
}

function listOperatorLicenses({ status } = {}) {
  let sql = "SELECT * FROM operator_licenses WHERE 1=1";
  const args = [];
  if (status) { sql += " AND status = ?"; args.push(status); }
  sql += " ORDER BY current_period_end DESC NULLS LAST";
  return db.prepare(sql).all(...args);
}

module.exports.listTournaments = listTournaments;
module.exports.listOperatorLicenses = listOperatorLicenses;

4) Views — create these files

Folder structure

/views
  /admin
    layout.ejs
    login.ejs
    index.ejs
    applications.ejs
    invites.ejs
    licenses.ejs
    members.ejs
    tournaments.ejs
    contact.ejs        (optional if using inbox)


views/admin/layout.ejs

<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Action Ladder Admin</title>
  <link rel="stylesheet" href="/static/admin.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
<header class="topbar">
  <div class="brand">🎱 Action Ladder — Admin</div>
  <nav>
    <a href="/admin">Dashboard</a>
    <a href="/admin/applications">Applications</a>
    <a href="/admin/invites">Invites</a>
    <a href="/admin/licenses">Licenses</a>
    <a href="/admin/members">Members</a>
    <a href="/admin/tournaments">Tournaments</a>
    <a href="/admin/contact">Contact</a>
    <form method="post" action="/admin/logout" style="display:inline"><button class="link">Logout</button></form>
  </nav>
</header>
<main class="container">
  <%- body %>
</main>
</body>
</html>


views/admin/login.ejs

<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Admin Login</title>
  <link rel="stylesheet" href="/static/admin.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body class="loginpage">
  <form class="card login" method="post" action="/admin/login">
    <h1>Admin Login</h1>
    <% if (error) { %><div class="error"><%= error %></div><% } %>
    <label>Admin Key</label>
    <input type="password" name="key" placeholder="Paste ADMIN_API_KEY" required />
    <button type="submit">Enter</button>
  </form>
</body>
</html>


views/admin/index.ejs

<% layout('admin/layout') -%>
<section class="grid-4">
  <div class="card stat"><div class="k">Pending Apps</div><div class="v"><%= pendingApps %></div></div>
  <div class="card stat"><div class="k">Active Licenses</div><div class="v"><%= activeLicenses %></div></div>
  <div class="card stat"><div class="k">Open Tournaments</div><div class="v"><%= openTournaments %></div></div>
  <div class="card stat"><div class="k">Members (Pro/Basic)</div><div class="v"><%= membersPro %> / <%= membersBasic %></div></div>
</section>
<section class="card">
  <h2>Quick Links</h2>
  <ul class="links">
    <li><a href="/admin/applications">Review Applications →</a></li>
    <li><a href="/admin/tournaments">Manage Tournaments →</a></li>
    <li><a href="/admin/members">View Members / Export CSV →</a></li>
    <li><a href="/admin/invites">Operator Invites →</a></li>
  </ul>
</section>


views/admin/applications.ejs

<% layout('admin/layout') -%>
<h1>Operator Applications</h1>

<form class="row" method="get">
  <label>Status</label>
  <select name="status" onchange="this.form.submit()">
    <option value="pending" <%= status==='pending'?'selected':'' %>>pending</option>
    <option value="approved" <%= status==='approved'?'selected':'' %>>approved</option>
    <option value="rejected" <%= status==='rejected'?'selected':'' %>>rejected</option>
  </select>
</form>

<% if (inviteCreated) { %>
<div class="notice">
  Invite created for <strong><%= inviteCreated.invite.email || '(no email)' %></strong><br/>
  <code><%= inviteCreated.inviteUrl %></code>
  <button onclick="navigator.clipboard.writeText('<%= inviteCreated.inviteUrl %>')">Copy</button>
</div>
<% } %>

<table class="table">
  <thead><tr><th>ID</th><th>Hall</th><th>Name</th><th>Email</th><th>Phone</th><th>Msg</th><th>Actions</th></tr></thead>
  <tbody>
  <% rows.forEach(r => { %>
    <tr>
      <td><%= r.id %></td>
      <td><%= r.hall_id %></td>
      <td><%= r.name || '' %></td>
      <td><%= r.email || '' %></td>
      <td><%= r.phone || '' %></td>
      <td class="wrap"><%= r.message || '' %></td>
      <td class="actions">
        <% if (r.status === 'pending') { %>
          <form method="post" action="/admin/applications/<%= r.id %>/approve"><button>Approve → Invite</button></form>
          <form method="post" action="/admin/applications/<%= r.id %>/reject"><button class="danger">Reject</button></form>
        <% } else { %>
          <span class="chip"><%= r.status %></span>
        <% } %>
      </td>
    </tr>
  <% }) %>
  </tbody>
</table>


views/admin/invites.ejs

<% layout('admin/layout') -%>
<h1>Operator Invites</h1>
<form class="row" method="get">
  <label>Status</label>
  <select name="status" onchange="this.form.submit()">
    <option value="" <%= status===''?'selected':'' %>>all</option>
    <option value="issued" <%= status==='issued'?'selected':'' %>>issued</option>
    <option value="used" <%= status==='used'?'selected':'' %>>used</option>
    <option value="revoked" <%= status==='revoked'?'selected':'' %>>revoked</option>
  </select>
</form>

<table class="table">
  <thead><tr><th>Token</th><th>Hall</th><th>Operator</th><th>Email</th><th>Status</th><th>Expires</th><th>Actions</th></tr></thead>
  <tbody>
  <% rows.forEach(r => { %>
    <tr>
      <td class="wrap"><code><%= r.token %></code></td>
      <td><%= r.hall_id %></td>
      <td><%= r.operator_user_id %></td>
      <td><%= r.email || '' %></td>
      <td><span class="chip <%= r.status %>"><%= r.status %></span></td>
      <td><%= new Date((r.expires_at||0)*1000).toLocaleString() %></td>
      <td>
        <% if (r.status === 'issued') { %>
          <form method="post" action="/admin/invites/<%= r.token %>/revoke"><button class="danger">Revoke</button></form>
        <% } %>
      </td>
    </tr>
  <% }) %>
  </tbody>
</table>


views/admin/licenses.ejs

<% layout('admin/layout') -%>
<h1>Operator Licenses</h1>
<form class="row" method="get">
  <label>Status</label>
  <select name="status" onchange="this.form.submit()">
    <option value="" <%= status===''?'selected':'' %>>all</option>
    <option value="active" <%= status==='active'?'selected':'' %>>active</option>
    <option value="past_due" <%= status==='past_due'?'selected':'' %>>past_due</option>
    <option value="canceled" <%= status==='canceled'?'selected':'' %>>canceled</option>
    <option value="trialing" <%= status==='trialing'?'selected':'' %>>trialing</option>
  </select>
</form>

<table class="table">
  <thead><tr><th>Hall</th><th>Operator</th><th>Status</th><th>Customer</th><th>Sub</th><th>Period End</th></tr></thead>
  <tbody>
  <% rows.forEach(r => { %>
    <tr>
      <td><%= r.hall_id %></td>
      <td><%= r.operator_user_id %></td>
      <td><span class="chip <%= r.status %>"><%= r.status %></span></td>
      <td class="mono"><%= r.stripe_customer_id || '' %></td>
      <td class="mono"><%= r.stripe_subscription_id || '' %></td>
      <td><%= r.current_period_end ? new Date(r.current_period_end*1000).toLocaleString() : '' %></td>
    </tr>
  <% }) %>
  </tbody>
</table>


views/admin/members.ejs

<% layout('admin/layout') -%>
<h1>Members</h1>
<form class="row" method="get">
  <label>Role</label>
  <select name="role">
    <option value="" <%= role===''?'selected':'' %>>all</option>
    <option value="pro" <%= role==='pro'?'selected':'' %>>pro</option>
    <option value="basic" <%= role==='basic'?'selected':'' %>>basic</option>
    <option value="nonmember" <%= role==='nonmember'?'selected':'' %>>nonmember</option>
  </select>

  <label>Status</label>
  <select name="status">
    <option value="" <%= status===''?'selected':'' %>>all</option>
    <option value="active" <%= status==='active'?'selected':'' %>>active</option>
    <option value="past_due" <%= status==='past_due'?'selected':'' %>>past_due</option>
    <option value="canceled" <%= status==='canceled'?'selected':'' %>>canceled</option>
    <option value="trialing" <%= status==='trialing'?'selected':'' %>>trialing</option>
  </select>

  <button type="submit">Filter</button>
  <a class="button" href="/api/admin/members.csv<%= role||status ? ('?'+new URLSearchParams({role, status}).toString()) : '' %>" target="_blank">Export CSV</a>
</form>

<table class="table">
  <thead><tr><th>ID</th><th>Name</th><th>Email</th><th>Role</th><th>Status</th><th>Period End</th><th>Customer</th></tr></thead>
  <tbody>
  <% rows.forEach(r => { %>
    <tr>
      <td class="mono"><%= r.id %></td>
      <td><%= r.display_name || '' %></td>
      <td><%= r.email || '' %></td>
      <td><span class="chip <%= r.role %>"><%= r.role %></span></td>
      <td><%= r.membership_status || '' %></td>
      <td><%= r.current_period_end ? new Date(r.current_period_end*1000).toLocaleString() : '' %></td>
      <td class="mono"><%= r.stripe_customer_id || '' %></td>
    </tr>
  <% }) %>
  </tbody>
</table>


views/admin/tournaments.ejs

<% layout('admin/layout') -%>
<h1>Tournaments</h1>

<section class="card">
  <h2>Create / Update</h2>
  <form method="post" action="/admin/tournaments/upsert" class="grid-4">
    <label>ID <input name="id" placeholder="TOURNEY_2025_09_01" required/></label>
    <label>Hall ID <input name="hallId" placeholder="SEG_WINNERS"/></label>
    <label>Name <input name="name" placeholder="Fight Night"/></label>
    <label>Max Slots <input name="maxSlots" type="number" min="2" value="32"/></label>
    <label class="row"><input type="checkbox" name="isOpen" checked/> Open</label>
    <button type="submit">Save</button>
  </form>
  <% if (message) { %><div class="notice"><%= message %></div><% } %>
</section>

<section class="grid-2">
  <div class="card">
    <h3>All Tournaments</h3>
    <table class="table">
      <thead><tr><th>ID</th><th>Name</th><th>Hall</th><th>Max</th><th>Open</th><th>Actions</th></tr></thead>
      <tbody>
      <% rows.forEach(t => { %>
        <tr>
          <td><%= t.id %></td>
          <td><%= t.name || '' %></td>
          <td><%= t.hall_id || '' %></td>
          <td><%= t.max_slots %></td>
          <td><%= t.is_open ? 'Yes' : 'No' %></td>
          <td class="actions">
            <a class="button small" href="/admin/tournaments/<%= t.id %>/entries">Entries</a>
            <% if (t.is_open) { %>
              <form method="post" action="/admin/tournaments/<%= t.id %>/close"><button class="danger small">Close</button></form>
            <% } else { %>
              <form method="post" action="/admin/tournaments/<%= t.id %>/open"><button class="small">Open</button></form>
            <% } %>
          </td>
        </tr>
      <% }) %>
      </tbody>
    </table>
  </div>

  <div class="card">
    <h3>Entries <%= selected ? ('for ' + selected) : '' %></h3>
    <% if (!entries) { %>
      <p>Select a tournament → “Entries”.</p>
    <% } else if (!entries.length) { %>
      <p>No entries yet.</p>
    <% } else { %>
      <table class="table">
        <thead><tr><th>User</th><th>Amount</th><th>Status</th><th>Payment Intent</th><th>Actions</th></tr></thead>
        <tbody>
        <% entries.forEach(e => { %>
          <tr>
            <td class="mono"><%= e.user_id %></td>
            <td>$<%= (e.amount_cents/100).toFixed(2) %></td>
            <td><span class="chip <%= e.status %>"><%= e.status %></span></td>
            <td class="mono"><%= e.stripe_payment_intent_id || '' %></td>
            <td>
              <% if (e.status === 'paid') { %>
                <form method="post" action="/admin/tournaments/refund">
                  <input type="hidden" name="tournamentId" value="<%= selected %>" />
                  <input type="hidden" name="userId" value="<%= e.user_id %>" />
                  <button class="danger small">Refund</button>
                </form>
              <% } %>
            </td>
          </tr>
        <% }) %>
        </tbody>
      </table>
    <% } %>
  </div>
</section>


views/admin/contact.ejs (optional)

<% layout('admin/layout') -%>
<h1>Contact Inbox</h1>
<table class="table">
  <thead><tr><th>When</th><th>From</th><th>Subject</th><th>Body</th></tr></thead>
  <tbody>
  <% rows.forEach(r => { %>
    <tr>
      <td><%= new Date(r.created_at*1000).toLocaleString() %></td>
      <td><%= r.from_email || '' %></td>
      <td><%= r.subject || '' %></td>
      <td class="wrap"><%= r.body || '' %></td>
    </tr>
  <% }) %>
  </tbody>
</table>

5) Minimal CSS — public/admin.css

Create public/admin.css:

:root { --bg:#0b0c10; --card:#14161a; --text:#f5f7fa; --muted:#a9b2bf; --accent:#6ee7ff; --danger:#ff6b6b; --ok:#8df7a8; }
*{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu}
a{color:var(--accent);text-decoration:none}
.container{max-width:1200px;margin:24px auto;padding:0 16px}
.topbar{display:flex;gap:16px;align-items:center;justify-content:space-between;background:#101216;padding:12px 16px;border-bottom:1px solid #222}
.topbar .brand{font-weight:700}
.topbar nav a,.topbar nav .link{margin-right:12px}
.card{background:var(--card);border:1px solid #222;border-radius:12px;padding:16px;margin-bottom:16px}
.table{width:100%;border-collapse:collapse}
.table th,.table td{border-bottom:1px solid #222;padding:8px;vertical-align:top}
.table .actions form{display:inline}
input,select,button{background:#0f1115;border:1px solid #2a2e35;color:var(--text);border-radius:8px;padding:8px}
button{cursor:pointer}
button.danger{background:#2a0f10;border-color:#4a1c1f;color:#ffb3b3}
button.small{padding:6px 10px;font-size:12px}
.row{display:flex;gap:12px;align-items:center;margin:8px 0}
.grid-2{display:grid;grid-template-columns:1fr 1fr;gap:16px}
.grid-4{display:grid;grid-template-columns:repeat(4,1fr);gap:16px}
.stat .k{color:var(--muted);font-size:12px}
.stat .v{font-size:28px;font-weight:700}
.chip{padding:2px 8px;border:1px solid #333;border-radius:999px}
.chip.active{border-color:var(--ok)}
.chip.past_due,.chip.danger{border-color:var(--danger);color:#ffb3b3}
.mono{font-family:ui-monospace,Menlo,Consolas,monospace}
.wrap{max-width:420px;word-wrap:break-word;white-space:pre-wrap}
.notice{background:#0e1a1a;border:1px solid #1e2f31;color:#c8fbff;padding:10px;border-radius:8px;margin:10px 0}
.loginpage{display:flex;align-items:center;justify-content:center;height:100vh}
.card.login{width:360px}
.links li{margin:6px 0}

6) How to use it (flow)

Set ADMIN_API_KEY and APP_URL in .env.

Start your server (npm run dev).

Visit /admin/login, paste your admin key, submit.

Use the top nav:

Applications → Approve (auto-generates invite URL) or Reject.

Invites → Revoke tokens.

Licenses → See status synced via Stripe webhooks.

Members → Filter/view; Export CSV link uses the JSON/CSV endpoints you already have.

Tournaments → Create/update/open/close; view entries; Refund button works for paid entries.

Contact → Read messages if you enabled the inbox.