Action Ladder – Training Incentive Engine (backend + Ui)
· typescript
// ================================
      if(activeCounts.every(c=> c._count>=5)) rewardType='free';
    }


    await prisma.subscriptionReward.upsert({
      where:{ playerId_hallId_ladderId_period:{ playerId:top.playerId, hallId:top.hallId, ladderId:top.ladderId, period }},
      update:{ rewardType },
      create:{ playerId:top.playerId, hallId:top.hallId, ladderId:top.ladderId, period, rewardType }
    });
  }
}


export async function applyStripeRewards(period: string){
  const rewards = await prisma.subscriptionReward.findMany({ where:{ period, appliedToStripe:false }, include:{ player:true } });
  for(const r of rewards){
    const coupon = r.rewardType==='free'? env.STRIPE_COUPON_FREE:env.STRIPE_COUPON_HALF;
    if(r.player.stripeSubscriptionId){
      await applyCoupon(r.player.stripeSubscriptionId, coupon);
      await prisma.subscriptionReward.update({ where:{ id:r.id }, data:{ appliedToStripe:true, appliedDate:new Date() } });
    }
  }
}


// ================================
// src/seed/seedSessions.ts
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();
(async()=>{
  const player = await prisma.player.create({ data:{ name:'Tyga Hoodz', hallId:'ChalkCity', email:'tyga@ladder.net' }});
  const ladder = await prisma.ladder.create({ data:{ hallId:'ChalkCity', name:'Pro' }});
  await prisma.ladderMembership.create({ data:{ playerId:player.id, ladderId:ladder.id }});
  for(let i=0;i<10;i++){
    await prisma.sessionAnalytics.create({ data:{ playerId:player.id, hallId:'ChalkCity', ladderId:ladder.id, date:new Date(), coachScore:80+Math.random()*10, hours:2, win:true }});
  }
  console.log('Seeded sessions');
})();


// ================================
// tests/postman/ActionLadderRewards.postman_collection.json
{
  "info": { "name": "Action Ladder Rewards API", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" },
  "item": [
    {
      "name": "Leaderboard",
      "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/hall/ChalkCity/training-leaderboard?month=2025-10" } }
    },
    {
      "name": "Run Monthly Rewards",
      "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/api/rewards/run-monthly" }, "body": { "mode":"raw", "raw": "{\"period\":\"2025-10\"}" } }
    }
  ]
}


// ================================
// src/index.ts
import express from 'express';
import bodyParser from 'body-parser';
import leaderboardRoutes from './routes/leaderboard';
import rewardsRoutes from './routes/rewards';
import cron from 'node-cron';
import { aggregateMonth } from './services/leaderboardService';
import { computeRewards, applyStripeRewards } from './services/rewardService';


const app = express();
app.use(bodyParser.json());
app.use('/api', leaderboardRoutes);
app.use('/api', rewardsRoutes);


cron.schedule('0 3 1 * *', async ()=>{
  const period = new Date().toISOString().slice(0,7);
  await aggregateMonth(period);
  await computeRewards(period);
  await applyStripeRewards(period);
  console.log(`[CRON] Applied monthly rewards for ${period}`);
});


app.listen(8080, ()=> console.log('Action Ladder Incentive Engine (Prisma) running on :8080'));