import React, { useMemo, useState, useEffect, useContext, createContext } from "react";
import { BrowserRouter, Routes, Route, NavLink, Navigate, useNavigate } from "react-router-dom";
import Rulebook from "./Rulebook";
import LadderStakesRule from "./LadderStakesRule";
import MistakeLab from "./MistakeLab";

/* =====================================================
 * AUTH LAYER (Players vs Operators) — demo/localStorage
 * Replace with real backend/JWT later.
 * ===================================================== */
const AuthCtx = createContext(null);

function AuthProvider({ children }) {
  const [user, setUser] = useState(() => {
    try { return JSON.parse(localStorage.getItem("tri_auth_user") || "null"); } catch { return null; }
  });
  useEffect(() => { localStorage.setItem("tri_auth_user", JSON.stringify(user)); }, [user]);

  const login = (role, name) => setUser({ role, name: name || (role === "operator" ? "Operator" : "Player") });
  const logout = () => setUser(null);

  const value = useMemo(() => ({ user, login, logout }), [user]);
  return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>;
}
function useAuth() { return useContext(AuthCtx); }

function ProtectedRoute({ role, children }) {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" replace />;
  if (role && user.role !== role) return <Navigate to="/" replace />;
  return children;
}

/* =====================================================
 * OPERATOR STORE — demo state persisted to localStorage
 * players, matches, fines, settings
 * ===================================================== */
const StoreCtx = createContext(null);
function useLocalState(key, fallback) {
  const [s, setS] = useState(() => {
    try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; } catch { return fallback; }
  });
  useEffect(() => { localStorage.setItem(key, JSON.stringify(s)); }, [key, s]);
  return [s, setS];
}

function StoreProvider({ children }) {
  const [players, setPlayers] = useLocalState("tri_players", []);
  const [matches, setMatches] = useLocalState("tri_matches", []);
  const [fines, setFines] = useLocalState("tri_fines", []);
  const [settings, setSettings] = useLocalState("tri_ops_settings", {
    memberRate: 0.05,
    nonMemberRate: 0.15,
    proDiscount: 0, // e.g. 0.02 → Pro members 3%
  });

  const addPlayer = (name) => {
    const id = uid();
    setPlayers((p) => [{ id, name, member: true, pro: false, walkin: "", notes: "" }, ...p]);
  };
  const updatePlayer = (id, patch) => setPlayers((ps) => ps.map((p) => (p.id === id ? { ...p, ...patch } : p)));
  const removePlayer = (id) => setPlayers((ps) => ps.filter((p) => p.id !== id));

  const addMatch = (m) => setMatches((ms) => [{ id: uid(), createdAt: Date.now(), status: "scheduled", ...m }, ...ms]);
  const updateMatch = (id, patch) => setMatches((ms) => ms.map((m) => (m.id === id ? { ...m, ...patch } : m)));
  const removeMatch = (id) => setMatches((ms) => ms.filter((m) => m.id !== id));

  const addFine = (fine) => setFines((fs) => [{ id: uid(), date: Date.now(), ...fine }, ...fs]);
  const removeFine = (id) => setFines((fs) => fs.filter((f) => f.id !== id));

  const value = useMemo(() => ({ players, matches, fines, settings, setSettings, addPlayer, updatePlayer, removePlayer, addMatch, updateMatch, removeMatch, addFine, removeFine }), [players, matches, fines, settings]);
  return <StoreCtx.Provider value={value}>{children}</StoreCtx.Provider>;
}
function useStore() { return useContext(StoreCtx); }

/* =====================================================
 * APP SHELL + ROUTES
 * ===================================================== */
export default function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <StoreProvider>
          <div className="min-h-screen bg-white text-gray-900">
            <Nav />
            <main className="mx-auto w-full max-w-6xl p-4 md:p-8">
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<LoginPage />} />

                {/* Player area */}
                <Route path="/player" element={<ProtectedRoute><PlayerDashboard /></ProtectedRoute>} />

                {/* Operator area */}
                <Route path="/operator" element={<ProtectedRoute role="operator"><OperatorDashboard /></ProtectedRoute>} />

                {/* Shared pages */}
                <Route path="/rulebook" element={<Rulebook />} />
                <Route path="/stakes" element={<LadderStakesRule />} />
                <Route path="/film-room" element={<MistakeLab />} />
                <Route path="/money" element={<MoneyRulesPage />} />
                <Route path="/transparency" element={<PlayerTransparencyPage />} />
                <Route path="/pots" element={<PotsAndJackpotsPage />} />
                <Route path="/fines" element={<FinesPage />} />
                <Route path="/streams" element={<StreamsAndHypePage />} />
                <Route path="/disputes" element={<DisputesAndSchedulingPage />} />
                <Route path="*" element={<NotFound />} />
              </Routes>
            </main>
            <Footer />
          </div>
        </StoreProvider>
      </AuthProvider>
    </BrowserRouter>
  );
}

function Nav() {
  const { user, logout } = useAuth();
  const link = ({ isActive }) => `px-3 py-2 rounded-xl text-sm ${isActive ? "bg-black text-white" : "hover:bg-gray-100"}`;
  return (
    <header className="border-b">
      <div className="mx-auto max-w-6xl p-4 flex items-center justify-between gap-3">
        <div className="font-extrabold tracking-tight text-lg">🎱 Tri‑City Texas Ladder</div>
        <nav className="flex flex-wrap gap-2 items-center">
          <NavLink to="/" className={link} end>Home</NavLink>
          <NavLink to="/rulebook" className={link}>Rulebook</NavLink>
          <NavLink to="/stakes" className={link}>Stakes</NavLink>
          <NavLink to="/film-room" className={link}>Mistake Lab</NavLink>
          {user && user.role === "operator" && (
            <NavLink to="/operator" className={link}>Operator</NavLink>
          )}
          {user && user.role !== "operator" && (
            <NavLink to="/player" className={link}>My Player</NavLink>
          )}
          {!user ? (
            <NavLink to="/login" className={link}>Log in</NavLink>
          ) : (
            <button onClick={logout} className="px-3 py-2 rounded-xl text-sm hover:bg-gray-100">Logout ({user.role})</button>
          )}
        </nav>
      </div>
    </header>
  );
}

function Home() {
  const { user } = useAuth();
  return (
    <div className="space-y-4">
      <h1 className="text-3xl md:text-4xl font-extrabold">Pool • Points • Pride • Payouts</h1>
      <p className="text-sm text-muted-foreground max-w-prose">
        Welcome to the only ladder where pool feels like UFC, casino night, and a comedy roast. Grab the rulebook, lock stakes, and hit the Film Room to turn L's into levels.
      </p>
      <ul className="grid md:grid-cols-3 gap-3">
        <HomeCard title="Read the Rulebook" to="/rulebook"/>
        <HomeCard title="Lock Stakes" to="/stakes"/>
        <HomeCard title="Mistake Lab" to="/film-room"/>
        <HomeCard title="Money Rules" to="/money"/>
        <HomeCard title="Disputes & Scheduling" to="/disputes"/>
        {user?.role === "operator" ? (
          <HomeCard title="Operator Dashboard" to="/operator"/>
        ) : (
          <HomeCard title="My Player Dashboard" to="/player"/>
        )}
      </ul>
    </div>
  );
}

function HomeCard({ title, to }) {
  return (
    <li>
      <NavLink to={to} className="block rounded-2xl border p-4 hover:shadow-sm">
        <div className="font-semibold">{title}</div>
        <div className="text-xs text-muted-foreground">Open</div>
      </NavLink>
    </li>
  );
}

function Footer() {
  return (
    <footer className="border-t mt-8">
      <div className="mx-auto max-w-6xl p-4 text-xs text-muted-foreground">
        © {new Date().getFullYear()} Tri‑City Texas Ladder — Fight‑night pool, savage transparency.
      </div>
    </footer>
  );
}

/* =====================
 * LOGIN PAGE
 * ===================== */
function LoginPage() {
  const { user, login } = useAuth();
  const nav = useNavigate();
  const [role, setRole] = useState("player");
  const [name, setName] = useState("");
  const [opCode, setOpCode] = useState("");
  useEffect(() => { if (user) nav("/", { replace: true }); }, [user]);

  function submit(e) {
    e.preventDefault();
    if (role === "operator") {
      if (opCode.trim() !== "OP-TRICITY-🔥") { alert("Invalid operator code"); return; }
      login("operator", name || "Operator");
      nav("/operator");
    } else {
      login("player", name || "Player");
      nav("/player");
    }
  }

  return (
    <div className="max-w-md mx-auto rounded-2xl border p-6 shadow-sm">
      <h1 className="text-2xl font-bold mb-3">Log in</h1>
      <form onSubmit={submit} className="space-y-3">
        <label className="block">
          <div className="text-sm font-medium">Role</div>
          <select value={role} onChange={(e) => setRole(e.target.value)} className="w-full border rounded-xl px-3 py-2">
            <option value="player">Player</option>
            <option value="operator">Operator</option>
          </select>
        </label>
        <label className="block">
          <div className="text-sm font-medium">Display name</div>
          <input value={name} onChange={(e) => setName(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="Tyga Hoodz" />
        </label>
        {role === "operator" && (
          <label className="block">
            <div className="text-sm font-medium">Operator code</div>
            <input value={opCode} onChange={(e) => setOpCode(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="OP-TRICITY-🔥" />
            <div className="text-xs text-muted-foreground mt-1">Demo code: <code>OP-TRICITY-🔥</code> — replace with real auth later.</div>
          </label>
        )}
        <button className="w-full px-3 py-2 rounded-xl bg-black text-white">Enter</button>
      </form>
    </div>
  );
}

/* =====================
 * PLAYER DASHBOARD
 * ===================== */
function PlayerDashboard() {
  const { players, matches } = useStore();
  const { user } = useAuth();
  const me = players.find((p) => p.name === user?.name) || null;
  const upcoming = matches.filter((m) => !m.settled).slice(0, 6);
  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">Player Dashboard</h2>
      <div className="rounded-2xl border p-4">
        <div className="text-sm">Welcome, <span className="font-semibold">{user?.name}</span>. Film your sets and analyze them in the Mistake Lab. 💪</div>
        {!me && <div className="text-xs text-red-600 mt-1">(Ask an operator to add you to the roster to enable more features.)</div>}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-2">Upcoming / Recent Matches</div>
        {upcoming.length === 0 ? (
          <div className="text-sm text-muted-foreground">No matches yet. Call out someone 1–2 spots above you.</div>
        ) : (
          <table className="w-full text-sm">
            <thead><tr><th className="text-left">When</th><th className="text-left">Favorite</th><th className="text-left">Challenger</th><th className="text-left">Base</th><th className="text-left">Mode</th><th className="text-left">Status</th></tr></thead>
            <tbody>
              {upcoming.map((m) => (
                <tr key={m.id} className="border-t">
                  <td className="py-1">{m.date ? new Date(m.date).toLocaleString() : "TBD"}</td>
                  <td>{nameOf(m.favoriteId)}</td>
                  <td>{nameOf(m.challengerId)}</td>
                  <td>${m.base}</td>
                  <td>{m.mode === "extra_cash" ? "More Cash (1.2×)" : "Give Weight"}</td>
                  <td>{m.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-1">Film Room</div>
        <NavLink to="/film-room" className="underline text-blue-600 text-sm">Open Mistake Lab →</NavLink>
      </div>
    </div>
  );
}

/* =====================
 * OPERATOR DASHBOARD
 * ===================== */
function OperatorDashboard() {
  const { players, settings } = useStore();
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Operator Dashboard</h2>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Commission & Membership Settings</h3>
          <CommissionSettings />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Player Roster</h3>
          <PlayerManager />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Create / Schedule Match</h3>
          <MatchCreator />
          <div className="mt-4 rounded-xl border p-3 bg-gray-50">
            <div className="text-sm font-semibold mb-1">Lock Handicap Path</div>
            <div className="text-xs text-muted-foreground mb-2">Embed the stakes widget below to decide Give Weight vs More Cash (1.2×).</div>
            <LadderStakesRule />
          </div>
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Escrow Console & Settlement</h3>
          <EscrowConsole />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Fines & Penalties</h3>
          <FinesManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Reports / Export</h3>
          <ReportsExporter />
        </div>
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Streaming & Walk‑in Songs</h3>
        <StreamManager />
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Revenue Calculator</h3>
        <RevenueCalculator />
      </div>

      <div className="text-xs text-muted-foreground">* Demo data persists locally. Replace with backend CRUD when ready.</div>
    </div>
  );
}

/* ===== Operator Widgets ===== */
function CommissionSettings() {
  const { settings, setSettings } = useStore();
  return (
    <div className="grid md:grid-cols-3 gap-3 text-sm">
      <NumberField label="Member Commission" value={settings.memberRate} min={0} max={0.2} step={0.005} setValue={(v) => setSettings({ ...settings, memberRate: Number(v) })} />
      <NumberField label="Non‑Member Commission" value={settings.nonMemberRate} min={0} max={0.3} step={0.005} setValue={(v) => setSettings({ ...settings, nonMemberRate: Number(v) })} />
      <NumberField label="Pro Discount" value={settings.proDiscount} min={0} max={0.05} step={0.005} setValue={(v) => setSettings({ ...settings, proDiscount: Number(v) })} />
      <div className="text-xs text-muted-foreground md:col-span-3">Commission is taken from winner payout. Pro discount lowers member rate.</div>
    </div>
  );
}

function PlayerManager() {
  const { players, addPlayer, updatePlayer, removePlayer } = useStore();
  const [name, setName] = useState("");
  return (
    <div className="text-sm space-y-3">
      <div className="flex gap-2">
        <input value={name} onChange={(e) => setName(e.target.value)} placeholder="Player name" className="border rounded-xl px-3 py-2 flex-1" />
        <button className="px-3 py-2 rounded-xl bg-black text-white" onClick={() => { if(name.trim()) { addPlayer(name.trim()); setName(""); } }}>Add</button>
      </div>
      {players.length === 0 ? (
        <div className="text-muted-foreground">No players yet.</div>
      ) : (
        <table className="w-full">
          <thead><tr><th className="text-left">Name</th><th className="text-left">Member</th><th className="text-left">Pro</th><th className="text-left">Walk‑in Song</th><th></th></tr></thead>
          <tbody>
            {players.map((p) => (
              <tr key={p.id} className="border-t">
                <td className="py-1">{p.name}</td>
                <td>
                  <input type="checkbox" checked={p.member} onChange={(e) => updatePlayer(p.id, { member: e.target.checked })} />
                </td>
                <td>
                  <input type="checkbox" checked={p.pro} onChange={(e) => updatePlayer(p.id, { pro: e.target.checked })} />
                </td>
                <td>
                  <input value={p.walkin || ""} onChange={(e) => updatePlayer(p.id, { walkin: e.target.value })} className="border rounded px-2 py-1 w-full" placeholder="Theme song" />
                </td>
                <td className="text-right">
                  <button className="text-red-600 text-xs underline" onClick={() => removePlayer(p.id)}>Remove</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

function MatchCreator() {
  const { players, addMatch } = useStore();
  const [favoriteId, setFavoriteId] = useState("");
  const [challengerId, setChallengerId] = useState("");
  const [base, setBase] = useState(100);
  const [mode, setMode] = useState("extra_cash"); // weight | extra_cash
  const [weightNote, setWeightNote] = useState("");
  const [date, setDate] = useState("");

  function create() {
    if (!favoriteId || !challengerId || favoriteId === challengerId) { alert("Pick two different players"); return; }
    addMatch({ favoriteId, challengerId, base: Number(base), mode, weightNote, date: date ? new Date(date).toISOString() : null, escrow: { favPaid: false, chalPaid: false }, settled: false, status: "scheduled" });
    alert("Match created.");
  }

  return (
    <div className="text-sm space-y-2">
      <div className="grid md:grid-cols-2 gap-2">
        <Select label="Favorite (higher‑rank)" value={favoriteId} setValue={setFavoriteId} options={players} />
        <Select label="Challenger" value={challengerId} setValue={setChallengerId} options={players} />
      </div>
      <div className="grid md:grid-cols-3 gap-2">
        <NumberField label="Base Bet ($)" value={base} setValue={setBase} min={50} max={300} step={5} />
        <label className="text-xs block">
          <div className="mb-1 font-medium">Handicap Mode</div>
          <select value={mode} onChange={(e) => setMode(e.target.value)} className="w-full border rounded-xl px-3 py-2">
            <option value="weight">Give Weight</option>
            <option value="extra_cash">More Cash (1.2×)</option>
          </select>
        </label>
        {mode === "weight" && (
          <label className="text-xs block">
            <div className="mb-1 font-medium">Weight Note</div>
            <input value={weightNote} onChange={(e) => setWeightNote(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="e.g., +2 on the wire" />
          </label>
        )}
      </div>
      <label className="text-xs block">
        <div className="mb-1 font-medium">Date & Time</div>
        <input type="datetime-local" value={date} onChange={(e) => setDate(e.target.value)} className="w-full border rounded-xl px-3 py-2" />
      </label>
      <button className="px-3 py-2 rounded-xl bg-black text-white" onClick={create}>Create Match</button>
    </div>
  );
}

function EscrowConsole() {
  const { matches, updateMatch, players, settings } = useStore();
  const open = matches.filter((m) => !m.settled);
  const [selected, setSelected] = useState(open[0]?.id || "");
  const m = open.find((x) => x.id === selected) || null;

  function markPaid(side) {
    if (!m) return;
    updateMatch(m.id, { escrow: { ...m.escrow, [side]: true } });
  }
  function settle(winner) {
    if (!m) return;
    const { favoriteStake, challengerStake } = stakes(m.base, m.mode);
    const winnerIsFavorite = winner === "favorite";
    const gross = winnerIsFavorite ? challengerStake : favoriteStake;
    const winnerPlayer = players.find((p) => p.id === (winnerIsFavorite ? m.favoriteId : m.challengerId));
    const isMember = !!winnerPlayer?.member;
    const rate = Math.max(0, (isMember ? settings.memberRate : settings.nonMemberRate) - (winnerPlayer?.pro ? settings.proDiscount : 0));
    const commission = round2(gross * rate);
    const net = round2(gross - commission);
    updateMatch(m.id, { settled: true, status: "settled", result: { winner, gross, commission, net, rate } });
    alert(`Settled. Winner net: $${net} (commission $${commission}).`);
  }

  return (
    <div className="text-sm space-y-2">
      {open.length === 0 ? (
        <div className="text-muted-foreground">No open matches.</div>
      ) : (
        <>
          <label className="text-xs block">
            <div className="mb-1 font-medium">Select Match</div>
            <select value={selected} onChange={(e) => setSelected(e.target.value)} className="w-full border rounded-xl px-3 py-2">
              {open.map((x) => (
                <option key={x.id} value={x.id}>{fmtMatch(x, players)}</option>
              ))}
            </select>
          </label>
          {m && (
            <div className="rounded-xl border p-3">
              <div>Favorite: <span className="font-semibold">{nameOf(m.favoriteId)}</span> | Challenger: <span className="font-semibold">{nameOf(m.challengerId)}</span></div>
              <div>Base: ${m.base} • Mode: {m.mode === "extra_cash" ? "More Cash (1.2×)" : `Weight (${m.weightNote || "n/a"})`}</div>
              <div className="mt-2 grid grid-cols-2 gap-2">
                <button onClick={() => markPaid("favPaid")} className={`px-3 py-2 rounded-xl border ${m.escrow?.favPaid ? "bg-emerald-50" : ""}`}>Mark Favorite Paid</button>
                <button onClick={() => markPaid("chalPaid")} className={`px-3 py-2 rounded-xl border ${m.escrow?.chalPaid ? "bg-emerald-50" : ""}`}>Mark Challenger Paid</button>
              </div>
              <div className="mt-3 grid grid-cols-2 gap-2">
                <button onClick={() => settle("favorite")} className="px-3 py-2 rounded-xl bg-black text-white">Settle: Favorite Wins</button>
                <button onClick={() => settle("challenger")} className="px-3 py-2 rounded-xl bg-black text-white">Settle: Challenger Wins</button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
}

function FinesManager() {
  const { players, fines, addFine, removeFine } = useStore();
  const [playerId, setPlayerId] = useState("");
  const [type, setType] = useState("No‑Show");
  const [amount, setAmount] = useState(10);
  function add() {
    if (!playerId) { alert("Pick a player"); return; }
    addFine({ playerId, type, amount: Number(amount) });
  }
  return (
    <div className="text-sm space-y-3">
      <div className="grid md:grid-cols-3 gap-2">
        <Select label="Player" value={playerId} setValue={setPlayerId} options={players} />
        <label className="text-xs block">
          <div className="mb-1 font-medium">Type</div>
          <select value={type} onChange={(e) => setType(e.target.value)} className="w-full border rounded-xl px-3 py-2">
            <option>No‑Show</option>
            <option>Late</option>
            <option>Sportsmanship</option>
          </select>
        </label>
        <NumberField label="Amount ($)" value={amount} setValue={setAmount} min={5} max={100} step={1} />
      </div>
      <button onClick={add} className="px-3 py-2 rounded-xl bg-black text-white">Add Fine</button>
      <table className="w-full">
        <thead><tr><th className="text-left">When</th><th className="text-left">Player</th><th className="text-left">Type</th><th className="text-left">Amount</th><th></th></tr></thead>
        <tbody>
          {fines.map((f) => (
            <tr key={f.id} className="border-t">
              <td className="py-1">{new Date(f.date).toLocaleString()}</td>
              <td>{nameOf(f.playerId)}</td>
              <td>{f.type}</td>
              <td>${f.amount}</td>
              <td className="text-right"><button className="text-xs text-red-600 underline" onClick={() => removeFine(f.id)}>Delete</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function ReportsExporter() {
  const { matches, fines } = useStore();
  function expCSV(name, rows) {
    const blob = new Blob([rows.join("
")], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = name; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
  }
  function exportMatches() {
    const cols = ["id","createdAt","status","favorite","challenger","base","mode","weightNote","date","winner","gross","commission","net","rate"];
    const rows = [cols.join(",")].concat(matches.map(m => {
      const r = m.result || {}; 
      return [m.id,m.createdAt, m.status, nameOf(m.favoriteId), nameOf(m.challengerId), m.base, m.mode, q(m.weightNote||""), m.date||"", r.winner||"", r.gross||"", r.commission||"", r.net||"", r.rate||""].join(",");
    }));
    expCSV(`matches-${dateTag()}.csv`, rows);
  }
  function exportFines() {
    const cols = ["date","player","type","amount"]; 
    const rows = [cols.join(",")].concat(fines.map(f => [new Date(f.date).toISOString(), nameOf(f.playerId), f.type, f.amount].join(",")));
    expCSV(`fines-${dateTag()}.csv`, rows);
  }
  return (
    <div className="text-sm space-x-2">
      <button onClick={exportMatches} className="px-3 py-2 rounded-xl border">Export Matches CSV</button>
      <button onClick={exportFines} className="px-3 py-2 rounded-xl border">Export Fines CSV</button>
    </div>
  );
}

function StreamManager() {
  const { players, updatePlayer } = useStore();
  return (
    <div className="text-sm">
      <table className="w-full">
        <thead><tr><th className="text-left">Player</th><th className="text-left">Walk‑in Song</th><th className="text-left">Livestream?</th></tr></thead>
        <tbody>
          {players.map((p) => (
            <tr key={p.id} className="border-t">
              <td className="py-1">{p.name}</td>
              <td><input value={p.walkin || ""} onChange={(e) => updatePlayer(p.id, { walkin: e.target.value })} className="border rounded px-2 py-1 w-full" placeholder="Theme song" /></td>
              <td><input type="checkbox" checked={!!p.stream} onChange={(e) => updatePlayer(p.id, { stream: e.target.checked })} /></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

/* =====================
 * PAGES FROM EARLIER CHATS (unchanged/trimmed)
 * ===================== */
function MoneyRulesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💵 Money Rules</h2>
      <ol className="list-decimal pl-5 space-y-2 text-sm">
        <li><span className="font-semibold">Primary — CashApp:</span> both players send stake to operator escrow <span className="font-semibold">before</span> the lag/break. Operator pays winner instantly, minus commission.</li>
        <li><span className="font-semibold">Secondary (approval only):</span> Zelle, Venmo, or cash handed to operator pre‑match.</li>
        <li><span className="font-semibold">Commission from winner:</span> 5% members, 15% non‑members. Pro may be lower per ops settings.</li>
        <li><span className="font-semibold">Non‑members:</span> $12 per match fee.</li>
        <li><span className="font-semibold">Operators paid first.</span></li>
      </ol>
    </div>
  );
}

function PlayerTransparencyPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📝 Player Transparency Sheet (Public)</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Basic $25/mo (5% commission). Pro $40/mo (free tourneys, lower commission).</li>
        <li>Non‑Members: $12 per match (“suckers tax”).</li>
        <li>Bets: $50–$300. Escrow required. Streams: FB/TikTok Live. Walk‑in songs mandatory.</li>
        <li>Activity: 2 matches/mo. Challenges accepted in 7 days or forfeit.</li>
        <li>Points & stats public.</li>
      </ul>
    </div>
  );
}

function PotsAndJackpotsPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💣 Pots & Jackpots</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Break & Run Pot: $2 each match → winner‑take‑all rollovers.</li>
        <li>Hill‑Hill Fee: Lose 6–6, pay $10.</li>
        <li>King Bonus: streak rewards stack.</li>
        <li>Bounty hunts & streak badges.</li>
      </ul>
    </div>
  );
}

function FinesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">⚖️ Fines</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>No‑Show: $30 (to opponent)</li>
        <li>Late: $10 (to opponent)</li>
        <li>Bad Sportsmanship: $20 bounty</li>
        <li>Civil trash talk allowed. Fights = auto‑ban.</li>
      </ul>
    </div>
  );
}

function StreamsAndHypePage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📺 Streams & Hype</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>FB + TikTok Live every event. Walk‑in songs required (no pick → My Heart Will Go On).</li>
        <li>Livestreams: $5 optional; Highlights: $10 per reel.</li>
        <li>Roasts are fun, not humiliation. Keep it savage but civil.</li>
      </ul>
    </div>
  );
}

function DisputesAndSchedulingPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">🧭 Disputes & Scheduling</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Challenges accepted within <span className="font-semibold">7 days</span>. Don’t duck.</li>
        <li>Operator sets date if players can’t agree. Refuse → forfeit/points penalty.</li>
        <li>At 6–6: Chaos Coin (left‑hand only, one‑hand no‑rail, last‑pocket, golden break).</li>
      </ul>
    </div>
  );
}

/* =====================
 * UTIL
 * ===================== */
function nameOf(id) {
  const { players } = useStore();
  return players.find((p) => p.id === id)?.name || "Unknown";
}
function uid() { return Math.random().toString(36).slice(2) + Date.now().toString(36); }
function round2(n) { return Math.round(n * 100) / 100; }
function q(s) { return '"' + String(s).replace(/"/g, '""') + '"'; }
function dateTag() { return new Date().toISOString().slice(0,10); }
function Select({ label, value, setValue, options }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <select value={value} onChange={(e) => setValue(e.target.value)} className="w-full border rounded-xl px-3 py-2">
        <option value="">— Select —</option>
        {options.map((o) => (
          <option key={o.id} value={o.id}>{o.name}</option>
        ))}
      </select>
    </label>
  );
}
function NumberField({ label, value, setValue, min, max, step }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <input type="number" className="w-full border rounded-xl px-3 py-2" value={value} min={min} max={max} step={step} onChange={(e) => setValue(Number(e.target.value))} />
    </label>
  );
}
function fmtMatch(m, players) {
  const fav = players.find(p=>p.id===m.favoriteId)?.name || "?";
  const chal = players.find(p=>p.id===m.challengerId)?.name || "?";
  return `${fav} vs ${chal} — $${m.base} — ${m.mode === "extra_cash" ? "More Cash (1.2×)" : `Weight (${m.weightNote||"n/a"})`} ${m.date? "— " + new Date(m.date).toLocaleString():""}`;
}
function stakes(base, mode) {
  const favoriteStake = mode === "extra_cash" ? round2(base * 1.2) : round2(base);
  const challengerStake = round2(base);
  return { favoriteStake, challengerStake };
}
