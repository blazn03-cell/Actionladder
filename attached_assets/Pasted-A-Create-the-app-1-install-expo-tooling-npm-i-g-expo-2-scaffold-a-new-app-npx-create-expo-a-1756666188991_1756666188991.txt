A. Create the app
# 1) install expo tooling
npm i -g expo

# 2) scaffold a new app
npx create-expo-app actionladder-app

# 3) go into the app
cd actionladder-app

# 4) add the WebView package
npm i react-native-webview

B. Drop in the app code

Replace the contents of App.js with this:

import React, { useRef, useState, useEffect } from "react";
import { SafeAreaView, ActivityIndicator, BackHandler, Platform } from "react-native";
import { WebView } from "react-native-webview";

// ⬇️ Change this to a URL that works right now.
// Later, switch to https://actionladder.net once your domain is live.
const APP_URL = "https://YOUR-WORKING-URL.example.com";

export default function App() {
  const webRef = useRef(null);
  const [canGoBack, setCanGoBack] = useState(false);

  // Android back button goes back in WebView history
  useEffect(() => {
    const sub = BackHandler.addEventListener("hardwareBackPress", () => {
      if (canGoBack && webRef.current) {
        webRef.current.goBack();
        return true;
      }
      return false;
    });
    return () => sub.remove();
  }, [canGoBack]);

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <WebView
        ref={webRef}
        source={{ uri: APP_URL }}
        style={{ flex: 1 }}
        javaScriptEnabled
        domStorageEnabled
        startInLoadingState
        renderLoading={() => <ActivityIndicator style={{ marginTop: 24 }} />}
        allowsInlineMediaPlayback
        onNavigationStateChange={(s) => setCanGoBack(s.canGoBack)}
        // iOS swipe back gesture:
        allowsBackForwardNavigationGestures={Platform.OS === "ios"}
      />
    </SafeAreaView>
  );
}

C. App icon & splash (simple placeholders are fine)

Put a square 1024×1024 PNG at assets/icon.png.

Put a splash image at assets/splash.png (any size; centered “contain” works great).

D. Configure app settings

Open app.json and paste this (edit the few obvious fields):

{
  "expo": {
    "name": "ActionLadder",
    "slug": "actionladder-app",
    "scheme": "actionladder",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#0B0B0F"
    },
    "ios": {
      "bundleIdentifier": "net.actionladder.app",
      "supportsTablet": true,
      "infoPlist": {
        "NSCameraUsageDescription": "Camera is used for score/receipt scans and player verification.",
        "NSMicrophoneUsageDescription": "Microphone is used for quick video clips and voice notes."
      }
    },
    "android": {
      "package": "net.actionladder.app",
      "permissions": ["INTERNET", "CAMERA", "RECORD_AUDIO"],
      "adaptiveIcon": {
        "foregroundImage": "./assets/icon.png",
        "backgroundColor": "#0B0B0F"
      }
    }
  }
}


If your site uses camera/mic inside the browser (OCR photo, video), those permission descriptions are needed for App Store review.

E. Test on your phone in 1 minute
npx expo start


Install Expo Go on your phone.

Scan the QR from the terminal/browser. Your app should open and load your website.

F. Build real binaries (with EAS)

Install and initialize EAS

npm i -D eas-cli
npx eas login            # create/sign in to a free Expo account
npx eas build:configure  # choose Android and iOS


(Optional) Create eas.json so you get an APK for quick Android installs:

{
  "cli": { "version": ">= 12.0.0" },
  "build": {
    "preview": { "android": { "buildType": "apk" } },
    "production": {
      "android": { "buildType": "app-bundle" },
      "ios": { "simulator": false }
    }
  }
}


Build

# Quick Android install (APK)
npx eas build --platform android --profile preview

# Store-ready builds
npx eas build --platform android --profile production   # creates AAB for Play Store
npx eas build --platform ios     --profile production   # creates IPA for TestFlight/App Store


EAS will handle signing if you let it “manage credentials.” Each build finishes with a link to download.