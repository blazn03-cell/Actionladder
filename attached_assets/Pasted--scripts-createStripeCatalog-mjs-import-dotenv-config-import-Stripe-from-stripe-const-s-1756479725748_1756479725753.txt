// scripts/createStripeCatalog.mjs
import 'dotenv/config';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

// Helper to idempotently get-or-create product by name
async function getOrCreateProduct(name) {
  const list = await stripe.products.list({ limit: 100, active: true });
  const found = list.data.find(p => p.name === name);
  if (found) return found;
  return stripe.products.create({ name });
}

// Helper to idempotently get-or-create price by (product,name,amount,interval,type)
async function getOrCreatePrice({ productId, unit_amount, currency = 'usd', recurring, nickname, metadata, tax_behavior = 'unspecified' }) {
  // Try to find an existing matching price
  const prices = await stripe.prices.list({ product: productId, active: true, limit: 100 });
  const match = prices.data.find(p =>
    p.unit_amount === unit_amount &&
    p.currency === currency &&
    (!!recurring === !!p.recurring) &&
    (!recurring || (p.recurring.interval === recurring.interval)) &&
    p.nickname === nickname
  );
  if (match) return match;

  return stripe.prices.create({
    product: productId,
    unit_amount,
    currency,
    nickname,
    metadata,
    ...(recurring ? { recurring } : {}),
    tax_behavior,
  });
}

(async () => {
  // A) Operator Membership
  const operatorProduct = await getOrCreateProduct('Action Ladder – Operator Membership');
  const operatorPlans = [
    { tier: 'small',  monthly: 19900, yearly: 199000 },
    { tier: 'medium', monthly: 29900, yearly: 299000 },
    { tier: 'large',  monthly: 39900, yearly: 399000 },
    { tier: 'mega',   monthly: 79900, yearly: 799000 },
  ];
  for (const p of operatorPlans) {
    await getOrCreatePrice({
      productId: operatorProduct.id,
      unit_amount: p.monthly,
      nickname: `Operator – ${p.tier} – Monthly`,
      recurring: { interval: 'month' },
      metadata: { plan: 'operator', tier: p.tier },
    });
    await getOrCreatePrice({
      productId: operatorProduct.id,
      unit_amount: p.yearly,
      nickname: `Operator – ${p.tier} – Annual`,
      recurring: { interval: 'year' },
      metadata: { plan: 'operator', tier: p.tier },
    });
  }

  // B) Add-Ons (monthly; mirror annually manually if desired)
  const addonsProduct = await getOrCreateProduct('Action Ladder – Add-Ons');
  const addons = [
    { key: 'analytics', label: 'Analytics', amount: 5000 },
    { key: 'white_label', label: 'White-label', amount: 7500 },
    { key: 'tournament', label: 'Tournament Module', amount: 7500 },
  ];
  for (const a of addons) {
    await getOrCreatePrice({
      productId: addonsProduct.id,
      unit_amount: a.amount,
      nickname: `${a.label} – Monthly`,
      recurring: { interval: 'month' },
      metadata: { plan: 'addon', addon: a.key },
    });
  }

  // C) Multi-Hall
  const multiHallProduct = await getOrCreateProduct('Action Ladder – Multi-Hall');
  await getOrCreatePrice({
    productId: multiHallProduct.id,
    unit_amount: 22500,
    nickname: 'Multi-Hall – Monthly',
    recurring: { interval: 'month' },
    metadata: { plan: 'multi_hall' },
  });
  await getOrCreatePrice({
    productId: multiHallProduct.id,
    unit_amount: 220000,
    nickname: 'Multi-Hall – Annual',
    recurring: { interval: 'year' },
    metadata: { plan: 'multi_hall' },
  });

  // D) Pay-Per-Use
  const walkInProduct = await getOrCreateProduct('Walk-In Day Pass');
  await getOrCreatePrice({
    productId: walkInProduct.id,
    unit_amount: 1200,
    nickname: 'Walk-In – One-time',
    metadata: { type: 'one_time', purpose: 'walk_in' },
  });

  const tourneyProduct = await getOrCreateProduct('Tournament Entry');
  const tourneyPresets = [2000, 4000, 6000, 10000]; // $20, $40, $60, $100
  for (const amt of tourneyPresets) {
    await getOrCreatePrice({
      productId: tourneyProduct.id,
      unit_amount: amt,
      nickname: `Tournament Entry – $${(amt/100).toFixed(0)}`,
      metadata: { type: 'one_time', purpose: 'tournament_entry' },
    });
  }

  // E) Deposit
  const depositProduct = await getOrCreateProduct('Match Attendance Deposit $30');
  await getOrCreatePrice({
    productId: depositProduct.id,
    unit_amount: 3000,
    nickname: 'Deposit – One-time',
    metadata: { type: 'deposit', refundable: 'true' },
  });

  console.log('✅ Stripe catalog created/verified.');
})().catch(err => {
  console.error('❌ Error creating catalog:', err);
  process.exit(1);
});
