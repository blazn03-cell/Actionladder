Role & Access Control

Add a role column in your users table:

ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'player';


Values: player, operator, admin.

When you or your trustees log in, set their role = operator (or admin).

Middleware in server checks req.user.role before allowing /resolve or /void endpoints.

🔒 Server Protection

Example Express middleware:

function requireOperator(req: any, res: any, next: any) {
  if (!req.user || (req.user.role !== 'operator' && req.user.role !== 'admin')) {
    return res.status(403).json({ error: 'Forbidden' });
  }
  next();
}

app.post('/api/sidepots/:potId/resolve', requireOperator, (req, res) => {
  // … existing resolve logic
});

app.post('/api/sidepots/:potId/void', requireOperator, (req, res) => {
  // … existing void logic
});

🎛️ Operator Dashboard UI

OperatorDashboard.tsx

import { useEffect, useState } from 'react';

export default function OperatorDashboard() {
  const [pots, setPots] = useState<any[]>([]);

  useEffect(() => {
    (async () => {
      const r = await fetch('/api/sidepots?status=locked'); // only show locked
      const j = await r.json();
      setPots(j);
    })();
  }, []);

  const resolve = async (potId: string, side: 'A'|'B') => {
    const r = await fetch(`/api/sidepots/${potId}/resolve`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ winnerSide: side })
    });
    const j = await r.json();
    if (j.error) alert(j.error);
    else setPots(pots.filter(p => p.id !== potId));
  };

  const voidPot = async (potId: string) => {
    const r = await fetch(`/api/sidepots/${potId}/void`, { method: 'POST' });
    const j = await r.json();
    if (j.error) alert(j.error);
    else setPots(pots.filter(p => p.id !== potId));
  };

  return (
    <div className="p-4 space-y-4">
      <h1 className="text-xl font-bold">Operator Dashboard</h1>
      {pots.length === 0 && <p>No locked pots pending resolution.</p>}
      {pots.map(p => (
        <div key={p.id} className="border rounded p-3">
          <div className="font-bold">{p.side_a_label} vs {p.side_b_label}</div>
          <div>Stake: ${(p.stake_per_side/100).toFixed(2)}</div>
          <div className="flex gap-2 mt-2">
            <button onClick={()=>resolve(p.id,'A')} className="px-3 py-2 bg-emerald-600 text-white rounded">A Wins</button>
            <button onClick={()=>resolve(p.id,'B')} className="px-3 py-2 bg-blue-600 text-white rounded">B Wins</button>
            <button onClick={()=>voidPot(p.id)} className="px-3 py-2 bg-gray-600 text-white rounded">Void</button>
          </div>
        </div>
      ))}
    </div>
  );
}

📌 Summary

Players: can create & join side pots, lock credits.

Operators (you + trustees): can see all locked pots → click A Wins / B Wins / Void.

Middleware: prevents anyone else from calling resolve/void endpoints.