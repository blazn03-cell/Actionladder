This integration uses only Accounts, Account Links, Events, EventDestinations, and Persons from API v2. All other objects belong to API v1.

For each connected account, use the Accounts v2 API to create an Account object with the customer and merchant configurations.

The customer configuration allows the Account to pay your platform a subscription fee using a payment method that you attach to the Account.
The merchant configuration makes the Account a connected account that can accept card payments from its own customers. When you assign the merchant configuration, you also define other aspects of the connected account, such as:
Request the ability to accept card payments by setting configuration.merchant.capabilities.card_payments.requested to true.
Specify access to a Stripe Dashboard by setting dashboard. In the following example, we set dashboard to full, which means the Account has access to the full Stripe Dashboard.
Specify responsibility for collecting fees from the Account by setting defaults.responsibilities.fees_collector to stripe or application.
Specify responsibility for negative balances on the Account by setting defaults.responsibilities.losses_collector to stripe or application.
Use include to populate objects in the response
When you create, retrieve, or update an Account in API v2, certain properties are only populated in the response if you specify them in the include parameter. For any of those properties that you don’t specify, the response includes them as null, regardless of their actual value.

Command Line
Select a language
Select a language
cURL



curl -X POST https://api.stripe.com/v2/core/accounts \
  -H "Authorization: Bearer sk_test_51RzCXFDc2BliYufwtBAh31fJ7jXYX3vk3PNoCQcXYp86BeGkvPXwV32wXXClGsj2z4LjPyxqE65y9wlkIdFaulsf00TB6KmqPt" \
  -H "Stripe-Version: 2025-04-30.preview" \
  --json '{
    "contact_email": "furever_contact@example.com",
    "display_name": "Furever",
    "dashboard": "full",
    "identity": {
        "business_details": {
            "registered_name": "Furever"
        },
        "country": "us",
        "entity_type": "company"
    },
    "configuration": {
        "customer": {
            "capabilities": {
                "automatic_indirect_tax": {
                    "requested": true
                }
            }
        },
        "merchant": {
            "capabilities": {
                "card_payments": {
                    "requested": true
                }
            }
        }
    },
    "defaults": {
        "currency": "usd",
        "responsibilities": {
            "fees_collector": "stripe",
            "losses_collector": "stripe"
        },
        "locales": [
            "en-US"
        ]
    },
    "include": [
        "configuration.customer",
        "configuration.merchant",
        "identity",
        "requirements"
    ]
  }'
The response includes the ID, which you use to reference the Account throughout your integration.

New Account response example



{
  "id": "acct_xxxxxxxxxxxxxxxx",
  "object": "v2.core.account",
  "applied_configurations": [
    "customer",
    "merchant"
  ],
  "configuration": {
    "customer": {
      "automatic_indirect_tax": {
        "exempt": "none",
        "ip_address": null,
        "location": null,
        "location-source": "identity_address"
      },
      "billing": {
        ...
      },
      "capabilities": {
        "automatic_indirect_tax": {
          "requested": true,
          "status": "restricted",
          "status_details": [
            {
              "code": "requirements_past_due",
              "resolution": "provide_info"
            }
          ]
        }
      },
      "shipping": ...,
      "test_clock": ...
    },
    "merchant": {
      "bacs_debit_payments": null,
      "branding": {
        ...
      },
      "capabilities": {
        ...
        "card_payments": {
          "requested": true,
          "status": "restricted",
          "status_details": [
            {
              "code": "requirements_past_due",
              "resolution": "provide_info"
            }
          ]
        },
        "stripe_balance": {
          "payouts": {
            "requested": true,
            "status": "restricted",
            "status_details": [
              {
                "code": "requirements_past_due",
                "resolution": "provide_info"
              }
            ]
          }
        },
        ...
      },
      "card_payments": {
        "decline_on": {
          "avs_failure": false,
          "cvc_failure": false
        }
      },
      "mcc": null,
      ...
      "statement_descriptor": {
        ...
      },
      "support": {
        "address": {
          ...
        },
        ...
      }
    },
    "recipient": null
  },
  "contact_email": "furever_contact@example.com",
  "created": "2025-03-04T02:23:20.000Z",
  "dashboard": "full",
  "identity": {
    "attestations": {
      ...
    },
    "terms_of_service": {
      "account": null
    },
    "business_details": {
      ...
      "registered_name": "Furever",
      ...
    },
    "country": "US",
    "entity_type": "company",
    "individual": null
  },
  "defaults": null,
  "display_name": "Furever",
  "metadata": {},
  "requirements": {
    "collector": "stripe",
    "entries": [
      {
        "awaiting_action_from": "user",
        "description": "representative.surname",
        "errors": [],
        "impact": {
          "restricts_capabilities": [
            {
              "capability": "card_payments",
              "configuration": "merchant",
              "deadline": {
                "status": "past_due"
              }
            },
            {
              "capability": "stripe_balance.payouts",
              "configuration": "merchant",
              "deadline": {
                "status": "past_due"
              }
            }
          ]
        },
        "minimum_deadline": {
          "status": "past_due"
        },
        "reference": null,
        "requested_reasons": [
          {
            "code": "routine_onboarding"
          }
        ]
      }
    ],
    "summary": {
      "minimum_deadline": {
        "status": "past_due",
        "time": null
      }
    }
  }
}
Account Responsibilities
Responsibilities define certain behaviors of connected accounts, such as how they pay Stripe fees and responsibility for negative balances. You set them when you add the merchant configuration to your connected accounts.

To enable your Accounts to collect payments as connected accounts, set the following responsibilities:

Property	Description	Values
defaults.responsibilities.fees_collector	Defines how Stripe collects payment fees for direct charges on the connected account. (For destination or separate charges, Stripe always collects fees from your platform.)	
application: Your platform collects application fees from the connected account, and Stripe collects payment fees from your platform.
stripe: Stripe collects payment fees directly from the connected account.
defaults.responsibilities.losses_collector	Assigns responsibility for negative balances incurred by the connected account.	
application: Your platform is responsible for negative balances and manages risk for the connected account.
stripe: Stripe is liable for the connected account’s negative balances. Your platform is still liable for negative balances on your platform account.
Responsibilities are subject to the following restrictions:

If you set losses_collector to application, then you must also set fees_collector to application.
If you use destination charges with an Account, we recommend that you set both losses_collector and fees_collector to application.
For more information about supported configurations, see Integration recommendations.

Charge types
The preview release supports only direct and destination charges for connected accounts. You can’t use separate charges and transfers.

To use destination charges, you must set the on_behalf_of parameter to make the connected account the settlement merchant. You must also add the recipient configuration to your connected accounts and request the stripe_transfers capability for them.

Add the recipient configuration to connected accounts
To allow the transfer of funds from your platform’s Stripe balance to the connected account’s Stripe balance, add the recipient configuration and request the stripe_balance.stripe_transfers capability. Destination charges require this capability.

Requesting stripe_balance.stripe_transfers also automatically requests the recipient configuration’s stripe_balance.payouts capability, which allows the connected account to pay out to their external bank account.

The merchant configuration automatically requests its own stripe_balance.payouts capability, which is identical to the recipient configuration’s stripe_balance.payouts capability. If the account doesn’t need any other recipient capabilities, you don’t need to add the recipient configuration.

Note
The preview release doesn’t support cross-border payouts.

To add the recipient configuration and request the stripe_balance.stripe_transfers capability, update the Account and set the configuration.recipient.capabilities.stripe_balance.stripe_transfers.requested parameter to true.

Command Line
Select a language
Select a language
cURL



curl -X POST https://api.stripe.com/v2/core/accounts/acct_xxxxxxxxxxxxxxxx \
  -H "Authorization: Bearer sk_test_51RzCXFDc2BliYufwtBAh31fJ7jXYX3vk3PNoCQcXYp86BeGkvPXwV32wXXClGsj2z4LjPyxqE65y9wlkIdFaulsf00TB6KmqPt" \
  -H "Stripe-Version: 2025-04-30.preview" \
  --json '{
    "include": [
        "identity",
        "requirements"
    ],
    "configuration": {
        "recipient": {
            "capabilities": {
                "stripe_balance": {
                    "stripe_transfers": {
                        "requested": true
                    }
                }
            }
        }
    }
  }'
Onboard your connected accounts
Before your connected accounts can accept payments through your platform, you must onboard them. You can direct your accounts to Stripe-hosted onboarding, offer a branded flow using a Connect embedded component, or code your own custom onboarding flow. Stripe-hosted onboarding is the simplest option. Using an embedded component allows for some customization while handling most of the process automatically. A custom onboarding flow gives your platform full control, but requires the most resources for implementation and ongoing updates.


Stripe-hosted onboarding

Embedded onboarding

Custom onboarding using the API
To integrate Stripe-hosted onboarding, follow the steps in the Stripe-hosted onboarding guide, with the following changes:

In the Create an account and prefill information step, create your Accounts following the Accounts v2 process described in this guide.
In the Identify and address requirement updates step, create an event destination to listen for v2.core.account[requirements].updated events. Don’t listen for the account.updated v1 event.
Note
The Stripe-hosted onboarding guide uses the Accounts v1 API. You can’t use the Accounts v1 API with API v2, and the structure of an Account in API v2 differs from the structure of an Account in API v1. Where the hosted onboarding guide refers to properties of Accounts v1, use the corresponding properties in Accounts v2 instead. Remember to use the include parameter to retrieve most Account properties in API v2.

Create external accounts for your connected accounts
The process for creating an external account depends on your connected accounts’ Dashboard access:

If an Account’s dashboard is full or express, the account owner adds its external account using their Dashboard.
If an Account’s dashboard is none, you can create its external account using the /v1/external_accounts endpoint.
Note
Regardless of your connected accounts’ Dashboard access, you can retrieve, list, update, or delete their external accounts using an API v1 call.

Command Line
Select a language
Select a language
cURL



curl https://api.stripe.com/v1/external_accounts \
  -u "sk_test_51RzCXFDc2BliYufwtBAh31fJ7jXYX3vk3PNoCQcXYp86BeGkvPXwV32wXXClGsj2z4LjPyxqE65y9wlkIdFaulsf00TB6KmqPt:" \
  -H "Stripe-Version: 2025-04-30.preview" \
  -H "Stripe-Account: {{CONNECTED_ACCOUNT_ID}}" \
  -d "external_account[account_number]"=000123456789 \
  -d "external_account[routing_number]"=110000000 \
  -d "external_account[country]"=US \
  -d "external_account[currency]"=USD \
  -d "external_account[object]"=bank_account
