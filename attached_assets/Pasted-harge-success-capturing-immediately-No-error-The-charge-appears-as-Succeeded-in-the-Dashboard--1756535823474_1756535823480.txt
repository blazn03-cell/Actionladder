harge success (capturing immediately)	
No error.
The charge appears as Succeeded in the Dashboard under Payments.
Stripe captures the charge.
PaymentIntent authorization success (capturing funds for later)	



{
  ...
  "capture_method": "manual",
  ...
  "status": "requires_capture",
  ...
}
PaymentIntent capture success (capturing immediately or capturing funds for later)	



{
    ...
    "status": "succeeded",
    ...
  }
Charge fail	The charge appears as Failed in the Dashboard under Payments.



{
  "error": {
    "charge": "ch_",
    "code": "card_declined",
    "decline_code": "<<REASON HERE>>",
    "doc_url": "https://docs.stripe.com/error-codes#card-declined",
    "message": "Your card was declined.",
    "type": "card_error"
  }
}
Radar block	No matter which version of Radar you use, it might block a charge due to high risk or a rule. The response is the same as what you get when a charge fails.
Charge disputed	
The charge appears as Disputed in the Dashboard under Payments.
Stripe debits the charge amount plus the dispute fee from the balance, creates a Dispute object along with its associated charge.dispute.created event.



{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "status": "needs_response"
  }
}
Charge inquiry opened

Inquiries are similar to disputes, with three key distinctions: no funds are withdrawn unless we elevate an inquiry to a dispute, they remain refundable until disputed, and have a different set of statuses. In this case, Stripe fires a charge.dispute.created event.




{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "is_charge_refundable": true,
    ...
    "status": "warning_needs_response"
  }
}
Dispute won

When a customer wins a dispute, the funds of the original charge are restored to the account, less the dispute fee.
Stripe updates the existing Dispute object, and fires a charge.dispute.closed event.



{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "status": "won"
  }
}
Dispute lost

When a customer loses a dispute, Stripe updates the existing Dispute object, and fires a charge.dispute.closed event.




{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "status": "lost"
  }
}
Inquiry won

When you win an inquiry, your balance remains the same, as no funds were removed when you initially opened the inquiry. Stripe updates the existing Dispute object, and fires a charge.dispute.closed event.




{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "status": "warning_closed"
  }
}
Inquiry lost

When you lose an inquiry, it escalates to a dispute.
When it escalates to a dispute, its status changes with a charge.dispute.updated event, and funds are withdrawn in a charge.dispute.funds_withdrawn event:



{
  "object": {
    "id": "du_",
    "object": "dispute",
    "charge_id": "ch_",
    ...
    "status": "needs_response"
  }
}
Charge refunded

The charge appears as Refunded in the Dashboard under Payments.




{
  "id": "re_",
  "object": "refund",
  "amount": "<<FULL AMOUNT>>",
  "charge": "ch_",
  ...
  "payment_intent": "pi_", // if you're using PaymentIntents
  ...
  "status": "succeeded"
}
Charge partially refunded

The charge appears as Refunded in the Dashboard under Payments.
The refund amount is different from the charge amount, and you can still dispute partially-refunded charges.



{
  "id": "re_",
  "object": "refund",
  "amount": "<<PARTIAL AMOUNT>>",
  "charge": "ch_",
  ...
  "payment_intent": "pi_", // if you are using PaymentIntents
  ...
  "status": "succeeded"
}
Account balance goes negative	Make sure to test for a negative balance on Stripe and verify that your bank accounts can accept debits from us.
Successful payout	If you enable webhooks for a successful payout (recommended), test your handling of the event.
Failed payout	If you enable webhooks for a failed payout (recommended), test your handling of the event.