import React, { useMemo, useState, useEffect, useContext, createContext } from "react";
import { BrowserRouter, Routes, Route, NavLink, Navigate, useNavigate } from "react-router-dom";
import Rulebook from "./Rulebook";
import LadderStakesRule from "./LadderStakesRule";
import MistakeLab from "./MistakeLab";
import RatingsPairingPanel from "./RatingsPairingPanel";

/* =====================================================
 * AUTH LAYER (Players vs Operators) — demo/localStorage
 * Replace with real backend/JWT later.
 * ===================================================== */
const AuthCtx = createContext(null);

function AuthProvider({ children }) {
  const [user, setUser] = useState(() => {
    try { return JSON.parse(localStorage.getItem("tri_auth_user") || "null"); } catch { return null; }
  });
  useEffect(() => { localStorage.setItem("tri_auth_user", JSON.stringify(user)); }, [user]);

  const login = (role, name) => setUser({ role, name: name || (role === "operator" ? "Operator" : "Player") });
  const logout = () => setUser(null);

  const value = useMemo(() => ({ user, login, logout }), [user]);
  return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>;
}
function useAuth() { return useContext(AuthCtx); }

function ProtectedRoute({ role, children }) {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" replace />;
  if (role && user.role !== role) return <Navigate to="/" replace />;
  return children;
}

/* =====================================================
 * OPERATOR STORE — demo state persisted to localStorage
 * players, matches, fines, settings, proposals
 * ===================================================== */
const StoreCtx = createContext(null);
function useLocalState(key, fallback) {
  const [s, setS] = useState(() => {
    try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; } catch { return fallback; }
  });
  useEffect(() => { localStorage.setItem(key, JSON.stringify(s)); }, [key, s]);
  return [s, setS];
}

function StoreProvider({ children }) {
  const [players, setPlayers] = useLocalState("tri_players", []);
  const [matches, setMatches] = useLocalState("tri_matches", []);
  const [fines, setFines] = useLocalState("tri_fines", []);
  const [proposals, setProposals] = useLocalState("tri_proposals", []);
  const [settings, setSettings] = useLocalState("tri_ops_settings", {
    memberRate: 0.05,
    nonMemberRate: 0.15,
    proDiscount: 0, // e.g. 0.02 → Pro members 3%
    initialRating: 1200,
    kFactor: 24,
    bandSize: 200,
    avoidRematchDays: 30,
    votingMinVotes: 5,
    votingPassRatio: 0.6,
    votingAllowDownvotes: true,
  });

  const addPlayer = (name) => {
    const id = uid();
    setPlayers((p) => [{ id, name, member: true, pro: false, walkin: "", rating: settings.initialRating, notes: "" }, ...p]);
  };
  const updatePlayer = (id, patch) => setPlayers((ps) => ps.map((p) => (p.id === id ? { ...p, ...patch } : p)));
  const removePlayer = (id) => setPlayers((ps) => ps.filter((p) => p.id !== id));

  const addMatch = (m) => setMatches((ms) => [{ id: uid(), createdAt: Date.now(), status: "scheduled", ...m }, ...ms]);
  const updateMatch = (id, patch) => setMatches((ms) => ms.map((m) => (m.id === id ? { ...m, ...patch } : m)));
  const removeMatch = (id) => setMatches((ms) => ms.filter((m) => m.id !== id));

  const addFine = (fine) => setFines((fs) => [{ id: uid(), date: Date.now(), ...fine }, ...fs]);
  const removeFine = (id) => setFines((fs) => fs.filter((f) => f.id !== id));

  // ===== Proposals & Voting =====
  const addProposal = ({ title, body, type, authorName }) => {
    const id = uid();
    setProposals((ps) => [
      { id, title, body, type, authorName, status: "open", createdAt: Date.now(), votes: {}, up: 0, down: 0 },
      ...ps,
    ]);
  };
  const updateProposal = (id, patch) => setProposals((ps) => ps.map((p) => (p.id === id ? { ...p, ...patch } : p)));
  const removeProposal = (id) => setProposals((ps) => ps.filter((p) => p.id !== id));
  const voteProposal = (id, voterName, value) => {
    setProposals((ps) => ps.map((p) => {
      if (p.id !== id || p.status !== "open") return p;
      const prev = p.votes?.[voterName] || 0;
      const next = value; // +1 / -1 / 0
      if (prev === next) return p;
      const votes = { ...(p.votes || {}) };
      if (next === 0) delete votes[voterName]; else votes[voterName] = next;
      const counts = Object.values(votes).reduce((acc, v) => { if (v>0) acc.up++; if (v<0) acc.down++; return acc; }, { up: 0, down: 0 });
      let status = p.status;
      const total = counts.up + counts.down;
      const ratio = total ? counts.up / total : 0;
      if (total >= settings.votingMinVotes && ratio >= settings.votingPassRatio) status = "accepted";
      return { ...p, votes, up: counts.up, down: counts.down, status };
    }));
  };

  const value = useMemo(() => ({
    players, matches, fines, proposals, settings,
    setSettings,
    addPlayer, updatePlayer, removePlayer,
    addMatch, updateMatch, removeMatch,
    addFine, removeFine,
    addProposal, updateProposal, removeProposal, voteProposal,
  }), [players, matches, fines, proposals, settings]);
  return <StoreCtx.Provider value={value}>{children}</StoreCtx.Provider>;
}
function useStore() { return useContext(StoreCtx); }

/* =====================================================
 * APP SHELL + ROUTES
 * ===================================================== */
export default function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <StoreProvider>
          <div className="min-h-screen bg-white text-gray-900">
            <Nav />
            <main className="mx-auto w-full max-w-6xl p-4 md:p-8">
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<LoginPage />} />

                {/* Player area */}
                <Route path="/player" element={<ProtectedRoute><PlayerDashboard /></ProtectedRoute>} />

                {/* Operator area */}
                <Route path="/operator" element={<ProtectedRoute role="operator"><OperatorDashboard /></ProtectedRoute>} />

                {/* Shared pages */}
                <Route path="/leaderboard" element={<LeaderboardPage />} />
                <Route path="/proposals" element={<ProposalsPage />} />
                <Route path="/rulebook" element={<Rulebook />} />
                <Route path="/stakes" element={<LadderStakesRule />} />
                <Route path="/film-room" element={<MistakeLab />} />
                <Route path="/money" element={<MoneyRulesPage />} />
                <Route path="/transparency" element={<PlayerTransparencyPage />} />
                <Route path="/pots" element={<PotsAndJackpotsPage />} />
                <Route path="/fines" element={<FinesPage />} />
                <Route path="/streams" element={<StreamsAndHypePage />} />
                <Route path="/disputes" element={<DisputesAndSchedulingPage />} />
                <Route path="*" element={<NotFound />} />
              </Routes>
            </main>
            <Footer />
          </div>
        </StoreProvider>
      </AuthProvider>
    </BrowserRouter>
  );
}

function Nav() {
  const { user, logout } = useAuth();
  const link = ({ isActive }) => `px-3 py-2 rounded-xl text-sm ${isActive ? "bg-black text-white" : "hover:bg-gray-100"}`;
  return (
    <header className="border-b">
      <div className="mx-auto max-w-6xl p-4 flex items-center justify-between gap-3">
        <div className="font-extrabold tracking-tight text-lg">🎱 Tri‑City Texas Ladder</div>
        <nav className="flex flex-wrap gap-2 items-center">
          <NavLink to="/" className={link} end>Home</NavLink>
          <NavLink to="/leaderboard" className={link}>Leaderboard</NavLink>
          <NavLink to="/proposals" className={link}>Proposals</NavLink>
          <NavLink to="/rulebook" className={link}>Rulebook</NavLink>
          <NavLink to="/stakes" className={link}>Stakes</NavLink>
          <NavLink to="/film-room" className={link}>Mistake Lab</NavLink>
          {user && user.role === "operator" && (
            <NavLink to="/operator" className={link}>Operator</NavLink>
          )}
          {user && user.role !== "operator" && (
            <NavLink to="/player" className={link}>My Player</NavLink>
          )}
          {!user ? (
            <NavLink to="/login" className={link}>Log in</NavLink>
          ) : (
            <button onClick={logout} className="px-3 py-2 rounded-xl text-sm hover:bg-gray-100">Logout ({user.role})</button>
          )}
        </nav>
      </div>
    </header>
  );
}

function Home() {
  const { user } = useAuth();
  return (
    <div className="space-y-4">
      <h1 className="text-3xl md:text-4xl font-extrabold">Pool • Points • Pride • Payouts</h1>
      <p className="text-sm text-muted-foreground max-w-prose">
        Welcome to the only ladder where pool feels like UFC, casino night, and a comedy roast. Grab the rulebook, lock stakes, and hit the Film Room to turn L's into levels.
      </p>
      <ul className="grid md:grid-cols-3 gap-3">
        <HomeCard title="Leaderboard" to="/leaderboard"/>
        <HomeCard title="Proposals & Voting" to="/proposals"/>
        <HomeCard title="Read the Rulebook" to="/rulebook"/>
        <HomeCard title="Lock Stakes" to="/stakes"/>
        <HomeCard title="Mistake Lab" to="/film-room"/>
        <HomeCard title="Money Rules" to="/money"/>
        <HomeCard title="Disputes & Scheduling" to="/disputes"/>
        {user?.role === "operator" ? (
          <HomeCard title="Operator Dashboard" to="/operator"/>
        ) : (
          <HomeCard title="My Player Dashboard" to="/player"/>
        )}
      </ul>
    </div>
  );
}

function HomeCard({ title, to }) {
  return (
    <li>
      <NavLink to={to} className="block rounded-2xl border p-4 hover:shadow-sm">
        <div className="font-semibold">{title}</div>
        <div className="text-xs text-muted-foreground">Open</div>
      </NavLink>
    </li>
  );
}

function Footer() {
  return (
    <footer className="border-t mt-8">
      <div className="mx-auto max-w-6xl p-4 text-xs text-muted-foreground">
        © {new Date().getFullYear()} Tri‑City Texas Ladder — Fight‑night pool, savage transparency.
      </div>
    </footer>
  );
}

/* =====================
 * LOGIN PAGE
 * ===================== */
function LoginPage() {
  const { user, login } = useAuth();
  const nav = useNavigate();
  const [role, setRole] = useState("player");
  const [name, setName] = useState("");
  const [opCode, setOpCode] = useState("");
  useEffect(() => { if (user) nav("/", { replace: true }); }, [user]);

  function submit(e) {
    e.preventDefault();
    if (role === "operator") {
      if (opCode.trim() !== "OP-TRICITY-🔥") { alert("Invalid operator code"); return; }
      login("operator", name || "Operator");
      nav("/operator");
    } else {
      login("player", name || "Player");
      nav("/player");
    }
  }

  return (
    <div className="max-w-md mx-auto rounded-2xl border p-6 shadow-sm">
      <h1 className="text-2xl font-bold mb-3">Log in</h1>
      <form onSubmit={submit} className="space-y-3">
        <label className="block">
          <div className="text-sm font-medium">Role</div>
          <select value={role} onChange={(e) => setRole(e.target.value)} className="w-full border rounded-xl px-3 py-2">
            <option value="player">Player</option>
            <option value="operator">Operator</option>
          </select>
        </label>
        <label className="block">
          <div className="text-sm font-medium">Display name</div>
          <input value={name} onChange={(e) => setName(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="Tyga Hoodz" />
        </label>
        {role === "operator" && (
          <label className="block">
            <div className="text-sm font-medium">Operator code</div>
            <input value={opCode} onChange={(e) => setOpCode(e.target.value)} className="w-full border rounded-xl px-3 py-2" placeholder="OP-TRICITY-🔥" />
            <div className="text-xs text-muted-foreground mt-1">Demo code: <code>OP-TRICITY-🔥</code> — replace with real auth later.</div>
          </label>
        )}
        <button className="w-full px-3 py-2 rounded-xl bg-black text-white">Enter</button>
      </form>
    </div>
  );
}

/* =====================
 * PLAYER DASHBOARD
 * ===================== */
function PlayerDashboard() {
  const { players, matches } = useStore();
  const { user } = useAuth();
  const me = players.find((p) => p.name === user?.name) || null;
  const upcoming = matches.filter((m) => !m.settled).slice(0, 6);
  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">Player Dashboard</h2>
      <div className="rounded-2xl border p-4">
        <div className="text-sm">Welcome, <span className="font-semibold">{user?.name}</span>. Film your sets and analyze them in the Mistake Lab. 💪</div>
        {!me && <div className="text-xs text-red-600 mt-1">(Ask an operator to add you to the roster to enable more features.)</div>}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-2">Upcoming / Recent Matches</div>
        {upcoming.length === 0 ? (
          <div className="text-sm text-muted-foreground">No matches yet. Call out someone 1–2 spots above you.</div>
        ) : (
          <table className="w-full text-sm">
            <thead><tr><th className="text-left">When</th><th className="text-left">Favorite</th><th className="text-left">Challenger</th><th className="text-left">Base</th><th className="text-left">Mode</th><th className="text-left">Status</th></tr></thead>
            <tbody>
              {upcoming.map((m) => (
                <tr key={m.id} className="border-t">
                  <td className="py-1">{m.date ? new Date(m.date).toLocaleString() : "TBD"}</td>
                  <td>{displayName(m.favoriteId)}</td>
                  <td>{displayName(m.challengerId)}</td>
                  <td>${m.base}</td>
                  <td>{m.mode === "extra_cash" ? "More Cash (1.2×)" : "Give Weight"}</td>
                  <td>{m.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      <div className="rounded-2xl border p-4">
        <div className="font-semibold mb-1">Film Room</div>
        <NavLink to="/film-room" className="underline text-blue-600 text-sm">Open Mistake Lab →</NavLink>
      </div>
    </div>
  );
}

/* =====================
 * OPERATOR DASHBOARD
 * ===================== */
function OperatorDashboard() {
  const store = useStore();
  const { players, settings } = store;
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Operator Dashboard</h2>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Ratings & Pairing Assistant</h3>
        <RatingsPairingPanel store={store} />
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Commission & Membership Settings</h3>
          <CommissionSettings />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Voting Settings</h3>
          <VotingSettings />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Player Roster</h3>
          <PlayerManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Moderate Proposals</h3>
          <ProposalsModerator />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Create / Schedule Match</h3>
          <MatchCreator />
          <div className="mt-4 rounded-xl border p-3 bg-gray-50">
            <div className="text-sm font-semibold mb-1">Lock Handicap Path</div>
            <div className="text-xs text-muted-foreground mb-2">Embed the stakes widget below to decide Give Weight vs More Cash (1.2×).</div>
            <LadderStakesRule />
          </div>
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Escrow Console & Settlement</h3>
          <EscrowConsole />
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Fines & Penalties</h3>
          <FinesManager />
        </div>
        <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-2">Reports / Export</h3>
          <ReportsExporter />
        </div>
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Streaming & Walk‑in Songs</h3>
        <StreamManager />
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Revenue Calculator</h3>
        <RevenueCalculator />
      </div>

      <div className="text-xs text-muted-foreground">* Demo data persists locally. Replace with backend CRUD when ready.</div>
    </div>
  );
}

/* ===== Operator Widgets ===== */
function CommissionSettings() {
  const { settings, setSettings } = useStore();
  return (
    <div className="grid md:grid-cols-3 gap-3 text-sm">
      <NumberField label="Member Commission" value={settings.memberRate} min={0} max={0.2} step={0.005} setValue={(v) => setSettings({ ...settings, memberRate: Number(v) })} />
      <NumberField label="Non‑Member Commission" value={settings.nonMemberRate} min={0} max={0.3} step={0.005} setValue={(v) => setSettings({ ...settings, nonMemberRate: Number(v) })} />
      <NumberField label="Pro Discount" value={settings.proDiscount} min={0} max={0.05} step={0.005} setValue={(v) => setSettings({ ...settings, proDiscount: Number(v) })} />
      <div className="text-xs text-muted-foreground md:col-span-3">Commission is taken from winner payout. Pro discount lowers member rate.</div>
    </div>
  );
}

function VotingSettings() {
  const { settings, setSettings } = useStore();
  return (
    <div className="grid md:grid-cols-3 gap-3 text-sm">
      <NumberField label="Min Votes to Pass" value={settings.votingMinVotes} min={1} max={50} step={1} setValue={(v) => setSettings({ ...settings, votingMinVotes: Number(v) })} />
      <NumberField label="Pass Ratio (0–1)" value={settings.votingPassRatio} min={0.5} max={1} step={0.05} setValue={(v) => setSettings({ ...settings, votingPassRatio: Number(v) })} />
      <label className="text-xs block">
        <div className="mb-1 font-medium">Allow Downvotes</div>
        <input type="checkbox" checked={settings.votingAllowDownvotes} onChange={(e) => setSettings({ ...settings, votingAllowDownvotes: e.target.checked })} />
      </label>
      <div className="text-xs text-muted-foreground md:col-span-3">Proposals auto‑accept when votes ≥ Min and up/(up+down) ≥ Pass Ratio.</div>
    </div>
  );
}

function ProposalsModerator() {
  const { proposals, updateProposal, removeProposal } = useStore();
  const list = proposals.slice().sort((a,b)=> b.createdAt - a.createdAt);
  function setStatus(id, status) { updateProposal(id, { status }); }
  return (
    <div className="text-sm">
      {list.length === 0 ? (
        <div className="text-muted-foreground">No proposals yet. Tell players to hit the Proposals page.</div>
      ) : (
        <table className="w-full text-sm">
          <thead><tr><th className="text-left">Title</th><th className="text-left">Type</th><th className="text-left">Score</th><th className="text-left">Status</th><th className="text-left">Author</th><th className="text-left">When</th><th></th></tr></thead>
          <tbody>
            {list.map(p => (
              <tr key={p.id} className="border-top">
                <td className="py-1">{p.title}</td>
                <td>{p.type}</td>
                <td>{p.up - p.down} ({p.up}/{p.down})</td>
                <td>{p.status}</td>
                <td>{p.authorName || '—'}</td>
                <td>{new Date(p.createdAt).toLocaleString()}</td>
                <td className="text-right space-x-1">
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'open')}>Open</button>
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'accepted')}>Accept</button>
                  <button className="px-2 py-1 rounded border" onClick={()=>setStatus(p.id,'rejected')}>Reject</button>
                  <button className="px-2 py-1 rounded border text-red-600" onClick={()=>removeProposal(p.id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

/* =====================
 * PROPOSALS PAGE (Players vote or suggest changes)
 * ===================== */
function ProposalsPage() {
  const { user } = useAuth();
  const { proposals, addProposal, voteProposal, settings } = useStore();
  const [q, setQ] = useState("");
  const [sort, setSort] = useState("hot"); // hot | top | new
  const [filter, setFilter] = useState("open"); // open | all | mine
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");
  const [type, setType] = useState("Rule Change");

  const list = useMemo(() => {
    let arr = proposals;
    if (filter === 'open') arr = arr.filter(p=>p.status==='open');
    if (filter === 'mine' && user) arr = arr.filter(p=>p.authorName===user.name);
    if (q.trim()) {
      const s = q.toLowerCase();
      arr = arr.filter(p => (p.title+" "+p.body).toLowerCase().includes(s));
    }
    if (sort === 'new') arr = arr.slice().sort((a,b)=> b.createdAt - a.createdAt);
    if (sort === 'top') arr = arr.slice().sort((a,b)=> (b.up-b.down) - (a.up-a.down));
    if (sort === 'hot') arr = arr.slice().sort((a,b)=> hotScore(b) - hotScore(a));
    return arr;
  }, [proposals, q, sort, filter, user]);

  function submit(e){
    e.preventDefault();
    if (!user) { alert('Log in to propose.'); return; }
    if (!title.trim()) { alert('Title required.'); return; }
    addProposal({ title: title.trim(), body: body.trim(), type, authorName: user.name });
    setTitle(""); setBody(""); setType("Rule Change");
  }

  function myVote(p){ return (p.votes && user) ? (p.votes[user.name] || 0) : 0; }
  function doVote(p, val){
    if (!user) { alert('Log in to vote.'); return; }
    if (!settings.votingAllowDownvotes && val < 0) return;
    const current = myVote(p);
    const next = (current === val) ? 0 : val;
    voteProposal(p.id, user.name, next);
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">📥 Proposals & Voting</h2>
        <div className="flex gap-2 text-sm">
          <input value={q} onChange={(e)=>setQ(e.target.value)} placeholder="Search proposals…" className="border rounded-xl px-3 py-2"/>
          <select value={filter} onChange={(e)=>setFilter(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="open">Open</option>
            <option value="all">All</option>
            <option value="mine">My proposals</option>
          </select>
          <select value={sort} onChange={(e)=>setSort(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="hot">Hot</option>
            <option value="top">Top</option>
            <option value="new">New</option>
          </select>
        </div>
      </div>

      <form onSubmit={submit} className="rounded-2xl border p-4 space-y-2">
        <div className="font-semibold">Suggest a change</div>
        <div className="grid md:grid-cols-4 gap-2">
          <input value={title} onChange={(e)=>setTitle(e.target.value)} placeholder="Short title (e.g., Add 10-Ball only nights)" className="border rounded-xl px-3 py-2 md:col-span-2"/>
          <select value={type} onChange={(e)=>setType(e.target.value)} className="border rounded-xl px-3 py-2">
            <option>Rule Change</option>
            <option>New Feature</option>
            <option>Event Idea</option>
            <option>Merch/Promo</option>
          </select>
          <button className="px-3 py-2 rounded-xl bg-black text-white">Post</button>
        </div>
        <textarea value={body} onChange={(e)=>setBody(e.target.value)} placeholder="Details (optional)" className="border rounded-xl px-3 py-2 w-full" rows={3}></textarea>
        <div className="text-xs text-muted-foreground">Auto‑accept when votes ≥ {settings.votingMinVotes} and approvals ≥ {Math.round(settings.votingPassRatio*100)}%.</div>
      </form>

      {/* List */}
      <div className="space-y-2">
        {list.length === 0 ? (
          <div className="text-sm text-muted-foreground">No proposals match. Be the first to post.</div>
        ) : list.map(p => (
          <article key={p.id} className="rounded-2xl border p-3">
            <div className="flex items-start justify-between gap-3">
              <div>
                <div className="text-sm font-semibold">{p.title} <span className="text-xs font-normal inline-block ml-2 rounded-full border px-2 py-0.5">{p.type}</span></div>
                <div className="text-xs text-muted-foreground">by {p.authorName || 'anon'} • {new Date(p.createdAt).toLocaleString()}</div>
              </div>
              <div className="text-right text-xs">
                <div className="font-semibold">Status: {p.status}</div>
                <div>Score: {p.up - p.down} ({p.up}/{p.down})</div>
              </div>
            </div>
            {p.body && <div className="text-sm mt-2 whitespace-pre-wrap">{p.body}</div>}
            {p.status === 'open' ? (
              <div className="flex gap-2 mt-3">
                <button className={`px-3 py-1 rounded-xl border ${myVote(p)>0? 'bg-emerald-50':''}`} onClick={()=>doVote(p,+1)}>👍 Approve</button>
                {settings.votingAllowDownvotes && (
                  <button className={`px-3 py-1 rounded-xl border ${myVote(p)<0? 'bg-red-50':''}`} onClick={()=>doVote(p,-1)}>👎 Oppose</button>
                )}
              </div>
            ) : (
              <div className="text-xs mt-3 text-muted-foreground">Voting closed.</div>
            )}
          </article>
        ))}
      </div>
    </div>
  );
}

function hotScore(p){
  const ageHrs = (Date.now() - (p.createdAt||0)) / 3600000;
  const score = (p.up - p.down);
  return score / Math.pow(ageHrs + 2, 1.1);
}

/* =====================
 * LEADERBOARD PAGE (Elo, Points, Hybrid)
 * ===================== */
function LeaderboardPage() {
  const { players, matches, settings } = useStore();
  const stats = useMemo(() => buildStats(players, matches, settings.initialRating), [players, matches, settings.initialRating]);
  const [mode, setMode] = useState("elo"); // elo | points | hybrid

  const sorted = useMemo(() => {
    const arr = Object.values(stats);
    if (mode === "points") return [...arr].sort((a,b)=> b.points - a.points);
    if (mode === "hybrid") return [...arr].sort((a,b)=> b.power - a.power);
    return [...arr].sort((a,b)=> b.rating - a.rating);
  }, [stats, mode]);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">🏆 Leaderboard</h2>
        <div className="flex gap-2 text-sm">
          <button className={`px-3 py-2 rounded-xl border ${mode==='elo'?'bg-black text-white':''}`} onClick={()=>setMode('elo')}>Elo</button>
          <button className={`px-3 py-2 rounded-xl border ${mode==='points'?'bg-black text-white':''}`} onClick={()=>setMode('points')}>Points</button>
          <button className={`px-3 py-2 rounded-xl border ${mode==='hybrid'?'bg-black text-white':''}`} onClick={()=>setMode('hybrid')}>Hybrid</button>
        </div>
      </div>
      <div className="text-xs text-muted-foreground">
        Money = Points (winner gets the gross stake). Hybrid = Elo + 0.1×Points (keeps money in play without drowning skill).
      </div>
      <table className="w-full text-sm">
        <thead>
          <tr className="bg-gray-50">
            <th className="text-left px-2 py-2">#</th>
            <th className="text-left px-2 py-2">Player</th>
            <th className="text-left px-2 py-2">Elo</th>
            <th className="text-left px-2 py-2">Points</th>
            <th className="text-left px-2 py-2">W‑L</th>
            <th className="text-left px-2 py-2">Streak</th>
            <th className="text-left px-2 py-2">Hybrid</th>
            <th className="text-left px-2 py-2">Badges</th>
          </tr>
        </thead>
        <tbody>
          {sorted.map((row, i) => (
            <tr key={row.id} className="border-t align-middle">
              <td className="px-2 py-1">{i+1}</td>
              <td className="px-2 py-1">{row.name}</td>
              <td className="px-2 py-1"><RatingBadge rating={row.rating} /></td>
              <td className="px-2 py-1">{Math.round(row.points)}</td>
              <td className="px-2 py-1">{row.wins}-{row.losses}</td>
              <td className="px-2 py-1">{row.streak > 1 ? `W${row.streak}` : row.streak < 0 ? `L${-row.streak}` : '—'}</td>
              <td className="px-2 py-1">{Math.round(row.power)}</td>
              <td className="px-2 py-1 text-xs">
                {i===0 && <Badge>👑 King</Badge>}
                {row.streak >= 3 && <Badge>🔥 Streak {row.streak}</Badge>}
                {row.points >= 1000 && <Badge>💰 1K+</Badge>}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

/* =====================
 * PAGES FROM EARLIER CHATS (unchanged/trimmed)
 * ===================== */
function MoneyRulesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💵 Money Rules</h2>
      <ol className="list-decimal pl-5 space-y-2 text-sm">
        <li><span className="font-semibold">Primary — CashApp:</span> both players send stake to operator escrow <span className="font-semibold">before</span> the lag/break. Operator pays winner instantly, minus commission.</li>
        <li><span className="font-semibold">Secondary (approval only):</span> Zelle, Venmo, or cash handed to operator pre‑match.</li>
        <li><span className="font-semibold">Commission from winner:</span> 5% members, 15% non‑members. Pro may be lower per ops settings.</li>
        <li><span className="font-semibold">Non‑members:</span> $12 per match fee.</li>
        <li><span className="font-semibold">Operators paid first.</span></li>
      </ol>
    </div>
  );
}

function PlayerTransparencyPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📝 Player Transparency Sheet (Public)</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Basic $25/mo (5% commission). Pro $40/mo (free tourneys, lower commission).</li>
        <li>Non‑Members: $12 per match (“suckers tax”).</li>
        <li>Bets: $50–$300. Escrow required. Streams: FB/TikTok Live. Walk‑in songs mandatory.</li>
        <li>Activity: 2 matches/mo. Challenges accepted in 7 days or forfeit.</li>
        <li>Points & stats public.</li>
      </ul>
    </div>
  );
}

function PotsAndJackpotsPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💣 Pots & Jackpots</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Break & Run Pot: $2 each match → winner‑take‑all rollovers.</li>
        <li>Hill‑Hill Fee: Lose 6–6, pay $10.</li>
        <li>King Bonus: streak rewards stack.</li>
        <li>Bounty hunts & streak badges.</li>
      </ul>
    </div>
  );
}

function FinesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">⚖️ Fines</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>No‑Show: $30 (to opponent)</li>
        <li>Late: $10 (to opponent)</li>
        <li>Bad Sportsmanship: $20 bounty</li>
        <li>Civil trash talk allowed. Fights = auto‑ban.</li>
      </ul>
    </div>
  );
}

function StreamsAndHypePage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📺 Streams & Hype</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>FB + TikTok Live every event. Walk‑in songs required (no pick → My Heart Will Go On).</li>
        <li>Livestreams: $5 optional; Highlights: $10 per reel.</li>
        <li>Roasts are fun, not humiliation. Keep it savage but civil.</li>
      </ul>
    </div>
  );
}

function DisputesAndSchedulingPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">🧭 Disputes & Scheduling</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Challenges accepted within <span className="font-semibold">7 days</span>. Don’t duck.</li>
        <li>Operator sets date if players can’t agree. Refuse → forfeit/points penalty.</li>
        <li>At 6–6: Chaos Coin (left‑hand only, one‑hand no‑rail, last‑pocket, golden break).</li>
      </ul>
    </div>
  );
}

/* =====================
 * UTIL + BADGES + STATS
 * (Note: these call hooks; keep them inside components if you refactor.)
 * ===================== */
function nameOf(id) {
  const { players } = useStore();
  return players.find((p) => p.id === id)?.name || "Unknown";
}
function ratingOf(id) {
  const { players } = useStore();
  const r = players.find((p) => p.id === id)?.rating;
  return Number.isFinite(r) ? Math.round(r) : 1200;
}
function displayName(id) {
  const n = nameOf(id);
  const r = ratingOf(id);
  return (
    <span className="inline-flex items-center gap-2">{n} <RatingBadge rating={r} /></span>
  );
}
function uid() { return Math.random().toString(36).slice(2) + Date.now().toString(36); }
function round2(n) { return Math.round(n * 100) / 100; }
function q(s) { return '"' + String(s).replace(/"/g, '""') + '"'; }
function dateTag() { return new Date().toISOString().slice(0,10); }
function Select({ label, value, setValue, options }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <select value={value} onChange={(e) => setValue(e.target.value)} className="w-full border rounded-xl px-3 py-2">
        <option value="">— Select —</option>
        {options.map((o) => (
          <option key={o.id} value={o.id}>{o.name}</option>
        ))}
      </select>
    </label>
  );
}
function NumberField({ label, value, setValue, min, max, step }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <input type="number" className="w-full border rounded-xl px-3 py-2" value={value} min={min} max={max} step={step} onChange={(e) => setValue(Number(e.target.value))} />
    </label>
  );
}
function fmtMatch(m, players) {
  const fav = players.find(p=>p.id===m.favoriteId)?.name || "?";
  const chal = players.find(p=>p.id===m.challengerId)?.name || "?";
  return `${fav} vs ${chal} — $${m.base} — ${m.mode === "extra_cash" ? "More Cash (1.2×)" : `Weight (${m.weightNote||"n/a"})`} ${m.date? "— " + new Date(m.date).toLocaleString():""}`;
}
function stakes(base, mode) {
  const favoriteStake = mode === "extra_cash" ? round2(base * 1.2) : round2(base);
  const challengerStake = round2(base);
  return { favoriteStake, challengerStake };
}

function Badge({ children }) {
  return <span className="inline-flex items-center rounded-full border px-2 py-0.5 text-[10px] mr-1">{children}</span>;
}
function RatingBadge({ rating }) {
  return <span className="inline-flex items-center rounded-full border px-2 py-0.5 text-[10px]">Elo {Math.round(rating)}</span>;
}

function buildStats(players, matches, defaultRating=1200) {
  const map = {};
  for (const p of players) {
    map[p.id] = { id: p.id, name: p.name, rating: Number.isFinite(p.rating) ? p.rating : defaultRating, points: 0, wins: 0, losses: 0, streak: 0, lastResultAt: 0 };
  }
  // sort by time and update streaks & points
  const settled = matches.filter(m => m.settled && m.result?.winner).sort((a,b)=> (a.createdAt||0) - (b.createdAt||0));
  for (const m of settled) {
    const fav = map[m.favoriteId];
    const chal = map[m.challengerId];
    if (!fav || !chal) continue;
    const winnerId = m.result.winner === 'favorite' ? m.favoriteId : m.challengerId;
    const loserId  = m.result.winner === 'favorite' ? m.challengerId : m.favoriteId;
    const winner = map[winnerId];
    const loser = map[loserId];
    winner.wins += 1; loser.losses += 1;
    const gross = Number(m.result.gross || m.base || 0);
    winner.points += gross; // Money = Points (gross to winner)
    // very simple streak calc: reset on loss
    winner.streak = (winner.streak >= 0 ? winner.streak + 1 : 1);
    loser.streak = (loser.streak <= 0 ? loser.streak - 1 : -1);
    winner.lastResultAt = loser.lastResultAt = (m.createdAt||0);
  }
  // compute hybrid
  for (const id in map) {
    const r = map[id];
    r.power = r.rating + 0.1 * r.points; // Hybrid = Elo + 0.1×Points
  }
  return map;
}

function NotFound() {
  return (
    <div className="text-sm">Page not found. Try the <NavLink className="underline" to="/">home page</NavLink>.</div>
  );
}
