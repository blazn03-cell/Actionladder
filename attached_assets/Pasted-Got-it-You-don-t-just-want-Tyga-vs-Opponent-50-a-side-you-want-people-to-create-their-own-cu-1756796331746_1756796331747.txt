Got it ✅ You don’t just want “Tyga vs Opponent, $50 a side” — you want people to create their own custom side pot, where the creator writes the terms of the bet. Example:

“I bet 100 credits that Tyga breaks and runs the first rack.”

“50 credits that the match goes hill-hill.”

“20 credits that Opponent scratches on the 8.”

That means custom side pots where the creator sets:

A title/description of the bet.

Stake per side (or variable amounts if you want multiple joiners).

Labels for Side A / Side B (e.g., Yes / No, Tyga / Opponent, Over / Under).

🛠 Data model tweak

In your side_pots table add:

ALTER TABLE side_pots ADD COLUMN description TEXT;
ALTER TABLE side_pots ADD COLUMN custom_created_by TEXT; -- user_id

🔑 API tweak

When someone creates a pot:

app.post('/api/sidepots', (req: any, res) => {
  const { matchId, sideALabel, sideBLabel, stakePerSide, feeBps = 800, lockCutoffAt, description } = req.body;
  const potId = id('pot');
  tx(() => {
    db.prepare('INSERT INTO side_pots(id,match_id,creator_id,side_a_label,side_b_label,stake_per_side,fee_bps,status,lock_cutoff_at,description,custom_created_by) VALUES (?,?,?,?,?,?,?,?,?,?,?)')
      .run(potId, matchId || null, req.user.id, sideALabel, sideBLabel, stakePerSide, feeBps, 'open', lockCutoffAt || nowISO(), description, req.user.id);
  });
  res.json({ id: potId });
});

🎛 Frontend form

CustomSidePotCreator.tsx

import { useState } from 'react';

export default function CustomSidePotCreator() {
  const [desc, setDesc] = useState('');
  const [a, setA] = useState('Yes');
  const [b, setB] = useState('No');
  const [stake, setStake] = useState(500); // cents

  const create = async () => {
    const body = {
      sideALabel: a,
      sideBLabel: b,
      stakePerSide: stake,
      feeBps: 800,
      description: desc,
      lockCutoffAt: new Date(Date.now()+5*60*1000).toISOString()
    };
    const r = await fetch('/api/sidepots', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    const j = await r.json();
    alert('Custom bet created: ' + j.id);
  };

  return (
    <div className="space-y-2 border rounded p-3">
      <textarea
        value={desc}
        onChange={e=>setDesc(e.target.value)}
        placeholder="Describe your bet (e.g., Tyga runs the first rack)"
        className="w-full border p-2"
      />
      <input value={a} onChange={e=>setA(e.target.value)} className="border p-2" placeholder="Side A Label"/>
      <input value={b} onChange={e=>setB(e.target.value)} className="border p-2" placeholder="Side B Label"/>
      <input type="number" value={stake} onChange={e=>setStake(Number(e.target.value))} className="border p-2" placeholder="Stake in cents"/>
      <button onClick={create} className="px-4 py-2 rounded bg-emerald-600 text-white">Create Custom Side Pot</button>
    </div>
  );
}

🔒 Operator guard

Normal players can create/join custom pots.

Only operators (you + trustees) can Resolve/ Void them.

That way, if a dispute comes up (“did Tyga really run the rack?”), operators decide.

📌 Displaying custom bets

In SidePotCard, show:

{pot.description && <p className="italic text-gray-600">{pot.description}</p>}

✅ Summary

Bettors can make up their own bet idea.

They define description + labels + stake.

System handles escrow + resolution exactly like match pots.

Operators still control the final outcome.

Want me to also give you a sample operator workflow for resolving these “creative bets” (like Yes/No, Over/Under) so you can keep it fair and consistent?