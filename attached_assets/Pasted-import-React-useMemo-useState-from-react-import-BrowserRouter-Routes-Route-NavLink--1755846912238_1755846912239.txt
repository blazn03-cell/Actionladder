import React, { useMemo, useState } from "react";
import { BrowserRouter, Routes, Route, NavLink } from "react-router-dom";
import Rulebook from "./Rulebook";
import LadderStakesRule from "./LadderStakesRule";
import MistakeLab from "./MistakeLab";

export default function App() {
  return (
    <BrowserRouter>
      <div className="min-h-screen bg-white text-gray-900">
        <Nav />
        <main className="mx-auto w-full max-w-6xl p-4 md:p-8">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/rulebook" element={<Rulebook />} />
            <Route path="/stakes" element={<LadderStakesRule />} />
            <Route path="/film-room" element={<MistakeLab />} />
            <Route path="/money" element={<MoneyRulesPage />} />
            <Route path="/transparency" element={<PlayerTransparencyPage />} />
            <Route path="/pots" element={<PotsAndJackpotsPage />} />
            <Route path="/fines" element={<FinesPage />} />
            <Route path="/streams" element={<StreamsAndHypePage />} />
            <Route path="/disputes" element={<DisputesAndSchedulingPage />} />
            <Route path="/ops" element={<OperatorsManualPage />} />
            <Route path="*" element={<NotFound />} />
          </Routes>
        </main>
        <Footer />
      </div>
    </BrowserRouter>
  );
}

function Nav() {
  const link = ({ isActive }) =>
    `px-3 py-2 rounded-xl text-sm ${isActive ? "bg-black text-white" : "hover:bg-gray-100"}`;
  return (
    <header className="border-b">
      <div className="mx-auto max-w-6xl p-4 flex items-center justify-between gap-3">
        <div className="font-extrabold tracking-tight text-lg">🎱 Tri‑City Texas Ladder</div>
        <nav className="flex flex-wrap gap-2">
          <NavLink to="/" className={link} end>Home</NavLink>
          <NavLink to="/rulebook" className={link}>Rulebook</NavLink>
          <NavLink to="/stakes" className={link}>Stakes</NavLink>
          <NavLink to="/film-room" className={link}>Mistake Lab</NavLink>
          <NavLink to="/money" className={link}>Money Rules</NavLink>
          <NavLink to="/transparency" className={link}>Player Sheet</NavLink>
          <NavLink to="/pots" className={link}>Pots</NavLink>
          <NavLink to="/fines" className={link}>Fines</NavLink>
          <NavLink to="/streams" className={link}>Streams</NavLink>
          <NavLink to="/disputes" className={link}>Disputes</NavLink>
          <NavLink to="/ops" className={link}>Operators</NavLink>
        </nav>
      </div>
    </header>
  );
}

function Home() {
  return (
    <div className="space-y-4">
      <h1 className="text-3xl md:text-4xl font-extrabold">Pool • Points • Pride • Payouts</h1>
      <p className="text-sm text-muted-foreground max-w-prose">
        Welcome to the only ladder where pool feels like UFC, casino night, and a comedy roast. Grab the rulebook, set your stakes, and
        hit the Film Room to turn L's into levels.
      </p>
      <ul className="grid md:grid-cols-3 gap-3">
        <HomeCard title="Read the Rulebook" to="/rulebook"/>
        <HomeCard title="Lock Stakes" to="/stakes"/>
        <HomeCard title="Mistake Lab" to="/film-room"/>
        <HomeCard title="Money Rules" to="/money"/>
        <HomeCard title="Pots & Jackpots" to="/pots"/>
        <HomeCard title="Disputes & Scheduling" to="/disputes"/>
      </ul>
    </div>
  );
}

function HomeCard({ title, to }) {
  return (
    <li>
      <NavLink to={to} className="block rounded-2xl border p-4 hover:shadow-sm">
        <div className="font-semibold">{title}</div>
        <div className="text-xs text-muted-foreground">Open</div>
      </NavLink>
    </li>
  );
}

function Footer() {
  return (
    <footer className="border-t mt-8">
      <div className="mx-auto max-w-6xl p-4 text-xs text-muted-foreground">
        © {new Date().getFullYear()} Tri‑City Texas Ladder — Fight‑night pool, savage transparency.
      </div>
    </footer>
  );
}

/* =====================
 * Pages pulled from prior chats
 * ===================== */

function MoneyRulesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💵 Money Rules</h2>
      <ol className="list-decimal pl-5 space-y-2 text-sm">
        <li>
          <span className="font-semibold">Primary Method — CashApp (Official Ladder Bank):</span> Both players send the full stake to the
          operator escrow <span className="font-semibold">before</span> the lag/break. Operator pays the winner instantly after the match,
          <span className="font-semibold"> minus commission</span>.
        </li>
        <li>
          <span className="font-semibold">Secondary Methods (operator approval only):</span> Zelle, Venmo, or cash handed to the operator
          <span className="font-semibold"> before</span> the first break.
        </li>
        <li>
          <span className="font-semibold">Commission comes out of the winner’s payout:</span> 5% members, 15% non‑members. Pro plans may be
          lower per ops settings.
        </li>
        <li>
          <span className="font-semibold">Non‑members pay a $12 match fee</span> (“suckers tax”).
        </li>
        <li>
          <span className="font-semibold">Operators always get paid first.</span>
        </li>
      </ol>
    </div>
  );
}

function PlayerTransparencyPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📝 Player Transparency Sheet (Public)</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Membership: Basic $25/mo (5% commission), Pro $40/mo (free tourneys, lower commission).</li>
        <li>Non‑Members: $12 per match.</li>
        <li>Bets: $50–$300. Escrow required. Streams on FB/TikTok. Walk‑in songs mandatory (no pick → Baby Shark).</li>
        <li>Activity: 2 matches per month required to stay active. Challenges must be accepted within 7 days.</li>
        <li>Points & stats visible to all — can’t hide from the grind.</li>
      </ul>
    </div>
  );
}

function PotsAndJackpotsPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">💣 Pots & Jackpots</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>
          <span className="font-semibold">Break & Run Pot:</span> $2 each match → winner‑take‑all rollovers until someone snaps it off.
        </li>
        <li>
          <span className="font-semibold">Hill‑Hill Fee:</span> Lose 6–6, pay $10.
        </li>
        <li>
          <span className="font-semibold">King Bonus:</span> streak rewards stack for staying on top.
        </li>
        <li>
          <span className="font-semibold">Bounty Hunts:</span> extra cash for taking down hot players.
        </li>
        <li>
          <span className="font-semibold">Streak Badges:</span> public flex in your profile.
        </li>
      </ul>
    </div>
  );
}

function FinesPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">⚖️ Fines</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>No‑Show: <span className="font-semibold">$30</span> (opponent gets paid).</li>
        <li>Late Arrival: <span className="font-semibold">$10</span> (opponent pockets it).</li>
        <li>Bad Sportsmanship: <span className="font-semibold">$20</span> bounty.</li>
        <li>Civil trash talk allowed. Fights = auto‑ban.</li>
      </ul>
    </div>
  );
}

function StreamsAndHypePage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">📺 Streams & Hype</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>FB + TikTok Live every event. Walk‑in songs required (no pick → My Heart Will Go On).</li>
        <li>Livestream buy‑ins: <span className="font-semibold">$5</span> (optional).</li>
        <li>Highlight reels: <span className="font-semibold">$10</span> to clip your best/worst shots.</li>
        <li>Roasts = fun, not humiliation. Keep it civil and savage.</li>
      </ul>
    </div>
  );
}

function DisputesAndSchedulingPage() {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-bold">🧭 Disputes & Scheduling</h2>
      <ul className="list-disc pl-5 text-sm space-y-1">
        <li>Challenges must be accepted within <span className="font-semibold">7 days</span> (time and date). Don’t duck.</li>
        <li>If both can’t agree on a time, the operator will set the date. If either refuses, they <span className="font-semibold">forfeit</span>.</li>
        <li>If both refuse the set date, both lose points and must pay the forfeit fee. Be respectful to the operator—they’re finding middle ground.</li>
        <li>At 6–6: the <span className="font-semibold">Chaos Coin</span> decides (left‑handed only, one‑hand no‑rail, last‑pocket, or golden break).</li>
      </ul>
    </div>
  );
}

function OperatorsManualPage() {
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">🧑‍💻 Operator Rulebook (Private, Savage & Detailed)</h2>
      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Money & Commission</h3>
        <ul className="list-disc pl-5 text-sm space-y-1">
          <li>All bets go through operator escrow (CashApp/Zelle/Venmo/cash).</li>
          <li>Commission is taken from the winner’s payout. Member = 5%, Non‑member = 15% (house + ops split).</li>
          <li>Commission is <span className="font-semibold">embedded</span> in payouts—players don’t handle the math. Operators get paid first.</li>
        </ul>
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Revenue Calculator</h3>
        <RevenueCalculator />
      </div>

      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-2">Operations Notes</h3>
        <ul className="list-disc pl-5 text-sm space-y-1">
          <li>Activity enforcement: 2 matches/month minimum.</li>
          <li>Escrow audit: screenshots or app receipts attached to match report.</li>
          <li>Streaming kit checklist: phone clamp, tripod, mic, light, backup hotspot.</li>
          <li>Safety & vibe: civil trash talk, zero‑fight tolerance, instant bans on violence.</li>
        </ul>
      </div>
    </div>
  );
}

function RevenueCalculator() {
  const [players, setPlayers] = useState(20); // 13–30 typical
  const [matchesPerPlayer, setMatchesPerPlayer] = useState(2); // per month (active rule)
  const [avgBet, setAvgBet] = useState(100); // $50 or $100+ scenarios
  const [memberPct, setMemberPct] = useState(0.7); // share of matches with members
  const [opsShare, setOpsShare] = useState(0.6); // ops share of commission split (house + ops)
  const [nonMemberFeeRate, setNonMemberFeeRate] = useState(0.2); // fraction of matches that are non‑member matches

  const calc = useMemo(() => {
    const totalMatches = Math.round((players * matchesPerPlayer) / 2); // each match has 2 players
    const memberMatches = totalMatches * memberPct;
    const nonMemberMatches = totalMatches - memberMatches;
    const commissionMember = memberMatches * avgBet * 0.05;
    const commissionNonMember = nonMemberMatches * avgBet * 0.15;
    const commissionTotal = commissionMember + commissionNonMember;

    const nonMemberFeeMatches = Math.round(totalMatches * nonMemberFeeRate);
    const nonMemberFees = nonMemberFeeMatches * 12; // $12 per match

    const grossOps = (commissionTotal * opsShare) + nonMemberFees;
    const perOperatorIf4 = grossOps / 4;

    return {
      totalMatches,
      memberMatches,
      nonMemberMatches,
      commissionMember,
      commissionNonMember,
      commissionTotal,
      nonMemberFees,
      grossOps,
      perOperatorIf4,
    };
  }, [players, matchesPerPlayer, avgBet, memberPct, opsShare, nonMemberFeeRate]);

  return (
    <div className="text-sm space-y-3">
      <div className="grid md:grid-cols-3 gap-3">
        <NumberField label="# Players" value={players} setValue={setPlayers} min={10} max={60} step={1} />
        <NumberField label="Matches per Player / mo" value={matchesPerPlayer} setValue={setMatchesPerPlayer} min={2} max={10} step={1} />
        <NumberField label="Average Bet ($)" value={avgBet} setValue={setAvgBet} min={50} max={300} step={10} />
        <NumberField label="Member Match Share" value={memberPct} setValue={setMemberPct} min={0} max={1} step={0.05} />
        <NumberField label="Ops Share of Commission" value={opsShare} setValue={setOpsShare} min={0} max={1} step={0.05} />
        <NumberField label="Non‑Member Match Rate" value={nonMemberFeeRate} setValue={setNonMemberFeeRate} min={0} max={1} step={0.05} />
      </div>

      <div className="grid md:grid-cols-2 gap-3">
        <div className="rounded-xl border p-3 bg-gray-50">
          <div>Total Matches / mo: <span className="font-semibold">{calc.totalMatches}</span></div>
          <div>Member Matches: {calc.memberMatches.toFixed(1)} | Non‑Member Matches: {calc.nonMemberMatches.toFixed(1)}</div>
          <div>Commission — Members: ${calc.commissionMember.toFixed(2)} | Non‑Members: ${calc.commissionNonMember.toFixed(2)}</div>
          <div className="font-semibold">Commission Total: ${calc.commissionTotal.toFixed(2)}</div>
        </div>
        <div className="rounded-xl border p-3 bg-gray-50">
          <div>Non‑Member Match Fees: ${calc.nonMemberFees.toFixed(2)}</div>
          <div>Gross to Operators (incl. fees): <span className="font-semibold">${calc.grossOps.toFixed(2)}</span></div>
          <div>Per Operator (4 ops): <span className="font-semibold">${calc.perOperatorIf4.toFixed(2)}</span></div>
          <div className="text-xs text-muted-foreground mt-1">Tweak sliders to target $350–$400 per operator at ~20 players.</div>
        </div>
      </div>
    </div>
  );
}

function NumberField({ label, value, setValue, min, max, step }) {
  return (
    <label className="text-xs block">
      <div className="mb-1 font-medium">{label}</div>
      <input
        type="number"
        className="w-full border rounded-xl px-3 py-2"
        value={value}
        min={min}
        max={max}
        step={step}
        onChange={(e) => setValue(sanitize(e.target.value, min, max))}
      />
    </label>
  );
}

function sanitize(v, min, max) {
  const n = Number(v);
  if (!isFinite(n)) return min;
  return Math.min(max, Math.max(min, n));
}

function NotFound() {
  return (
    <div className="text-sm">Page not found. Try the <NavLink className="underline" to="/">home page</NavLink>.</div>
  );
}
