Free Tournament Brackets (react)
· typescript
// Free Tournament Brackets (React)
// ------------------------------------------------------------
// ✅ Purpose: Standalone "Tournament Mode" for your free version.
// - Anyone can sign up when an operator is running a tournament
// - Randomized seeding into single-elimination brackets (double-elim stubbed)
// - Phone camera photo → OCR (Tesseract.js) → auto-fill match winners
// - Manual tap to set winner if OCR fails
// - Local persistence (localStorage) so refresh won't lose state
// - Winner poster generator (downloadable PNG)
//
// ⚙️ How to use (Vite + React recommended):
// 1) npm i tesseract.js
// 2) Drop this component into your app and render <FreeTournament />
// 3) On mobile, the photo picker opens the camera via `capture="environment"`
// 4) Optional: swap localStorage with your DB (Supabase/Firebase) — marked TODOs
// ------------------------------------------------------------


import React, { useEffect, useMemo, useRef, useState } from "react";


// -------------------- Types --------------------
interface Player {
  id: string;
  name: string;
}


interface Match {
  id: string;
  round: number; // 1-indexed
  a: Player | null; // left/top
  b: Player | null; // right/bottom
  scoreA?: number;
  scoreB?: number;
  winnerId?: string; // a.id or b.id
  nextMatchId?: string; // link forward
  nextSlot?: "a" | "b"; // where the winner goes next
}


interface BracketState {
  id: string;
  name: string;
  format: "single" | "double"; // double is stubbed below
  players: Player[];
  matches: Match[];
  createdAt: number;
}


// -------------------- Utils --------------------
const uid = () => Math.random().toString(36).slice(2, 10);


function shuffle<T>(arr: T[]): T[] {
  const a = [...arr];
  for (let i = a.length - 1; i > 0; i--) {
    const j = crypto.getRandomValues(new Uint32Array(1))[0] % (i + 1);
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}


function nextPowerOfTwo(n: number) {
  if (n < 1) return 1;
  return 1 << (32 - Math.clz32(n - 1));
}


function byesNeeded(n: number) {
  return nextPowerOfTwo(n) - n;
}


function saveLocal(key: string, value: any) {
  try { localStorage.setItem(key, JSON.stringify(value)); } catch {}
}
function loadLocal<T>(key: string, fallback: T): T {
  try {
    const raw = localStorage.getItem(key);
    return raw ? (JSON.parse(raw) as T) : fallback;
  } catch {
    return fallback;
  }
}


// -------------------- OCR --------------------
async function ocrImage(file: File): Promise<string> {
  // Dynamic import to keep initial bundle small
  const { createWorker } = await import("tesseract.js");
  const worker = await createWorker({ logger: () => {} });
  try {
    await worker.loadLanguage("eng");

Boom — I spun up a clean “Tournament Mode (Free)” React component for you with:

Random seeding into a single-elimination bracket (double-elim stub included for later)

Camera → OCR → auto-fill winners (Tesseract.js in the browser)

Manual tap to set winner if OCR can’t read the sheet

Local save (so a refresh won’t wipe your bracket)

Operator gate (demo pass: op1234)

Winner poster generator (downloadable PNG)

Open the canvas on the right to see the full code.

Quick start (Replit/Vite):

Create a React app (Vite is fine).

npm i tesseract.js

Drop the component in and render <FreeTournament />.

On phones, the “Photo → Fill” button opens the camera (uses capture="environment")