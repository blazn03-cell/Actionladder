STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
APP_BASE_URL=https://yourdomain.com

# Monthly tiers
STRIPE_PRICE_SMALL_M=price_...
STRIPE_PRICE_MEDIUM_M=price_...
STRIPE_PRICE_LARGE_M=price_...
STRIPE_PRICE_MEGA_M=price_...

# Annual tiers
STRIPE_PRICE_SMALL_Y=price_...
STRIPE_PRICE_MEDIUM_Y=price_...
STRIPE_PRICE_LARGE_Y=price_...
STRIPE_PRICE_MEGA_Y=price_...

# Add-ons (monthly)
STRIPE_PRICE_ADDON_ANALYTICS_M=price_...
STRIPE_PRICE_ADDON_BRANDING_M=price_...
STRIPE_PRICE_ADDON_TOURNAMENT_M=price_...

# Multi-hall
STRIPE_PRICE_MULTIHALL_M=price_...
STRIPE_PRICE_MULTIHALL_Y=price_...

# Admin + waitlist
ADMIN_EMAIL=you@domain.com
ADMIN_PASSWORD=supersecret
ADMIN_JWT_SECRET=change_this
WAITLIST_MEGA_MIN=15
3) Enable Customer Portal
Stripe Dashboard → Billing → Customer Portal:

Allow Plan changes (proration on), Payment methods, Cancel, Invoices.

Paste our /api/billing/portal route (already coded) into your app.

4) Webhooks
Stripe Dashboard → Developers → Webhooks:

Add endpoint: POST https://yourdomain.com/api/billing/webhook

Select events: checkout.session.completed, customer.subscription.*

Copy Signing Secret → .env as STRIPE_WEBHOOK_SECRET.

5) Update Checkout to support annual, add-ons, multi-hall
In your /api/billing/checkout handler, accept:

billingPeriod: "monthly" | "annual"

addonKeys: string[] (e.g., ["analytics","branding"])

halls: total halls (>=1). Add one extra line item for each additional hall.

Minimal patch (drop-in idea):

js
Copy code
// pseudo inside your /checkout route
const { playerCount, hallId, operatorId, email, billingPeriod="monthly", addonKeys=[], halls=1 } = req.body;

const tier = resolveTierByPlayers(Number(playerCount));

// pick base price by period
const basePrice = billingPeriod === "annual"
  ? process.env[`STRIPE_PRICE_${tier.name.toUpperCase()}_Y`]
  : process.env[`STRIPE_PRICE_${tier.name.toUpperCase()}_M`];

const line_items = [{ price: basePrice, quantity: 1 }];

// add-ons (monthly only in this example)
const ADDON_MAP = {
  analytics: process.env.STRIPE_PRICE_ADDON_ANALYTICS_M,
  branding: process.env.STRIPE_PRICE_ADDON_BRANDING_M,
  tournament: process.env.STRIPE_PRICE_ADDON_TOURNAMENT_M,
};
for (const k of addonKeys) {
  const p = ADDON_MAP[k];
  if (p) line_items.push({ price: p, quantity: 1 });
}

// multi-hall
const extraHalls = Math.max(0, (halls || 1) - 1);
if (extraHalls > 0) {
  const multiPrice = billingPeriod === "annual"
    ? process.env.STRIPE_PRICE_MULTIHALL_Y
    : process.env.STRIPE_PRICE_MULTIHALL_M;
  line_items.push({ price: multiPrice, quantity: extraHalls });
}

// then create session with line_items
const session = await stripe.checkout.sessions.create({
  mode: "subscription",
  line_items,
  customer_email: email,
  success_url: url("/billing/success?session_id={CHECKOUT_SESSION_ID}"),
  cancel_url: url("/billing/cancel"),
  metadata: { hallId, operatorId, playerCount: String(playerCount), tier: tier.name, billingPeriod, addonKeys: addonKeys.join(","), halls: String(halls) },
  subscription_data: { metadata: { hallId, operatorId, tier: tier.name } },
});