/api/player/:id/revenue ‚Üí returns the PlayerRevenueView (cheaper cost + winnings only).

/api/admin/revenue ‚Üí returns the full forecast/actuals report (operators, trustees, owner).

Role-based auth (JWT or session) ensures only owner, trustees, operators hit /admin.

1. Player View Endpoint
// routes/playerRevenue.ts
import express from "express";
import { getPlayerRevenueView } from "../playerRevenueView";

const router = express.Router();

router.get("/:id/revenue", async (req, res) => {
  try {
    const playerId = req.params.id;
    const view = getPlayerRevenueView(playerId);
    res.json(view); // only shows cost vs leagues + potential winnings
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to fetch player revenue view" });
  }
});

export default router;

2. Admin (Operator / Owner / Trustee) Endpoint
// routes/adminRevenue.ts
import express from "express";
import { forecastRevenue, getRevenueReportActuals } from "../revenue_plus";
import { requireAdminAuth } from "../middleware/auth";

const router = express.Router();

// Forecast
router.post("/forecast", requireAdminAuth, (req, res) => {
  try {
    const inputs = req.body; // pass ForecastInputs
    const report = forecastRevenue(inputs);
    res.json(report);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to forecast revenue" });
  }
});

// Actuals
router.get("/actuals", requireAdminAuth, async (req, res) => {
  try {
    const { start, end, hallsThreshold } = req.query;
    const report = await getRevenueReportActuals(
      new Date(start as string),
      new Date(end as string),
      { hallsThresholdForScale: parseInt(hallsThreshold as string, 10) }
    );
    res.json(report);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to get actual revenue" });
  }
});

export default router;

3. Auth Middleware (private dashboard)
// middleware/auth.ts
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

export function requireAdminAuth(req: Request, res: Response, next: NextFunction) {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "No token" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET!);
    // roles: "owner" | "trustee" | "operator" | "player"
    if (!["owner", "trustee", "operator"].includes((decoded as any).role)) {
      return res.status(403).json({ error: "Forbidden" });
    }

    (req as any).user = decoded;
    next();
  } catch (err) {
    console.error("Auth failed:", err);
    res.status(401).json({ error: "Invalid token" });
  }
}

4. Player Pricing (Cheaper Than Leagues)

League baseline: $40 signup + $10/week ‚âà $80/month.

Action Ladder plan: $30 signup + $8/week ‚âà $62/month.

Savings = $18 per month per player.

Still leaves margin for operator & trustees because match fees + fan tips + gifted subs cover incentives.

5. Example Flow

Player logs into app ‚Üí sees only:

‚Äú$62/month vs $80 leagues‚Äù

Weekly pots, streak bonuses, milestones, avg match winnings

Operator / Trustee / Owner logs into admin panel ‚Üí sees:

Full inflows (subs, fees, tips, gifts, SaaS)

Splits (operator %, trustees, owner parity/scale)

Incentives cost + pot accruals

Platform net after payouts

üî• This way:

Players = hyped about cheap cost & winnings.

Operators/Trustees/You = see the true revenue engine.