Action Ladder ‚Äì Training Incentive Engine (backend + Ui)
¬∑ typescript
// ================================
        <tbody>
          {rows.map((r,i)=> (
            <tr key={i} className="border-t">
              <td className="p-2 font-semibold">{r.rank}</td>
              <td className="p-2">{r.player_name}</td>
              <td className="p-2">{r.ladder_name}</td>
              <td className="p-2">{Number(r.hours_total).toFixed(1)}</td>
              <td className="p-2">{Number(r.coach_avg).toFixed(1)}</td>
              <td className="p-2">{Number(r.total_score).toFixed(1)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}


// web/src/pages/HallLeaderboard.tsx
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api';
import LeaderboardTable from '../components/LeaderboardTable';


export default function HallLeaderboard(){
  const [rows, setRows] = useState<any[]>([]);
  const [period, setPeriod] = useState<string>('');
  const hallId = new URLSearchParams(location.search).get('hallId') || 'HALL_UUID';


  useEffect(()=>{
    (async()=>{
      const month = new Date().toISOString().slice(0,7);
      const data = await api(`/hall/${hallId}/training-leaderboard?month=${month}`);
      setRows(data.data); setPeriod(data.period);
    })();
  },[hallId]);


  return (
    <div className="max-w-5xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-2">üèÜ Training Leaderboard</h1>
      <p className="text-gray-600 mb-4">Hall: {hallId} ‚Ä¢ Period: {period}</p>
      <LeaderboardTable rows={rows} />
      <p className="mt-4 text-sm text-gray-500">Top scorer each month gets 50% off. No double-dip unless each ladder has ‚â•5 active players ‚Äî then the player may earn a free month.</p>
    </div>
  );
}


// web/src/pages/AdminRewards.tsx
import React, { useState } from 'react';
import { api } from '../lib/api';


export default function AdminRewards(){
  const [period, setPeriod] = useState(new Date().toISOString().slice(0,7));
  const [status, setStatus] = useState<string>('');


  const run = async () => {
    setStatus('Running‚Ä¶');
    const res = await api('/rewards/run-monthly', { method:'POST', body: JSON.stringify({ period })});
    setStatus(`Applied for ${res.period}`);
  };


  return (
    <div className="max-w-xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-2">Admin ‚Ä¢ Apply Monthly Rewards</h1>
      <label className="block text-sm mb-2">Period (YYYY-MM)</label>
      <input value={period} onChange={e=>setPeriod(e.target.value)} className="border p-2 rounded w-full mb-4"/>
      <button onClick={run} className="px-4 py-2 bg-black text-white rounded">Run Now</button>
      <div className="mt-3 text-sm text-gray-600">{status}</div>
    </div>
  );
}


// ================================
// Notes
// ‚Ä¢ Create the two coupons in Stripe (50% and 100%) and set STRIPE_COUPON_HALF / STRIPE_COUPON_FREE in env.
// ‚Ä¢ session_analytics data should be populated by your CV pipeline; this code aggregates and ranks.
// ‚Ä¢ The cron will auto-run monthly; you can also trigger via AdminRewards page.
// ‚Ä¢ Double-dip rule is enforced in computeRewards(): full-free only if all ladders the player is in have ‚â•5 active players in that period.
// ‚Ä¢ Extend hallLeaderboard() to show reward badges by joining subscription_rewards if desired.