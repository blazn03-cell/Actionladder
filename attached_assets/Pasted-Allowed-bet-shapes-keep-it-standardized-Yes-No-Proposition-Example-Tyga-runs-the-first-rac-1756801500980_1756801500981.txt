Allowed bet shapes (keep it standardized)

Yes / No (Proposition)

Example: “Tyga runs the first rack.”

Labels: Yes / No.

Outcome source: stream VOD + scorekeeper notes.

Over / Under (Numeric)

Example: “Over/Under 3.5 break & runs in match.”

Labels: Over / Under.

Outcome source: set/match stats.

Side A / Side B (Event happens to a player)

Example: “Who makes the last ball in rack 5: Tyga or Opponent?”

Labels: Tyga / Opponent.

Avoid parlays/multi-legs at launch. Add later if you want.

B) Creation rules (what bettors must fill)

Description (what must happen): 5–200 chars.

Type: yes_no | over_under | player_prop.

Labels: Side A / Side B (e.g., Yes/No).

Stake per side: min 500 credits ($5).

Lock cutoff: default T-5 min before the event (e.g., before rack 1 or before “first break”).

Verification source (dropdown): Official Stream, Table Referee, Score App Screenshot.

Tip: add a UI hint: “Make it objective. If we can’t verify, operators will void.”

C) Operator dashboard states

Open → In funding window.

Locked → Fully funded; betting closed.

Hold → Evidence requested; don’t resolve yet.

Resolved → Winner side chosen; credits released.

Voided → Refunded to both sides.

Buttons per pot:

Resolve A / Resolve B

Put On Hold (request evidence)

Void (can’t verify / bad wording / wrong lock timing)

D) Evidence you accept (in this order)

Official stream timestamp (clip or minute:second).

Table ref / operator note (entered right after the rack).

Score app screenshot (with timestamp).

If conflicting, majority of two operators decide after reviewing VOD.

If none of the above is available or the wording is ambiguous → Void.

E) Decision tree (use this every time)

Is the wording specific & objective?

No → Void (refund).

Yes → continue.

Did the pot lock before the relevant moment?

No (late lock) → Void.

Yes → continue.

Is evidence available from accepted sources?

No → Hold for up to 24h, ping bettors for clips → then Void if still unclear.

Yes → continue.

Does evidence clearly show Side A or Side B outcome?

Yes → Resolve (pick winner).

Unclear/conflicting → Hold, second operator review → if still unclear Void.

F) Resolution timing & comms

Target: Resolve within 10 minutes of the triggering event (e.g., after rack ends).

Hold window: Max 24 hours for evidence.

Auto-void: At 24h + 5 min, unresolved → Void.

Quick canned messages (UI to both sides):

Resolved: “Pot [#123] resolved: {A|B} wins. Winnings credited. Service fee applied.”

On Hold: “Pot [#123] is on hold. Please supply VOD timestamp or screenshot within 24h.”

Voided: “Pot [#123] voided due to unverifiable outcome. Locked credits refunded.”

G) Payout math (unchanged)

Fee = fee_bps × total pot (e.g., 800 bps = 8%).

Distribute winnings pro-rata among all bettors on the winning side.

Losers: locked credits released to pool; winners receive stake + share − fee.

H) Anti-abuse rules

Ambiguous phrasing → Void + warn creator.

Unverifiable niche props (e.g., “Tyga thinks about X”) → reject at creation or Void.

Live-info angle (creating a pot after event is essentially decided) → auto-reject (system should enforce lock cutoff).

Spam pots → rate-limit per user (e.g., max 3 open pots at once).

I) Schema & API touches (so it’s structured)

Add fields

ALTER TABLE side_pots ADD COLUMN description TEXT;
ALTER TABLE side_pots ADD COLUMN bet_type TEXT; -- yes_no | over_under | player_prop
ALTER TABLE side_pots ADD COLUMN evidence_json TEXT; -- links, timestamps


PATCH: save operator notes & evidence on resolve/hold/void

app.post('/api/sidepots/:id/hold', requireOperator, (req, res) => {
  const { reason, evidence } = req.body; // { reason: 'need VOD', evidence: { link, ts } }
  db.prepare('UPDATE side_pots SET status="on_hold", evidence_json=? WHERE id=?')
    .run(JSON.stringify(evidence || { reason }), req.params.id);
  res.json({ ok: true });
});

app.post('/api/sidepots/:id/resolve', requireOperator, (req, res) => {
  const { winnerSide, evidence } = req.body;
  // … existing credit release …
  db.prepare('UPDATE side_pots SET status="resolved", evidence_json=? WHERE id=?')
    .run(JSON.stringify(evidence || {}), req.params.id);
  res.json({ ok: true });
});

app.post('/api/sidepots/:id/void', requireOperator, (req, res) => {
  const { reason } = req.body;
  // … existing refund …
  db.prepare('UPDATE side_pots SET status="canceled", evidence_json=? WHERE id=?')
    .run(JSON.stringify({ reason }), req.params.id);
  res.json({ ok: true });
});

J) Operator UI tweaks

Resolve drawer (appears when clicking a locked pot):

Description (read-only).

Type + Labels (read-only).

Evidence input:

Stream URL

Timestamp (mm:ss or HH:MM:SS)

Notes

Buttons: A Wins, B Wins, Put On Hold, Void.

If “Hold,” show text box to request specific evidence:
“Please share a clip or timestamp at 12:14–12:22 showing the break & run.”

List filters: Open | Locked | On Hold | Resolved | Voided with counts.

K) Language (safe copy to use everywhere)

“Create a Custom Side Pot: describe your condition briefly and objectively.”

“Credits lock at cutoff. If the outcome can’t be verified, operators will void and refund.”

“Resolution source: official stream or scorekeeper records.”

“Winner receives the pot minus service fee.”

L) Examples (train your operators with these)

Yes/No: First rack break & run

Evidence: Stream 03:12–04:05 shows Tyga breaks, sinks ball, runs out.

Decision: Yes wins → resolve A.

Over/Under 3.5 BRs

Evidence: Score sheet + VOD summary shows 3 BRs total.

Decision: Under wins → resolve B.

Ambiguous: “Tyga goes off”

Decision: Void (bad wording). Message: “Phrase ambiguous; please recreate with measurable condition.”

Late lock (pot locked after rack started)

Decision: Void with reason “late lock.” Advise creator to set earlier cutoff.

M) Quick checklist (at the table)

🔒 Locked before event?

🧾 Description objective?

🎥 Evidence available?

🧮 Fee computed on total pot?

📝 Ledger entries written (lock → resolve/void)?