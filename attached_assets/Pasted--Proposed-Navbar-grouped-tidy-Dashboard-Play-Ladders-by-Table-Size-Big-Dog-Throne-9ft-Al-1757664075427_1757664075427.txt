‚úÖ Proposed Navbar (grouped & tidy)

Dashboard

Play

Ladders by Table Size

Big Dog Throne (9ft)

Almost Big Time (8ft)

Kiddie Box King (7ft / barbox)

Challenge Matches

Hall Battles

Match Divisions

Special Games

Teams

Team Management

Team Matches

Team Challenges

Tournaments

Tournaments

Tournament Brackets

Rankings

League Standings

Rookie Section

Players

Sportsmanship

Media & AI

Live Stream

AI Features

Promote

QR Registration

Poster Generator

Bounties

Charity

Operator (private)

Operator Settings

Operator Subs

File Manager

Revenue Dashboard

Admin

‚öôÔ∏è Menu config (TypeScript)

Use a config so you can hide private items for Operators/Admins only.

// nav.config.ts
export type NavItem = {
  label: string;
  path?: string;
  children?: NavItem[];
  roles?: Array<'public'|'operator'|'admin'>; // controls visibility
};

export const NAV: NavItem[] = [
  { label: 'Dashboard', path: '/dashboard' },

  {
    label: 'Play',
    children: [
      {
        label: 'Ladders by Table Size',
        children: [
          { label: 'Big Dog Throne (9ft)', path: '/ladders/9ft' },
          { label: 'Almost Big Time (8ft)', path: '/ladders/8ft' },
          { label: 'Kiddie Box King (7ft)', path: '/ladders/7ft' },
        ],
      },
      { label: 'Challenge Matches', path: '/challenges' },
      { label: 'Hall Battles', path: '/hall-battles' },
      { label: 'Match Divisions', path: '/divisions' },
      { label: 'Special Games', path: '/special-games' },
    ],
  },

  {
    label: 'Teams',
    children: [
      { label: 'Team Management', path: '/teams/manage' },
      { label: 'Team Matches', path: '/teams/matches' },
      { label: 'Team Challenges', path: '/teams/challenges' },
    ],
  },

  {
    label: 'Tournaments',
    children: [
      { label: 'Tournaments', path: '/tournaments' },
      { label: 'Tournament Brackets', path: '/tournaments/brackets' },
    ],
  },

  {
    label: 'Rankings',
    children: [
      { label: 'League Standings', path: '/standings' },
      { label: 'Rookie Section', path: '/rookie' },
      { label: 'Players', path: '/players' },
      { label: 'Sportsmanship', path: '/sportsmanship' },
    ],
  },

  {
    label: 'Media & AI',
    children: [
      { label: 'Live Stream', path: '/live' },
      { label: 'AI Features', path: '/ai' },
    ],
  },

  {
    label: 'Promote',
    children: [
      { label: 'QR Registration', path: '/qr' },
      { label: 'Poster Generator', path: '/poster' },
      { label: 'Bounties', path: '/bounties' },
      { label: 'Charity', path: '/charity' },
    ],
  },

  {
    label: 'Operator',
    roles: ['operator','admin'],
    children: [
      { label: 'Operator Settings', path: '/operator/settings', roles: ['operator','admin'] },
      { label: 'Operator Subs', path: '/operator/subscriptions', roles: ['operator','admin'] },
      { label: 'File Manager', path: '/files', roles: ['operator','admin'] },
      { label: 'Revenue Dashboard', path: '/revenue', roles: ['operator','admin'] },
      { label: 'Admin', path: '/admin', roles: ['admin'] },
    ],
  },
];

üß© Responsive React/Tailwind Navbar (dropdowns)

Paste this into your layout. It renders nested dropdowns and hides private items unless the user has the right role.

// components/Navbar.tsx
import React from 'react';
import Link from 'next/link'; // or your router
import { NAV, NavItem } from '../nav.config';

type Props = { role?: 'public'|'operator'|'admin' };

const canSee = (item: NavItem, role: Props['role']) => {
  if (!item.roles || item.roles.length === 0) return true;
  return role ? item.roles.includes(role) : false;
};

export default function Navbar({ role = 'public' }: Props) {
  const items = NAV.filter(i => canSee(i, role));

  return (
    <nav className="w-full bg-zinc-900 text-zinc-100">
      <div className="mx-auto max-w-7xl px-4">
        <div className="flex h-14 items-center gap-4">
          <Link href="/" className="text-lg font-semibold tracking-wide">
            ACTIONLADDER
          </Link>
          <ul className="hidden md:flex items-center gap-2">
            {items.map((item) => (
              <li key={item.label} className="group relative">
                {item.children ? (
                  <>
                    <button className="px-3 py-2 rounded-md hover:bg-zinc-800">
                      {item.label}
                    </button>
                    <div className="invisible absolute left-0 top-full z-50 min-w-[260px] translate-y-2 rounded-xl border border-zinc-800 bg-zinc-900 p-2 shadow-2xl opacity-0 transition-all group-hover:visible group-hover:translate-y-1 group-hover:opacity-100">
                      {item.children.map((child) =>
                        canSee(child, role) ? (
                          <MenuChild key={child.label} item={child} role={role} />
                        ) : null
                      )}
                    </div>
                  </>
                ) : (
                  <Link href={item.path || '#'} className="px-3 py-2 rounded-md hover:bg-zinc-800">
                    {item.label}
                  </Link>
                )}
              </li>
            ))}
          </ul>

          {/* Mobile */}
          <details className="md:hidden ml-auto">
            <summary className="cursor-pointer px-3 py-2 rounded-md hover:bg-zinc-800">Menu</summary>
            <div className="mt-2 space-y-1 rounded-xl border border-zinc-800 bg-zinc-900 p-2">
              {items.map((item) => (
                <MobileItem key={item.label} item={item} role={role} />
              ))}
            </div>
          </details>
        </div>
      </div>
    </nav>
  );
}

function MenuChild({ item, role }: { item: NavItem; role: Props['role'] }) {
  if (item.children && item.children.length) {
    return (
      <div className="group/item relative">
        <div className="flex items-center justify-between px-3 py-2 rounded-md hover:bg-zinc-800">
          {item.label}
          <span>‚Ä∫</span>
        </div>
        <div className="invisible absolute left-full top-0 z-50 min-w-[240px] translate-x-2 rounded-xl border border-zinc-800 bg-zinc-900 p-2 opacity-0 shadow-2xl transition-all group-hover/item:visible group-hover/item:translate-x-1 group-hover/item:opacity-100">
          {item.children.map((c) =>
            canSee(c, role) ? (
              <Link key={c.label} href={c.path || '#'} className="block px-3 py-2 rounded-md hover:bg-zinc-800">
                {c.label}
              </Link>
            ) : null
          )}
        </div>
      </div>
    );
  }
  return (
    <Link href={item.path || '#'} className="block px-3 py-2 rounded-md hover:bg-zinc-800">
      {item.label}
    </Link>
  );
}

function MobileItem({ item, role }: { item: NavItem; role: Props['role'] }) {
  if (!item.children) {
    return (
      <Link href={item.path || '#'} className="block px-3 py-2 rounded-md hover:bg-zinc-800">
        {item.label}
      </Link>
    );
  }
  return (
    <details className="rounded-lg">
      <summary className="px-3 py-2 rounded-md hover:bg-zinc-800 cursor-pointer">{item.label}</summary>
      <div className="ml-2 mt-1 space-y-1">
        {item.children.map((c) =>
          canSee(c, role) ? (
            c.children ? (
              <details key={c.label} className="ml-2">
                <summary className="px-3 py-2 rounded-md hover:bg-zinc-800 cursor-pointer">{c.label}</summary>
                <div className="ml-2 mt-1">
                  {c.children.map((g) =>
                    canSee(g, role) ? (
                      <Link key={g.label} href={g.path || '#'} className="block px-3 py-2 rounded-md hover:bg-zinc-800">
                        {g.label}
                      </Link>
                    ) : null
                  )}
                </div>
              </details>
            ) : (
              <Link key={c.label} href={c.path || '#'} className="block px-3 py-2 rounded-md hover:bg-zinc-800">
                {c.label}
              </Link>
            )
          ) : null
        )}
      </div>
    </details>
  );
}


If you want, I can drop this into a canvas file next so you can tweak labels/paths visually‚Äîor wire it to your auth so Operator/Admin sections only show for the right people.