# Monetization Review Gameplan (Action Ladder)

Use this checklist and drop‑in snippets to turn revenue “leaks” into revenue “streams.” Paste pieces into your current React/Node/Express + Stripe setup. Keep all keys server‑side except the publishable key.

---

## 1) Quick Revenue Checklist (what I’ll scan in your repo)

**Stripe config**

* Prices exist for: Rookie / Basic / Pro memberships, Challenge Fees (tiers), Side‑Pot Creation Fee, Reservation Deposit, Priority Pass (queue‑skip), Tip Jar.
* `allow_promotion_codes: true` on Checkout for growth.
* Webhook `checkout.session.completed` and `invoice.payment_succeeded` implemented.
* All price IDs centralized in one config file.

**Paywalls & upsells**

* Route guards: features gated by `user.tier`.
* Inline upsells where intent is high (queueing, matchmaker, posting a challenge, creating a side‑pot).
* “Priority Pass” surfaced when queues are long.

**Challenge fee math**

* Commission applied once, using idempotent server math (not client).
* 5% ladder commission with **round‑up to nearest \$1**.
* Optional **side‑pot creation fee**: min(\$3, 3%).

**Deposits / no‑show**

* Reservation Deposit SKU with auto‑refund on verified attendance; forfeit on no‑show.

**Referrals & coupons**

* Simple code path to apply coupon for first month.

**Compliance / wording**

* Replace “bet/gamble/odds/escrow” with “challenge/skill rating/hold,” etc. (see sanitizer middleware below).

**Analytics**

* Track: checkout started/completed, paywall viewed, side‑pot created, priority pass purchased, refund issued.

---

## 2) Price ID Centralization (server)

Create one module for all pricing. Import this everywhere.

```ts
// src/config/prices.ts
export const PRICES = {
  MEMBERSHIP: {
    ROOKIE: process.env.STRIPE_PRICE_ROOKIE!,   // $20/mo
    BASIC:  process.env.STRIPE_PRICE_BASIC!,    // $25/mo
    PRO:    process.env.STRIPE_PRICE_PRO!,      // $60/mo
  },
  FEES: {
    CHALLENGE_5: process.env.STRIPE_PRICE_CHALLENGE_5!,   // $5
    CHALLENGE_10: process.env.STRIPE_PRICE_CHALLENGE_10!, // $10
    CHALLENGE_25: process.env.STRIPE_PRICE_CHALLENGE_25!, // $25
    PRIORITY_PASS: process.env.STRIPE_PRICE_PRIORITY!,    // e.g. $3
    SIDE_POT_CREATION: process.env.STRIPE_PRICE_SIDE_POT!,// e.g. $1–$3
    RESERVATION_DEPOSIT: process.env.STRIPE_PRICE_DEPOSIT!, // e.g. $10–$20
    TIP_1: process.env.STRIPE_PRICE_TIP_1!,
    TIP_3: process.env.STRIPE_PRICE_TIP_3!,
    TIP_5: process.env.STRIPE_PRICE_TIP_5!,
  },
} as const;
```

Env keys you’ll need in `.env` (server):

```
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
STRIPE_PRICE_ROOKIE=
STRIPE_PRICE_BASIC=
STRIPE_PRICE_PRO=
STRIPE_PRICE_CHALLENGE_5=
STRIPE_PRICE_CHALLENGE_10=
STRIPE_PRICE_CHALLENGE_25=
STRIPE_PRICE_PRIORITY=
STRIPE_PRICE_SIDE_POT=
STRIPE_PRICE_DEPOSIT=
STRIPE_PRICE_TIP_1=
STRIPE_PRICE_TIP_3=
STRIPE_PRICE_TIP_5=
```

---

## 3) Server: Checkout Session endpoint (Express + TypeScript)

```ts
// src/server/checkout.ts
import express from 'express';
import Stripe from 'stripe';
import { PRICES } from '../config/prices';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2023-10-16' });

// Helper for idempotency key
const idem = () => `ck_${Date.now()}_${Math.random().toString(36).slice(2)}`;

router.post('/create-checkout-session', async (req, res) => {
  try {
    const { priceId, quantity = 1, mode = 'payment', metadata = {} } = req.body as {
      priceId: string; quantity?: number; mode?: 'payment'|'subscription'; metadata?: Record<string,string>;
    };

    // SECURITY: never trust client amounts; only accept priceId from your own allowlist
    const valid = Object.values(PRICES.MEMBERSHIP).concat(Object.values(PRICES.FEES));
    if (!valid.includes(priceId)) return res.status(400).json({ error: 'Invalid priceId' });

    const session = await stripe.checkout.sessions.create({
      mode,
      line_items: [{ price: priceId, quantity }],
      success_url: `${process.env.PUBLIC_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.PUBLIC_URL}/billing`,
      allow_promotion_codes: true,
      automatic_tax: { enabled: true },
      metadata,
    }, { idempotencyKey: idem() });

    res.json({ url: session.url });
  } catch (e:any) {
    console.error(e);
    res.status(500).json({ error: 'Checkout failed' });
  }
});

export default router;
```

---

## 4) Server: Webhook math (commission, deposits, side‑pot fee)

```ts
// src/server/webhooks.ts
import express from 'express';
import Stripe from 'stripe';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2023-10-16' });

// Commission helpers
const roundUpDollar = (cents:number) => {
  const dollars = cents / 100;
  return Math.ceil(dollars) * 100; // return cents rounded up to next $1
};

router.post('/stripe-webhook', express.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'] as string;
  let event: Stripe.Event;
  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET!);
  } catch (err:any) {
    console.error('Webhook signature verification failed.', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed': {
        const session = event.data.object as Stripe.Checkout.Session;
        // Persist payment/entitlement
        // Example metadata: { type: 'MEMBERSHIP', tier: 'PRO', userId, ladderId }
        // TODO: mark membership active, add perks, emit analytics
        break;
      }
      case 'invoice.payment_succeeded': {
        // Subscriptions renewals
        break;
      }
      case 'charge.succeeded': {
        const charge = event.data.object as Stripe.Charge;
        const amount = charge.amount; // cents
        const meta = charge.metadata || {};

        if (meta.type === 'CHALLENGE_FEE') {
          // ladder commission 5% rounded up to $1
          const commission = roundUpDollar(Math.ceil(amount * 0.05));
          // record: credit ladder, debit event pool, etc. (your database ops here)
        }

        if (meta.type === 'SIDE_POT_CREATION') {
          // flat or % min
          const percent = Math.floor(amount * 0.03);
          const minFlat = 100; // $1 in cents (tune 100–300)
          const sidePotFee = Math.max(percent, minFlat);
          // record fee revenue
        }

        if (meta.type === 'RESERVATION_DEPOSIT') {
          // mark deposit held for attendance verification
        }

        break;
      }
      default:
        // ignore
    }
  } catch (e) {
    console.error(e);
  }

  res.json({ received: true });
});

export default router;
```

---

## 5) Frontend: Paywall Route Guard + Inline Upsell

```tsx
// src/components/Paywall.tsx
import { useMemo } from 'react';

export function Paywall({ user, children }: { user: { tier: 'ROOKIE'|'BASIC'|'PRO' } | null, children: React.ReactNode }) {
  const unlocked = user && (user.tier === 'PRO');
  if (unlocked) return <>{children}</>;
  return (
    <div className="p-6 rounded-2xl shadow">
      <h2 className="text-xl font-bold mb-2">Unlock this feature</h2>
      <p className="mb-4">This tool is part of Pro membership. Upgrade to access matchmaker priority, free tournament entries, and lower commissions.</p>
      <a className="btn" href="/billing?upgrade=PRO">Upgrade to Pro</a>
      <div className="mt-4 text-sm opacity-80">Just need it once? Grab a one‑time <a href="/checkout/priority-pass" className="underline">Priority Pass</a>.</div>
    </div>
  );
}
```

Inline example at a high‑intent spot:

```tsx
// When user tries to create a side‑pot or post a challenge
{!user?.tier || user.tier === 'ROOKIE' ? (
  <Paywall user={user}>
    {/* gated UI */}
  </Paywall>
) : (
  <CreateChallengeForm />
)}
```

---

## 6) Frontend: Start Checkout (client → server)

```tsx
// src/lib/checkout.ts
export async function startCheckout(priceId: string, metadata: Record<string,string> = {}, mode: 'payment'|'subscription' = 'payment') {
  const r = await fetch('/api/create-checkout-session', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ priceId, metadata, mode }),
  });
  const data = await r.json();
  if (data?.url) window.location.href = data.url;
  else throw new Error('Checkout init failed');
}
```

Usage examples:

```tsx
// Buy Priority Pass
<button onClick={() => startCheckout(PRICES.FEES.PRIORITY_PASS, { type: 'PRIORITY_PASS', userId })}>
  Skip the line ($3)
</button>

// Create Side‑Pot
<button onClick={() => startCheckout(PRICES.FEES.SIDE_POT_CREATION, { type: 'SIDE_POT_CREATION', ladderId, userId })}>
  Create Side‑Pot
</button>

// Join Membership (subscription)
<button onClick={() => startCheckout(PRICES.MEMBERSHIP.PRO, { type: 'MEMBERSHIP', tier: 'PRO', userId }, 'subscription')}>
  Go Pro ($60/mo)
</button>
```

> Import `PRICES` on the client by exposing a **safe** mapping with only price names (or duplicate IDs client‑side if you’re comfortable). Never compute money on the client.

---

## 7) Reservation Deposits with Auto‑Refund (attendance verified)

```ts
// server: after TD marks attendance
import Stripe from 'stripe';
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2023-10-16' });

export async function refundDeposit(paymentIntentId: string, amountCents?: number) {
  // optional partial refund with `amount` (in cents)
  return stripe.refunds.create({ payment_intent: paymentIntentId, amount: amountCents });
}
```

DB schema note: store `payment_intent` for deposits from webhook; on attendance, call `refundDeposit`.

---

## 8) “Tip Jar” add‑on at Checkout

Offer optional tips as separate line items so they aren’t taxed like fees in some regions.

```tsx
<div className="mt-4">
  <label>Add a tip (keeps the lights on)</label>
  <div className="flex gap-2 mt-2">
    <button onClick={() => startCheckout(PRICES.FEES.TIP_1, { type: 'TIP', userId })}>$1</button>
    <button onClick={() => startCheckout(PRICES.FEES.TIP_3, { type: 'TIP', userId })}>$3</button>
    <button onClick={() => startCheckout(PRICES.FEES.TIP_5, { type: 'TIP', userId })}>$5</button>
  </div>
</div>
```

---

## 9) Sanitizer Middleware (wording → non‑gambling)

Automatically rewrite problematic words from user‑generated content before display.

```ts
// src/server/sanitize.ts
const WORD_MAP: Record<string,string> = {
  'bet': 'challenge',
  'bets': 'challenges',
  'betted': 'challenged',
  'betting': 'challenging',
  'gamble': 'play',
  'gambling': 'competitive play',
  'odds': 'skill rating',
  'wager': 'challenge',
  'escrow': 'hold',
};

export function sanitizeCopy(input: string) {
  const pattern = new RegExp(`\\b(${Object.keys(WORD_MAP).join('|')})\\b`, 'gi');
  return input.replace(pattern, (m) => WORD_MAP[m.toLowerCase()] || m);
}
```

Use on any titles/descriptions before saving or rendering.

---

## 10) Feature Flags for Fast Experiments

```ts
// src/config/flags.ts
export const FLAGS = {
  ENABLE_PRIORITY_PASS: true,
  ENABLE_SIDE_POT_FEE: true,
  ENABLE_DEPOSIT_REQUIRED: false, // flip to true during peak hours
};
```

Conditional use:

```ts
if (FLAGS.ENABLE_DEPOSIT_REQUIRED) {
  // require deposit before match scheduling UI is enabled
}
```

---

## 11) Analytics Events (minimal)

Emit events to your provider (PostHog/Mixpanel/etc.).

```ts
track('checkout_started', { priceId, type });
track('checkout_completed', { type, userId });
track('paywall_viewed', { feature: 'matchmaker' });
track('priority_pass_bought');
track('side_pot_created');
```

Look for: paywall view → checkout start rate < 15%? Tighten copy and add trial or coupon.

---

## 12) Security & Reliability Notes

* Always verify Stripe webhook signature; use **raw** body.
* Use idempotency keys on create/confirm operations.
* Keep all amounts server‑side; never trust client math.
* Rate‑limit routes that create fees or side‑pots.
* Store `userId`, `ladderId` in **metadata** for audit trails.
* Automatic Tax on Checkout; validate business address in Stripe.
* If you later add Stripe Connect (marketplace payouts), you’ll need KYC and a different flow (destination charges / transfers). Start simple.

---

## 13) “Where to Monetize” Map (hit these screens first)

1. **Create Challenge** → show Challenge Fee and optional Priority Pass.
2. **Join Ladder** → show tier comparison; default select **Pro**.
3. **Schedule Match** → require Reservation Deposit during peak hours.
4. **Create Side‑Pot** → fee to create; optional tip.
5. **Match Result** → upsell to Pro to lower commissions next time.

---

## 14) Test Plan (Stripe Test Mode)

* Use `4242 4242 4242 4242` for generic success; verify webhooks fire and DB updates.
* Test failed payment card `4000 0000 0000 0002` and verify rollback.
* Subscription trial? Use `trial_period_days` on the Price or set coupon.
* Issue a partial refund on a deposit and confirm analytics event.

---

### Done right, these levers add small, fair charges where users already see value—without sketchy behavior. When you share your Replit link, I’ll scan for these hooks and wire points, then suggest exact diffs.
