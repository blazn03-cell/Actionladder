0) New env vars (add to .env)
# pricing
TOURNAMENT_BASIC_USD=25
TOURNAMENT_NONMEMBER_USD=30

# admin protection for the list/CSV endpoints
ADMIN_API_KEY=change_this_to_a_long_random_string


You can tweak those two numbers any time without changing code.

1) Update db.js (add a table + helpers)

Add this under your existing schema (keep the users table):

db.exec(`
CREATE TABLE IF NOT EXISTS tournament_entries (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  tournament_id TEXT NOT NULL,
  user_id TEXT NOT NULL,
  amount_cents INTEGER NOT NULL,
  status TEXT NOT NULL,                       -- paid | comped | refunded | pending
  stripe_payment_intent_id TEXT,
  created_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),
  UNIQUE(tournament_id, user_id)
);
CREATE INDEX IF NOT EXISTS idx_entries_tourney ON tournament_entries(tournament_id);
`);


Append these helper functions to the bottom and export them:

function getEntry(tournamentId, userId) {
  return db.prepare(
    "SELECT * FROM tournament_entries WHERE tournament_id = ? AND user_id = ?"
  ).get(tournamentId, userId);
}

function recordTournamentEntry({ tournamentId, userId, amountCents, status, paymentIntentId }) {
  // upsert: if user already registered, keep the first paid/comped record
  const existing = getEntry(tournamentId, userId);
  if (existing) return existing;
  db.prepare(`
    INSERT INTO tournament_entries (tournament_id, user_id, amount_cents, status, stripe_payment_intent_id)
    VALUES (?, ?, ?, ?, ?)
  `).run(tournamentId, userId, amountCents, status, paymentIntentId || null);
  return getEntry(tournamentId, userId);
}

function listMembers({ role, status } = {}) {
  let sql = "SELECT id, email, display_name, role, membership_status, current_period_end, stripe_customer_id FROM users WHERE 1=1";
  const args = [];
  if (role) { sql += " AND role = ?"; args.push(role); }
  if (status) { sql += " AND membership_status = ?"; args.push(status); }
  sql += " ORDER BY display_name COLLATE NOCASE";
  return db.prepare(sql).all(...args);
}

function membersToCSV(rows) {
  const header = ["id","email","display_name","role","membership_status","current_period_end","stripe_customer_id"];
  const lines = [header.join(",")];
  for (const r of rows) {
    lines.push([
      r.id, r.email || "", (r.display_name || "").replace(/,/g," "),
      r.role, r.membership_status, r.current_period_end || "", r.stripe_customer_id || ""
    ].join(","));
  }
  return lines.join("\n");
}

module.exports = {
  // existing exports...
  upsertUser,
  getUserById,
  getStripeCustomerIdForUser,
  setStripeIds,
  setMembership,
  getMembershipStatus,
  // NEW
  getEntry,
  recordTournamentEntry,
  listMembers,
  membersToCSV,
};

2) Update server.js (add endpoints + webhook handling)
a) Admin auth helper (top of file)
const ADMIN_API_KEY = process.env.ADMIN_API_KEY;
function requireAdmin(req, res, next) {
  const key = req.headers["x-admin-key"];
  if (!ADMIN_API_KEY || key === ADMIN_API_KEY) return next();
  return res.status(401).json({ error: "unauthorized" });
}

b) Import the new DB helpers (top of file, with others)
const {
  upsertUser,
  getStripeCustomerIdForUser,
  setStripeIds,
  setMembership,
  getMembershipStatus,
  getEntry,
  recordTournamentEntry,
  listMembers,
  membersToCSV,
} = require("./db");

c) Admin endpoints (JSON + CSV)
// JSON list of members (optionally filter by role/status)
app.get("/api/admin/members", requireAdmin, (req, res) => {
  const { role, status } = req.query;
  const rows = listMembers({ role, status });
  res.json({ count: rows.length, rows });
});

// CSV export (Content-Type text/csv)
app.get("/api/admin/members.csv", requireAdmin, (req, res) => {
  const { role, status } = req.query;
  const rows = listMembers({ role, status });
  const csv = membersToCSV(rows);
  res.setHeader("Content-Type", "text/csv");
  res.setHeader("Content-Disposition", "attachment; filename=members.csv");
  res.send(csv);
});

d) Tournament entry: free for Pro, pay for others

Helper to compute fee (in cents):

function computeTournamentFeeCents(role) {
  if (role === "pro") return 0;
  if (role === "basic") return Math.round((Number(process.env.TOURNAMENT_BASIC_USD) || 25) * 100);
  return Math.round((Number(process.env.TOURNAMENT_NONMEMBER_USD) || 30) * 100);
}


Endpoint to start/award an entry

app.post("/api/tournaments/entry", async (req, res) => {
  try {
    const { userId, tournamentId, userEmail } = req.body || {};
    if (!userId || !tournamentId) return res.status(400).json({ error: "userId and tournamentId required" });

    // Prevent duplicates
    const already = getEntry(tournamentId, userId);
    if (already) return res.json({ alreadyRegistered: true, entry: already });

    const status = getMembershipStatus(userId); // { role: 'nonmember' | 'basic' | 'pro', ... }
    const amountCents = computeTournamentFeeCents(status?.role || "nonmember");

    if (amountCents === 0) {
      // Comped for Pro
      const entry = recordTournamentEntry({ tournamentId, userId, amountCents: 0, status: "comped" });
      return res.json({ comped: true, entry });
    }

    // Charge via Checkout (one-off payment)
    const session = await stripe.checkout.sessions.create({
      mode: "payment",
      customer_email: userEmail || status?.email || undefined,
      line_items: [{
        price_data: {
          currency: "usd",
          unit_amount: amountCents,
          product_data: {
            name: `Tournament Entry – ${tournamentId}`,
          },
        },
        quantity: 1,
      }],
      success_url: `${process.env.APP_URL}/tournaments/${tournamentId}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.APP_URL}/tournaments/${tournamentId}/cancel`,
      client_reference_id: `${userId}:${tournamentId}`,
      metadata: {
        type: "tournament_entry",
        userId,
        tournamentId,
        amountCents: String(amountCents),
      },
      payment_intent_data: {
        metadata: {
          type: "tournament_entry",
          userId,
          tournamentId,
        },
      },
      allow_promotion_codes: false, // Pro is comped above; keep this false to avoid zeroing others
    });

    res.json({ url: session.url, amountCents });
  } catch (e) {
    console.error(e);
    res.status(400).json({ error: e.message });
  }
});

e) Webhook: record paid entries (extend existing checkout.session.completed)

Replace your checkout.session.completed case with this superset (keeps subscriptions working and adds tournament entries):

case "checkout.session.completed": {
  const sess = event.data.object;

  // Branch 1: tournament one-off payments
  if (sess.mode === "payment" && (sess.metadata?.type === "tournament_entry")) {
    const userId = sess.metadata.userId;
    const tournamentId = sess.metadata.tournamentId;
    const amountCents = Number(sess.metadata.amountCents || 0);
    const paymentIntentId = sess.payment_intent || null;

    recordTournamentEntry({
      tournamentId,
      userId,
      amountCents,
      status: "paid",
      paymentIntentId,
    });

    break; // done
  }

  // Branch 2: subscription checkouts (Basic/Pro)
  if (sess.mode === "subscription") {
    const userId = sess.client_reference_id || sess.metadata?.userId;
    const tier = (sess.metadata?.tier) || "basic";
    const subscriptionId = sess.subscription || undefined;

    setStripeIds(userId, { customerId: sess.customer, subscriptionId });
    setMembership(userId, tier, "active", undefined, {
      customer: sess.customer,
      sub: subscriptionId,
    });
  }
  break;
}


You already handle customer.subscription.* and invoice.payment_failed in your file—keep those. No other webhook changes needed.

3) Frontend usage (2 quick examples)

A) “Register for Tournament” button

<button onclick="enter('TOURNEY_2025_09_01')">Enter Tournament</button>
<script>
async function enter(tournamentId){
  const r = await fetch('/api/tournaments/entry', {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ userId: 'USER_123', tournamentId, userEmail: 'player@example.com' })
  });
  const data = await r.json();
  if (data.alreadyRegistered || data.comped) {
    alert('You are in!'); location.href = `/tournaments/${tournamentId}`;
  } else if (data.url) {
    location.href = data.url; // Stripe Checkout
  } else {
    alert('Could not start entry: ' + (data.error || 'unknown'));
  }
}
</script>


B) Admin CSV download

curl -H "x-admin-key: change_this_to_a_long_random_string" \
  "https://your-app-url/api/admin/members.csv?role=pro" -o members_pro.csv